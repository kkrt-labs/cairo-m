
running 0 tests

test result: ok. 0 passed; 0 failed; 0 ignored; 0 measured; 0 filtered out; finished in 0.00s


running 0 tests

test result: ok. 0 passed; 0 failed; 0 ignored; 0 measured; 0 filtered out; finished in 0.00s


running 1 test
test fibonacci::trace_memory_generator::test_import_fibonacci ... FAILED

failures:

---- fibonacci::trace_memory_generator::test_import_fibonacci stdout ----
Pass 'InPlaceOptimizationPass' modified function 'fib'
Warning: Block 1 uses value 3 that is not defined in the block or as a parameter
Warning: Block 2 uses value 1 that is not defined in the block or as a parameter
Warning: Block 2 uses value 2 that is not defined in the block or as a parameter
Warning: Block 2 uses value 3 that is not defined in the block or as a parameter
Warning: Block 3 uses value 1 that is not defined in the block or as a parameter

thread 'fibonacci::trace_memory_generator::test_import_fibonacci' panicked at crates/prover/tests/fibonacci_trace_test.rs:72:13:
assertion `left == right` failed
  left: ProverInput { initial_memory: [MemoryCell { address: M31(0), clock: M31(0), value: (6 + 0i) + (0 + 0i)u, multiplicity: M31(2) }, MemoryCell { address: M31(1), clock: M31(0), value: (6 + 1i) + (0 + 1i)u, multiplicity: M31(2) }, MemoryCell { address: M31(2), clock: M31(0), value: (6 + 0i) + (0 + 2i)u, multiplicity: M31(2) }, MemoryCell { address: M31(3), clock: M31(0), value: (2 + 2i) + (2147483643 + 3i)u, multiplicity: M31(3) }, MemoryCell { address: M31(17), clock: M31(0), value: (1 + 0i) + (0 + 0i)u, multiplicity: M31(3) }, MemoryCell { address: M31(4), clock: M31(0), value: (31 + 3i) + (3 + 0i)u, multiplicity: M31(3) }, MemoryCell { address: M31(7), clock: M31(0), value: (6 + 1i) + (0 + 3i)u, multiplicity: M31(2) }, MemoryCell { address: M31(8), clock: M31(0), value: (31 + 3i) + (2 + 0i)u, multiplicity: M31(3) }, MemoryCell { address: M31(10), clock: M31(0), value: (4 + 0i) + (0 + 4i)u, multiplicity: M31(2) }, MemoryCell { address: M31(11), clock: M31(0), value: (4 + 1i) + (0 + 0i)u, multiplicity: M31(2) }, MemoryCell { address: M31(12), clock: M31(0), value: (0 + 1i) + (4 + 1i)u, multiplicity: M31(2) }, MemoryCell { address: M31(13), clock: M31(0), value: (1 + 2i) + (1 + 2i)u, multiplicity: M31(2) }, MemoryCell { address: M31(14), clock: M31(0), value: (20 + 3i) + (0 + 0i)u, multiplicity: M31(2) }, MemoryCell { address: M31(5), clock: M31(0), value: (6 + 0i) + (0 + 3i)u, multiplicity: M31(2) }, MemoryCell { address: M31(6), clock: M31(0), value: (20 + 8i) + (0 + 0i)u, multiplicity: M31(2) }, MemoryCell { address: M31(9), clock: M31(0), value: (20 + 15i) + (0 + 0i)u, multiplicity: M31(2) }, MemoryCell { address: M31(15), clock: M31(0), value: (4 + 0i) + (0 + 2147483644i)u, multiplicity: M31(2) }, MemoryCell { address: M31(16), clock: M31(0), value: (15 + 0i) + (0 + 0i)u, multiplicity: M31(2) }, MemoryCell { address: M31(20), clock: M31(0), value: (17 + 0i) + (0 + 0i)u, multiplicity: M31(2) }, MemoryCell { address: M31(19), clock: M31(0), value: (21 + 0i) + (0 + 0i)u, multiplicity: M31(2) }], final_memory: [MemoryCell { address: M31(24), clock: M31(15), value: (0 + 0i) + (0 + 0i)u, multiplicity: M31(2147483646) }, MemoryCell { address: M31(3), clock: M31(0), value: (2 + 2i) + (2147483643 + 3i)u, multiplicity: M31(2147483646) }, MemoryCell { address: M31(5), clock: M31(0), value: (6 + 0i) + (0 + 3i)u, multiplicity: M31(2147483646) }, MemoryCell { address: M31(21), clock: M31(9), value: (1 + 0i) + (0 + 0i)u, multiplicity: M31(2147483646) }, MemoryCell { address: M31(12), clock: M31(0), value: (0 + 1i) + (4 + 1i)u, multiplicity: M31(2147483646) }, MemoryCell { address: M31(16), clock: M31(0), value: (15 + 0i) + (0 + 0i)u, multiplicity: M31(2147483646) }, MemoryCell { address: M31(25), clock: M31(8), value: (0 + 0i) + (0 + 0i)u, multiplicity: M31(2147483646) }, MemoryCell { address: M31(18), clock: M31(19), value: (1 + 0i) + (0 + 0i)u, multiplicity: M31(2147483646) }, MemoryCell { address: M31(2), clock: M31(0), value: (6 + 0i) + (0 + 2i)u, multiplicity: M31(2147483646) }, MemoryCell { address: M31(7), clock: M31(0), value: (6 + 1i) + (0 + 3i)u, multiplicity: M31(2147483646) }, MemoryCell { address: M31(4), clock: M31(0), value: (31 + 3i) + (3 + 0i)u, multiplicity: M31(2147483646) }, MemoryCell { address: M31(23), clock: M31(11), value: (1 + 0i) + (0 + 0i)u, multiplicity: M31(2147483646) }, MemoryCell { address: M31(9), clock: M31(0), value: (20 + 15i) + (0 + 0i)u, multiplicity: M31(2147483646) }, MemoryCell { address: M31(19), clock: M31(0), value: (21 + 0i) + (0 + 0i)u, multiplicity: M31(2147483646) }, MemoryCell { address: M31(13), clock: M31(0), value: (1 + 2i) + (1 + 2i)u, multiplicity: M31(2147483646) }, MemoryCell { address: M31(8), clock: M31(0), value: (31 + 3i) + (2 + 0i)u, multiplicity: M31(2147483646) }, MemoryCell { address: M31(15), clock: M31(0), value: (4 + 0i) + (0 + 2147483644i)u, multiplicity: M31(2147483646) }, MemoryCell { address: M31(1), clock: M31(0), value: (6 + 1i) + (0 + 1i)u, multiplicity: M31(2147483646) }, MemoryCell { address: M31(10), clock: M31(0), value: (4 + 0i) + (0 + 4i)u, multiplicity: M31(2147483646) }, MemoryCell { address: M31(20), clock: M31(0), value: (17 + 0i) + (0 + 0i)u, multiplicity: M31(2147483646) }, MemoryCell { address: M31(22), clock: M31(10), value: (1 + 0i) + (0 + 0i)u, multiplicity: M31(2147483646) }, MemoryCell { address: M31(14), clock: M31(0), value: (20 + 3i) + (0 + 0i)u, multiplicity: M31(2147483646) }, MemoryCell { address: M31(6), clock: M31(0), value: (20 + 8i) + (0 + 0i)u, multiplicity: M31(2147483646) }, MemoryCell { address: M31(0), clock: M31(0), value: (6 + 0i) + (0 + 0i)u, multiplicity: M31(2147483646) }, MemoryCell { address: M31(17), clock: M31(0), value: (1 + 0i) + (0 + 0i)u, multiplicity: M31(2147483646) }, MemoryCell { address: M31(11), clock: M31(0), value: (4 + 1i) + (0 + 0i)u, multiplicity: M31(2147483646) }], instructions: Instructions { initial_registers: State { pc: M31(0), fp: M31(21) }, final_registers: State { pc: M31(17), fp: M31(21) }, states_by_opcodes: {Ret: [ExecutionBundle { registers: State { pc: M31(16), fp: M31(21) }, clock: M31(20), instruction: InstructionAccess { prev_clock: M31(0), value: (15 + 0i) + (0 + 0i)u }, operands: [Some(DataAccess { address: M31(20), prev_clock: M31(0), prev_value: M31(17), value: M31(17), multiplicity: M31(0) }), Some(DataAccess { address: M31(19), prev_clock: M31(0), prev_value: M31(21), value: M31(21), multiplicity: M31(0) }), None] }], StoreSubFpFp: [ExecutionBundle { registers: State { pc: M31(3), fp: M31(21) }, clock: M31(4), instruction: InstructionAccess { prev_clock: M31(0), value: (2 + 2i) + (2147483643 + 3i)u }, operands: [Some(DataAccess { address: M31(23), prev_clock: M31(3), prev_value: M31(0), value: M31(0), multiplicity: M31(0) }), Some(DataAccess { address: M31(17), prev_clock: M31(0), prev_value: M31(1), value: M31(1), multiplicity: M31(0) }), Some(DataAccess { address: M31(24), prev_clock: M31(0), prev_value: M31(2147483646), value: M31(2147483646), multiplicity: M31(1) })] }, ExecutionBundle { registers: State { pc: M31(3), fp: M31(21) }, clock: M31(13), instruction: InstructionAccess { prev_clock: M31(0), value: (2 + 2i) + (2147483643 + 3i)u }, operands: [Some(DataAccess { address: M31(23), prev_clock: M31(11), prev_value: M31(1), value: M31(1), multiplicity: M31(0) }), Some(DataAccess { address: M31(17), prev_clock: M31(0), prev_value: M31(1), value: M31(1), multiplicity: M31(0) }), Some(DataAccess { address: M31(24), prev_clock: M31(0), prev_value: M31(0), value: M31(0), multiplicity: M31(1) })] }], StoreDerefFp: [ExecutionBundle { registers: State { pc: M31(10), fp: M31(21) }, clock: M31(8), instruction: InstructionAccess { prev_clock: M31(0), value: (4 + 0i) + (0 + 4i)u }, operands: [Some(DataAccess { address: M31(21), prev_clock: M31(1), prev_value: M31(0), value: M31(0), multiplicity: M31(0) }), None, Some(DataAccess { address: M31(25), prev_clock: M31(0), prev_value: M31(0), value: M31(0), multiplicity: M31(2) })] }, ExecutionBundle { registers: State { pc: M31(11), fp: M31(21) }, clock: M31(9), instruction: InstructionAccess { prev_clock: M31(0), value: (4 + 1i) + (0 + 0i)u }, operands: [Some(DataAccess { address: M31(22), prev_clock: M31(2), prev_value: M31(1), value: M31(1), multiplicity: M31(0) }), None, Some(DataAccess { address: M31(21), prev_clock: M31(0), prev_value: M31(1), value: M31(1), multiplicity: M31(2) })] }, ExecutionBundle { registers: State { pc: M31(15), fp: M31(21) }, clock: M31(19), instruction: InstructionAccess { prev_clock: M31(0), value: (4 + 0i) + (0 + 2147483644i)u }, operands: [Some(DataAccess { address: M31(21), prev_clock: M31(9), prev_value: M31(1), value: M31(1), multiplicity: M31(0) }), None, Some(DataAccess { address: M31(18), prev_clock: M31(0), prev_value: M31(1), value: M31(1), multiplicity: M31(1) })] }], StoreAddFpFp: [ExecutionBundle { registers: State { pc: M31(12), fp: M31(21) }, clock: M31(10), instruction: InstructionAccess { prev_clock: M31(0), value: (0 + 1i) + (4 + 1i)u }, operands: [Some(DataAccess { address: M31(22), prev_clock: M31(2), prev_value: M31(1), value: M31(1), multiplicity: M31(0) }), Some(DataAccess { address: M31(25), prev_clock: M31(8), prev_value: M31(0), value: M31(0), multiplicity: M31(0) }), Some(DataAccess { address: M31(22), prev_clock: M31(2), prev_value: M31(1), value: M31(1), multiplicity: M31(1) })] }], StoreAddFpImm: [ExecutionBundle { registers: State { pc: M31(13), fp: M31(21) }, clock: M31(11), instruction: InstructionAccess { prev_clock: M31(0), value: (1 + 2i) + (1 + 2i)u }, operands: [Some(DataAccess { address: M31(23), prev_clock: M31(3), prev_value: M31(0), value: M31(0), multiplicity: M31(0) }), None, Some(DataAccess { address: M31(23), prev_clock: M31(0), prev_value: M31(1), value: M31(1), multiplicity: M31(2) })] }], JmpAbsImm: [ExecutionBundle { registers: State { pc: M31(14), fp: M31(21) }, clock: M31(12), instruction: InstructionAccess { prev_clock: M31(0), value: (20 + 3i) + (0 + 0i)u }, operands: [None, None, None] }, ExecutionBundle { registers: State { pc: M31(6), fp: M31(21) }, clock: M31(16), instruction: InstructionAccess { prev_clock: M31(0), value: (20 + 8i) + (0 + 0i)u }, operands: [None, None, None] }, ExecutionBundle { registers: State { pc: M31(9), fp: M31(21) }, clock: M31(18), instruction: InstructionAccess { prev_clock: M31(0), value: (20 + 15i) + (0 + 0i)u }, operands: [None, None, None] }], JnzFpImm: [ExecutionBundle { registers: State { pc: M31(4), fp: M31(21) }, clock: M31(5), instruction: InstructionAccess { prev_clock: M31(0), value: (31 + 3i) + (3 + 0i)u }, operands: [Some(DataAccess { address: M31(24), prev_clock: M31(4), prev_value: M31(2147483646), value: M31(2147483646), multiplicity: M31(0) }), None, None] }, ExecutionBundle { registers: State { pc: M31(8), fp: M31(21) }, clock: M31(7), instruction: InstructionAccess { prev_clock: M31(0), value: (31 + 3i) + (2 + 0i)u }, operands: [Some(DataAccess { address: M31(24), prev_clock: M31(6), prev_value: M31(1), value: M31(1), multiplicity: M31(0) }), None, None] }, ExecutionBundle { registers: State { pc: M31(4), fp: M31(21) }, clock: M31(14), instruction: InstructionAccess { prev_clock: M31(0), value: (31 + 3i) + (3 + 0i)u }, operands: [Some(DataAccess { address: M31(24), prev_clock: M31(13), prev_value: M31(0), value: M31(0), multiplicity: M31(0) }), None, None] }, ExecutionBundle { registers: State { pc: M31(8), fp: M31(21) }, clock: M31(17), instruction: InstructionAccess { prev_clock: M31(0), value: (31 + 3i) + (2 + 0i)u }, operands: [Some(DataAccess { address: M31(24), prev_clock: M31(15), prev_value: M31(0), value: M31(0), multiplicity: M31(0) }), None, None] }], StoreImm: [ExecutionBundle { registers: State { pc: M31(0), fp: M31(21) }, clock: M31(1), instruction: InstructionAccess { prev_clock: M31(0), value: (6 + 0i) + (0 + 0i)u }, operands: [None, None, Some(DataAccess { address: M31(21), prev_clock: M31(0), prev_value: M31(0), value: M31(0), multiplicity: M31(1) })] }, ExecutionBundle { registers: State { pc: M31(1), fp: M31(21) }, clock: M31(2), instruction: InstructionAccess { prev_clock: M31(0), value: (6 + 1i) + (0 + 1i)u }, operands: [None, None, Some(DataAccess { address: M31(22), prev_clock: M31(0), prev_value: M31(1), value: M31(1), multiplicity: M31(2) })] }, ExecutionBundle { registers: State { pc: M31(2), fp: M31(21) }, clock: M31(3), instruction: InstructionAccess { prev_clock: M31(0), value: (6 + 0i) + (0 + 2i)u }, operands: [None, None, Some(DataAccess { address: M31(23), prev_clock: M31(0), prev_value: M31(0), value: M31(0), multiplicity: M31(2) })] }, ExecutionBundle { registers: State { pc: M31(7), fp: M31(21) }, clock: M31(6), instruction: InstructionAccess { prev_clock: M31(0), value: (6 + 1i) + (0 + 3i)u }, operands: [None, None, Some(DataAccess { address: M31(24), prev_clock: M31(0), prev_value: M31(1), value: M31(1), multiplicity: M31(1) })] }, ExecutionBundle { registers: State { pc: M31(5), fp: M31(21) }, clock: M31(15), instruction: InstructionAccess { prev_clock: M31(0), value: (6 + 0i) + (0 + 3i)u }, operands: [None, None, Some(DataAccess { address: M31(24), prev_clock: M31(13), prev_value: M31(0), value: M31(0), multiplicity: M31(2) })] }]} } }
 right: ProverInput { initial_memory: [MemoryCell { address: M31(0), clock: M31(0), value: (6 + 0i) + (0 + 0i)u, multiplicity: M31(2) }, MemoryCell { address: M31(1), clock: M31(0), value: (6 + 1i) + (0 + 1i)u, multiplicity: M31(2) }, MemoryCell { address: M31(2), clock: M31(0), value: (6 + 0i) + (0 + 2i)u, multiplicity: M31(2) }, MemoryCell { address: M31(3), clock: M31(0), value: (2 + 2i) + (2147483643 + 3i)u, multiplicity: M31(3) }, MemoryCell { address: M31(17), clock: M31(0), value: (1 + 0i) + (0 + 0i)u, multiplicity: M31(3) }, MemoryCell { address: M31(4), clock: M31(0), value: (31 + 3i) + (3 + 0i)u, multiplicity: M31(3) }, MemoryCell { address: M31(7), clock: M31(0), value: (6 + 1i) + (0 + 3i)u, multiplicity: M31(2) }, MemoryCell { address: M31(8), clock: M31(0), value: (31 + 3i) + (2 + 0i)u, multiplicity: M31(3) }, MemoryCell { address: M31(10), clock: M31(0), value: (4 + 0i) + (0 + 4i)u, multiplicity: M31(2) }, MemoryCell { address: M31(11), clock: M31(0), value: (4 + 1i) + (0 + 0i)u, multiplicity: M31(2) }, MemoryCell { address: M31(12), clock: M31(0), value: (0 + 1i) + (4 + 1i)u, multiplicity: M31(2) }, MemoryCell { address: M31(13), clock: M31(0), value: (1 + 2i) + (1 + 2i)u, multiplicity: M31(2) }, MemoryCell { address: M31(14), clock: M31(0), value: (20 + 3i) + (0 + 0i)u, multiplicity: M31(2) }, MemoryCell { address: M31(5), clock: M31(0), value: (6 + 0i) + (0 + 3i)u, multiplicity: M31(2) }, MemoryCell { address: M31(6), clock: M31(0), value: (20 + 8i) + (0 + 0i)u, multiplicity: M31(2) }, MemoryCell { address: M31(9), clock: M31(0), value: (20 + 15i) + (0 + 0i)u, multiplicity: M31(2) }, MemoryCell { address: M31(15), clock: M31(0), value: (4 + 0i) + (0 + 2147483644i)u, multiplicity: M31(2) }, MemoryCell { address: M31(16), clock: M31(0), value: (15 + 0i) + (0 + 0i)u, multiplicity: M31(2) }, MemoryCell { address: M31(20), clock: M31(0), value: (17 + 0i) + (0 + 0i)u, multiplicity: M31(2) }, MemoryCell { address: M31(19), clock: M31(0), value: (21 + 0i) + (0 + 0i)u, multiplicity: M31(2) }], final_memory: [MemoryCell { address: M31(9), clock: M31(0), value: (20 + 15i) + (0 + 0i)u, multiplicity: M31(2147483646) }, MemoryCell { address: M31(0), clock: M31(0), value: (6 + 0i) + (0 + 0i)u, multiplicity: M31(2147483646) }, MemoryCell { address: M31(10), clock: M31(0), value: (4 + 0i) + (0 + 4i)u, multiplicity: M31(2147483646) }, MemoryCell { address: M31(15), clock: M31(0), value: (4 + 0i) + (0 + 2147483644i)u, multiplicity: M31(2147483646) }, MemoryCell { address: M31(18), clock: M31(19), value: (1 + 0i) + (0 + 0i)u, multiplicity: M31(2147483646) }, MemoryCell { address: M31(20), clock: M31(0), value: (17 + 0i) + (0 + 0i)u, multiplicity: M31(2147483646) }, MemoryCell { address: M31(23), clock: M31(11), value: (1 + 0i) + (0 + 0i)u, multiplicity: M31(2147483646) }, MemoryCell { address: M31(22), clock: M31(10), value: (1 + 0i) + (0 + 0i)u, multiplicity: M31(2147483646) }, MemoryCell { address: M31(3), clock: M31(0), value: (2 + 2i) + (2147483643 + 3i)u, multiplicity: M31(2147483646) }, MemoryCell { address: M31(8), clock: M31(0), value: (31 + 3i) + (2 + 0i)u, multiplicity: M31(2147483646) }, MemoryCell { address: M31(25), clock: M31(8), value: (0 + 0i) + (0 + 0i)u, multiplicity: M31(2147483646) }, MemoryCell { address: M31(14), clock: M31(0), value: (20 + 3i) + (0 + 0i)u, multiplicity: M31(2147483646) }, MemoryCell { address: M31(19), clock: M31(0), value: (21 + 0i) + (0 + 0i)u, multiplicity: M31(2147483646) }, MemoryCell { address: M31(2), clock: M31(0), value: (6 + 0i) + (0 + 2i)u, multiplicity: M31(2147483646) }, MemoryCell { address: M31(24), clock: M31(15), value: (0 + 0i) + (0 + 0i)u, multiplicity: M31(2147483646) }, MemoryCell { address: M31(13), clock: M31(0), value: (1 + 2i) + (1 + 2i)u, multiplicity: M31(2147483646) }, MemoryCell { address: M31(7), clock: M31(0), value: (6 + 1i) + (0 + 3i)u, multiplicity: M31(2147483646) }, MemoryCell { address: M31(1), clock: M31(0), value: (6 + 1i) + (0 + 1i)u, multiplicity: M31(2147483646) }, MemoryCell { address: M31(16), clock: M31(0), value: (15 + 0i) + (0 + 0i)u, multiplicity: M31(2147483646) }, MemoryCell { address: M31(21), clock: M31(9), value: (1 + 0i) + (0 + 0i)u, multiplicity: M31(2147483646) }, MemoryCell { address: M31(11), clock: M31(0), value: (4 + 1i) + (0 + 0i)u, multiplicity: M31(2147483646) }, MemoryCell { address: M31(5), clock: M31(0), value: (6 + 0i) + (0 + 3i)u, multiplicity: M31(2147483646) }, MemoryCell { address: M31(12), clock: M31(0), value: (0 + 1i) + (4 + 1i)u, multiplicity: M31(2147483646) }, MemoryCell { address: M31(6), clock: M31(0), value: (20 + 8i) + (0 + 0i)u, multiplicity: M31(2147483646) }, MemoryCell { address: M31(4), clock: M31(0), value: (31 + 3i) + (3 + 0i)u, multiplicity: M31(2147483646) }, MemoryCell { address: M31(17), clock: M31(0), value: (1 + 0i) + (0 + 0i)u, multiplicity: M31(2147483646) }], instructions: Instructions { initial_registers: State { pc: M31(0), fp: M31(21) }, final_registers: State { pc: M31(17), fp: M31(21) }, states_by_opcodes: {JmpAbsImm: [ExecutionBundle { registers: State { pc: M31(14), fp: M31(21) }, clock: M31(12), instruction: InstructionAccess { prev_clock: M31(0), value: (20 + 3i) + (0 + 0i)u }, operands: [None, None, None] }, ExecutionBundle { registers: State { pc: M31(6), fp: M31(21) }, clock: M31(16), instruction: InstructionAccess { prev_clock: M31(0), value: (20 + 8i) + (0 + 0i)u }, operands: [None, None, None] }, ExecutionBundle { registers: State { pc: M31(9), fp: M31(21) }, clock: M31(18), instruction: InstructionAccess { prev_clock: M31(0), value: (20 + 15i) + (0 + 0i)u }, operands: [None, None, None] }], Ret: [ExecutionBundle { registers: State { pc: M31(16), fp: M31(21) }, clock: M31(20), instruction: InstructionAccess { prev_clock: M31(0), value: (15 + 0i) + (0 + 0i)u }, operands: [Some(DataAccess { address: M31(20), prev_clock: M31(0), prev_value: M31(17), value: M31(17), multiplicity: M31(0) }), Some(DataAccess { address: M31(19), prev_clock: M31(0), prev_value: M31(21), value: M31(21), multiplicity: M31(0) }), None] }], StoreSubFpFp: [ExecutionBundle { registers: State { pc: M31(3), fp: M31(21) }, clock: M31(4), instruction: InstructionAccess { prev_clock: M31(0), value: (2 + 2i) + (2147483643 + 3i)u }, operands: [Some(DataAccess { address: M31(23), prev_clock: M31(3), prev_value: M31(0), value: M31(0), multiplicity: M31(0) }), Some(DataAccess { address: M31(17), prev_clock: M31(0), prev_value: M31(1), value: M31(1), multiplicity: M31(0) }), Some(DataAccess { address: M31(24), prev_clock: M31(0), prev_value: M31(2147483646), value: M31(2147483646), multiplicity: M31(1) })] }, ExecutionBundle { registers: State { pc: M31(3), fp: M31(21) }, clock: M31(13), instruction: InstructionAccess { prev_clock: M31(0), value: (2 + 2i) + (2147483643 + 3i)u }, operands: [Some(DataAccess { address: M31(23), prev_clock: M31(11), prev_value: M31(1), value: M31(1), multiplicity: M31(0) }), Some(DataAccess { address: M31(17), prev_clock: M31(0), prev_value: M31(1), value: M31(1), multiplicity: M31(0) }), Some(DataAccess { address: M31(24), prev_clock: M31(0), prev_value: M31(0), value: M31(0), multiplicity: M31(1) })] }], StoreImm: [ExecutionBundle { registers: State { pc: M31(0), fp: M31(21) }, clock: M31(1), instruction: InstructionAccess { prev_clock: M31(0), value: (6 + 0i) + (0 + 0i)u }, operands: [None, None, Some(DataAccess { address: M31(21), prev_clock: M31(0), prev_value: M31(0), value: M31(0), multiplicity: M31(1) })] }, ExecutionBundle { registers: State { pc: M31(1), fp: M31(21) }, clock: M31(2), instruction: InstructionAccess { prev_clock: M31(0), value: (6 + 1i) + (0 + 1i)u }, operands: [None, None, Some(DataAccess { address: M31(22), prev_clock: M31(0), prev_value: M31(1), value: M31(1), multiplicity: M31(2) })] }, ExecutionBundle { registers: State { pc: M31(2), fp: M31(21) }, clock: M31(3), instruction: InstructionAccess { prev_clock: M31(0), value: (6 + 0i) + (0 + 2i)u }, operands: [None, None, Some(DataAccess { address: M31(23), prev_clock: M31(0), prev_value: M31(0), value: M31(0), multiplicity: M31(2) })] }, ExecutionBundle { registers: State { pc: M31(7), fp: M31(21) }, clock: M31(6), instruction: InstructionAccess { prev_clock: M31(0), value: (6 + 1i) + (0 + 3i)u }, operands: [None, None, Some(DataAccess { address: M31(24), prev_clock: M31(0), prev_value: M31(1), value: M31(1), multiplicity: M31(1) })] }, ExecutionBundle { registers: State { pc: M31(5), fp: M31(21) }, clock: M31(15), instruction: InstructionAccess { prev_clock: M31(0), value: (6 + 0i) + (0 + 3i)u }, operands: [None, None, Some(DataAccess { address: M31(24), prev_clock: M31(13), prev_value: M31(0), value: M31(0), multiplicity: M31(2) })] }], JnzFpImm: [ExecutionBundle { registers: State { pc: M31(4), fp: M31(21) }, clock: M31(5), instruction: InstructionAccess { prev_clock: M31(0), value: (31 + 3i) + (3 + 0i)u }, operands: [Some(DataAccess { address: M31(24), prev_clock: M31(4), prev_value: M31(2147483646), value: M31(2147483646), multiplicity: M31(0) }), None, None] }, ExecutionBundle { registers: State { pc: M31(8), fp: M31(21) }, clock: M31(7), instruction: InstructionAccess { prev_clock: M31(0), value: (31 + 3i) + (2 + 0i)u }, operands: [Some(DataAccess { address: M31(24), prev_clock: M31(6), prev_value: M31(1), value: M31(1), multiplicity: M31(0) }), None, None] }, ExecutionBundle { registers: State { pc: M31(4), fp: M31(21) }, clock: M31(14), instruction: InstructionAccess { prev_clock: M31(0), value: (31 + 3i) + (3 + 0i)u }, operands: [Some(DataAccess { address: M31(24), prev_clock: M31(13), prev_value: M31(0), value: M31(0), multiplicity: M31(0) }), None, None] }, ExecutionBundle { registers: State { pc: M31(8), fp: M31(21) }, clock: M31(17), instruction: InstructionAccess { prev_clock: M31(0), value: (31 + 3i) + (2 + 0i)u }, operands: [Some(DataAccess { address: M31(24), prev_clock: M31(15), prev_value: M31(0), value: M31(0), multiplicity: M31(0) }), None, None] }], StoreDerefFp: [ExecutionBundle { registers: State { pc: M31(10), fp: M31(21) }, clock: M31(8), instruction: InstructionAccess { prev_clock: M31(0), value: (4 + 0i) + (0 + 4i)u }, operands: [Some(DataAccess { address: M31(21), prev_clock: M31(1), prev_value: M31(0), value: M31(0), multiplicity: M31(0) }), None, Some(DataAccess { address: M31(25), prev_clock: M31(0), prev_value: M31(0), value: M31(0), multiplicity: M31(2) })] }, ExecutionBundle { registers: State { pc: M31(11), fp: M31(21) }, clock: M31(9), instruction: InstructionAccess { prev_clock: M31(0), value: (4 + 1i) + (0 + 0i)u }, operands: [Some(DataAccess { address: M31(22), prev_clock: M31(2), prev_value: M31(1), value: M31(1), multiplicity: M31(0) }), None, Some(DataAccess { address: M31(21), prev_clock: M31(0), prev_value: M31(1), value: M31(1), multiplicity: M31(2) })] }, ExecutionBundle { registers: State { pc: M31(15), fp: M31(21) }, clock: M31(19), instruction: InstructionAccess { prev_clock: M31(0), value: (4 + 0i) + (0 + 2147483644i)u }, operands: [Some(DataAccess { address: M31(21), prev_clock: M31(9), prev_value: M31(1), value: M31(1), multiplicity: M31(0) }), None, Some(DataAccess { address: M31(18), prev_clock: M31(0), prev_value: M31(1), value: M31(1), multiplicity: M31(1) })] }], StoreAddFpFp: [ExecutionBundle { registers: State { pc: M31(12), fp: M31(21) }, clock: M31(10), instruction: InstructionAccess { prev_clock: M31(0), value: (0 + 1i) + (4 + 1i)u }, operands: [Some(DataAccess { address: M31(22), prev_clock: M31(2), prev_value: M31(1), value: M31(1), multiplicity: M31(0) }), Some(DataAccess { address: M31(25), prev_clock: M31(8), prev_value: M31(0), value: M31(0), multiplicity: M31(0) }), Some(DataAccess { address: M31(22), prev_clock: M31(2), prev_value: M31(1), value: M31(1), multiplicity: M31(1) })] }], StoreAddFpImm: [ExecutionBundle { registers: State { pc: M31(13), fp: M31(21) }, clock: M31(11), instruction: InstructionAccess { prev_clock: M31(0), value: (1 + 2i) + (1 + 2i)u }, operands: [Some(DataAccess { address: M31(23), prev_clock: M31(3), prev_value: M31(0), value: M31(0), multiplicity: M31(0) }), None, Some(DataAccess { address: M31(23), prev_clock: M31(0), prev_value: M31(1), value: M31(1), multiplicity: M31(2) })] }]} } }
note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace


failures:
    fibonacci::trace_memory_generator::test_import_fibonacci

test result: FAILED. 0 passed; 1 failed; 0 ignored; 0 measured; 0 filtered out; finished in 0.01s


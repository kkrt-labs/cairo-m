---
source: crates/wasm/tests/wasm_loading_tests.rs
expression: snapshot_content
---
---
source: crates/wasm/tests/wasm_loading_tests.rs
expression: wasm_load_result
---
WASM File: fib.wasm
============================================================
Success: true
Functions loaded: 1
============================================================
Module Output:
fib:
  Node { operation: Inputs, inputs: [], output_types: [I32] }
  Node { operation: BrIf(BreakTarget { depth: 0, kind: Label(0) }), inputs: [ValueOrigin { node: 0, output_idx: 0 }], output_types: [] }
  Node { operation: WASMOp(I32Const { value: 0 }), inputs: [], output_types: [I32] }
  Node { operation: Br(BreakTarget { depth: 0, kind: FunctionOrLoop }), inputs: [ValueOrigin { node: 2, output_idx: 0 }], output_types: [] }
  Node { operation: Label { id: 0 }, inputs: [], output_types: [] }
  Node { operation: WASMOp(I32Const { value: 7 }), inputs: [], output_types: [I32] }
  Node { operation: WASMOp(I32And), inputs: [ValueOrigin { node: 0, output_idx: 0 }, ValueOrigin { node: 5, output_idx: 0 }], output_types: [I32] }
  Node { operation: WASMOp(I32Const { value: 0 }), inputs: [], output_types: [I32] }
  Node { operation: WASMOp(I32Const { value: 8 }), inputs: [], output_types: [I32] }
  Node { operation: WASMOp(I32GeU), inputs: [ValueOrigin { node: 0, output_idx: 0 }, ValueOrigin { node: 8, output_idx: 0 }], output_types: [I32] }
  Node { operation: BrIf(BreakTarget { depth: 0, kind: Label(2) }), inputs: [ValueOrigin { node: 9, output_idx: 0 }], output_types: [] }
  Node { operation: WASMOp(I32Const { value: 1 }), inputs: [], output_types: [I32] }
  Node { operation: Br(BreakTarget { depth: 0, kind: Label(1) }), inputs: [ValueOrigin { node: 11, output_idx: 0 }, ValueOrigin { node: 7, output_idx: 0 }], output_types: [] }
  Node { operation: Label { id: 2 }, inputs: [], output_types: [] }
  Node { operation: WASMOp(I32Const { value: -8 }), inputs: [], output_types: [I32] }
  Node { operation: WASMOp(I32And), inputs: [ValueOrigin { node: 0, output_idx: 0 }, ValueOrigin { node: 14, output_idx: 0 }], output_types: [I32] }
  Node { operation: WASMOp(I32Const { value: 1 }), inputs: [], output_types: [I32] }
  Node { operation: Loop { sub_dag: BlocklessDag { nodes: [Node { operation: Inputs, inputs: [], output_types: [I32, I32, I32] }, Node { operation: WASMOp(I32Add), inputs: [ValueOrigin { node: 0, output_idx: 0 }, ValueOrigin { node: 0, output_idx: 1 }], output_types: [I32] }, Node { operation: WASMOp(I32Add), inputs: [ValueOrigin { node: 1, output_idx: 0 }, ValueOrigin { node: 0, output_idx: 0 }], output_types: [I32] }, Node { operation: WASMOp(I32Add), inputs: [ValueOrigin { node: 2, output_idx: 0 }, ValueOrigin { node: 1, output_idx: 0 }], output_types: [I32] }, Node { operation: WASMOp(I32Add), inputs: [ValueOrigin { node: 3, output_idx: 0 }, ValueOrigin { node: 2, output_idx: 0 }], output_types: [I32] }, Node { operation: WASMOp(I32Add), inputs: [ValueOrigin { node: 4, output_idx: 0 }, ValueOrigin { node: 3, output_idx: 0 }], output_types: [I32] }, Node { operation: WASMOp(I32Add), inputs: [ValueOrigin { node: 5, output_idx: 0 }, ValueOrigin { node: 4, output_idx: 0 }], output_types: [I32] }, Node { operation: WASMOp(I32Add), inputs: [ValueOrigin { node: 6, output_idx: 0 }, ValueOrigin { node: 5, output_idx: 0 }], output_types: [I32] }, Node { operation: WASMOp(I32Add), inputs: [ValueOrigin { node: 7, output_idx: 0 }, ValueOrigin { node: 6, output_idx: 0 }], output_types: [I32] }, Node { operation: WASMOp(I32Const { value: -8 }), inputs: [], output_types: [I32] }, Node { operation: WASMOp(I32Add), inputs: [ValueOrigin { node: 0, output_idx: 2 }, ValueOrigin { node: 9, output_idx: 0 }], output_types: [I32] }, Node { operation: BrIf(BreakTarget { depth: 0, kind: FunctionOrLoop }), inputs: [ValueOrigin { node: 8, output_idx: 0 }, ValueOrigin { node: 7, output_idx: 0 }, ValueOrigin { node: 10, output_idx: 0 }, ValueOrigin { node: 10, output_idx: 0 }], output_types: [] }, Node { operation: Br(BreakTarget { depth: 1, kind: Label(3) }), inputs: [ValueOrigin { node: 8, output_idx: 0 }, ValueOrigin { node: 7, output_idx: 0 }], output_types: [] }] }, break_targets: [(0, [Label(3)])] }, inputs: [ValueOrigin { node: 16, output_idx: 0 }, ValueOrigin { node: 7, output_idx: 0 }, ValueOrigin { node: 15, output_idx: 0 }], output_types: [] }
  Node { operation: Label { id: 3 }, inputs: [], output_types: [I32, I32] }
  Node { operation: Br(BreakTarget { depth: 0, kind: Label(1) }), inputs: [ValueOrigin { node: 18, output_idx: 0 }, ValueOrigin { node: 18, output_idx: 1 }], output_types: [] }
  Node { operation: Label { id: 1 }, inputs: [], output_types: [I32, I32] }
  Node { operation: WASMOp(I32Eqz), inputs: [ValueOrigin { node: 6, output_idx: 0 }], output_types: [I32] }
  Node { operation: BrIf(BreakTarget { depth: 0, kind: Label(4) }), inputs: [ValueOrigin { node: 20, output_idx: 1 }, ValueOrigin { node: 21, output_idx: 0 }], output_types: [] }
  Node { operation: Loop { sub_dag: BlocklessDag { nodes: [Node { operation: Inputs, inputs: [], output_types: [I32, I32, I32, I32] }, Node { operation: WASMOp(I32Add), inputs: [ValueOrigin { node: 0, output_idx: 0 }, ValueOrigin { node: 0, output_idx: 3 }], output_types: [I32] }, Node { operation: WASMOp(I32Const { value: -1 }), inputs: [], output_types: [I32] }, Node { operation: WASMOp(I32Add), inputs: [ValueOrigin { node: 0, output_idx: 1 }, ValueOrigin { node: 2, output_idx: 0 }], output_types: [I32] }, Node { operation: BrIf(BreakTarget { depth: 0, kind: FunctionOrLoop }), inputs: [ValueOrigin { node: 1, output_idx: 0 }, ValueOrigin { node: 3, output_idx: 0 }, ValueOrigin { node: 0, output_idx: 0 }, ValueOrigin { node: 0, output_idx: 0 }, ValueOrigin { node: 3, output_idx: 0 }], output_types: [] }, Node { operation: Br(BreakTarget { depth: 1, kind: Label(5) }), inputs: [ValueOrigin { node: 0, output_idx: 0 }], output_types: [] }] }, break_targets: [(0, [Label(5)])] }, inputs: [ValueOrigin { node: 20, output_idx: 0 }, ValueOrigin { node: 6, output_idx: 0 }, ValueOrigin { node: 20, output_idx: 1 }, ValueOrigin { node: 20, output_idx: 1 }], output_types: [] }
  Node { operation: Label { id: 5 }, inputs: [], output_types: [I32] }
  Node { operation: Br(BreakTarget { depth: 0, kind: Label(4) }), inputs: [ValueOrigin { node: 24, output_idx: 0 }], output_types: [] }
  Node { operation: Label { id: 4 }, inputs: [], output_types: [I32] }
  Node { operation: Br(BreakTarget { depth: 0, kind: FunctionOrLoop }), inputs: [ValueOrigin { node: 26, output_idx: 0 }], output_types: [] }

---
source: crates/wasm/tests/wasm_to_mir_tests.rs
expression: snapshot_content
---
---
source: crates/wasm/tests/wasm_to_mir_tests.rs
expression: wasm_load_result
---
WASM File: load_store.wasm
============================================================
Success: true
Functions loaded: 2
============================================================
Module Output:
module {
  // Function 0
  fn add {
    parameters: [0, 1]
    entry: 0

    0:
      %2 = 0 (u32)
      %3 = %2 / 2
      %4 = cast %3 from u32 to felt
      %5 = 1073741823 - %4
      store %5, 2147483646, %0
      %6 = 4 (u32)
      %7 = %6 / 2
      %8 = cast %7 from u32 to felt
      %9 = 1073741823 - %8
      store %9, 2147483646, %1
      %10 = %2 / 2
      %11 = cast %10 from u32 to felt
      %12 = 1073741823 - %11
      %13 = load %12, 2147483646
      %14 = %6 / 2
      %15 = cast %14 from u32 to felt
      %16 = 1073741823 - %15
      %17 = load %16, 2147483646
      %18 = %13 U32Add %17
      jump 1

    1:
      return %18

  }

  // Function 1
  fn load_store_sum {
    parameters: [0]
    entry: 0

    0:
      %2 = 1 (u32)
      %3 = 0 (u32)
      jump 3

    1:
      jump 6

    2:
      %1 = φ u32 { [%8]: %23 }
      jump 9

    3:
      %4 = φ u32 { [%0]: %0, [%4]: %4 }
      %5 = φ u32 { [%0]: %2, [%4]: %13 }
      %6 = φ u32 { [%0]: %3, [%4]: %11 }
      jump 4

    4:
      %7 = %6 / 2
      %8 = cast %7 from u32 to felt
      %9 = 1073741823 - %8
      store %9, 2147483646, %5
      %10 = 4 (u32)
      %11 = %6 U32Add %10
      %12 = 1 (u32)
      %13 = %5 U32Add %12
      %14 = %13 U32LessEqual %4
      if %14 then jump 3 else jump 5

    5:
      jump 1

    6:
      %15 = φ u32 { [%1]: %0, [%7]: %15 }
      %16 = φ u32 { [%1]: %2, [%7]: %27 }
      %17 = φ u32 { [%1]: %3, [%7]: %23 }
      %18 = φ u32 { [%1]: %3, [%7]: %25 }
      jump 7

    7:
      %19 = %18 / 2
      %20 = cast %19 from u32 to felt
      %21 = 1073741823 - %20
      %22 = load %21, 2147483646
      %23 = %17 U32Add %22
      %24 = 4 (u32)
      %25 = %18 U32Add %24
      %26 = 1 (u32)
      %27 = %16 U32Add %26
      %28 = %27 U32LessEqual %15
      if %28 then jump 6 else jump 8

    8:
      jump 2

    9:
      return %1

  }

}

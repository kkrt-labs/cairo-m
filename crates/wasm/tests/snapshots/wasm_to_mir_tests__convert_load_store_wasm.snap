---
source: crates/wasm/tests/wasm_to_mir_tests.rs
description: "WASM to MIR snapshot: load_store.wat"
---
WASM File: load_store.wat

Program:
add:
   0: 23 0 0 0             // u32([fp + 0], [fp + 1]) = u32(0)
   1: 22 0 2 0 2 4         // u32([fp + 2], [fp + 3]); u32([fp + 4], [fp + 5]) = u32([fp + 0], [fp + 1]) / u32(2, 0)
   2: 9 268435454 8 _      // [fp + 8] = 268435454
   3: 1 8 2 6              // [fp + 6] = [fp + 8] op [fp + 2]
   4: 44 6 0 2147483639    // [[fp + 6] + 0] = [fp + -8] (u32 lo)
   5: 44 6 1 2147483640    // [[fp + 6] + 1] = [fp + -7] (u32 hi)
   6: 23 4 0 9             // u32([fp + 9], [fp + 10]) = u32(4)
   7: 22 9 2 0 11 13       // u32([fp + 11], [fp + 12]); u32([fp + 13], [fp + 14]) = u32([fp + 9], [fp + 10]) / u32(2, 0)
   8: 9 268435454 17 _     // [fp + 17] = 268435454
   9: 1 17 11 15           // [fp + 15] = [fp + 17] op [fp + 11]
  10: 44 15 0 2147483641   // [[fp + 15] + 0] = [fp + -6] (u32 lo)
  11: 44 15 1 2147483642   // [[fp + 15] + 1] = [fp + -5] (u32 hi)
  12: 22 0 2 0 18 20       // u32([fp + 18], [fp + 19]); u32([fp + 20], [fp + 21]) = u32([fp + 0], [fp + 1]) / u32(2, 0)
  13: 9 268435454 24 _     // [fp + 24] = 268435454
  14: 1 24 18 22           // [fp + 22] = [fp + 24] op [fp + 18]
  15: 8 22 0 25            // [fp + 25] = [[fp + 22] + 0] (u32 lo)
  16: 8 22 1 26            // [fp + 26] = [[fp + 22] + 1] (u32 hi)
  17: 22 9 2 0 27 29       // u32([fp + 27], [fp + 28]); u32([fp + 29], [fp + 30]) = u32([fp + 9], [fp + 10]) / u32(2, 0)
  18: 9 268435454 33 _     // [fp + 33] = 268435454
  19: 1 33 27 31           // [fp + 31] = [fp + 33] op [fp + 27]
  20: 8 31 0 34            // [fp + 34] = [[fp + 31] + 0] (u32 lo)
  21: 8 31 1 35            // [fp + 35] = [[fp + 31] + 1] (u32 hi)
  22: 15 25 34 36          // u32([fp + 36], [fp + 37]) = u32([fp + 25], [fp + 26]) U32Add u32([fp + 34], [fp + 35])
  23: 4 36 0 2147483643    // Return value 0 slot 0: [fp -4] = [fp + 36] + 0
  24: 4 37 0 2147483644    // Return value 0 slot 1: [fp -3] = [fp + 37] + 0
  25: 11 _ _ _             // return
  26: 23 1 0 2             // u32([fp + 2], [fp + 3]) = u32(1)
  27: 23 0 0 4             // u32([fp + 4], [fp + 5]) = u32(0)
  28: 19 2147483641 0 0 6  // u32([fp + 6], [fp + 7]) = u32([fp + -6], [fp + -5]) + u32(0, 0)
  29: 19 2 0 0 8           // u32([fp + 8], [fp + 9]) = u32([fp + 2], [fp + 3]) + u32(0, 0)
load_store_sum:
  30: 19 4 0 0 10          // u32([fp + 10], [fp + 11]) = u32([fp + 4], [fp + 5]) + u32(0, 0)
.loop_header_2:
  31: 22 10 2 0 12 14      // u32([fp + 12], [fp + 13]); u32([fp + 14], [fp + 15]) = u32([fp + 10], [fp + 11]) / u32(2, 0)
  32: 9 268435454 18 _     // [fp + 18] = 268435454
  33: 1 18 12 16           // [fp + 16] = [fp + 18] op [fp + 12]
  34: 44 16 0 8            // [[fp + 16] + 0] = [fp + 8] (u32 lo)
  35: 44 16 1 9            // [[fp + 16] + 1] = [fp + 9] (u32 hi)
  36: 23 4 0 19            // u32([fp + 19], [fp + 20]) = u32(4)
  37: 15 10 19 21          // u32([fp + 21], [fp + 22]) = u32([fp + 10], [fp + 11]) U32Add u32([fp + 19], [fp + 20])
  38: 23 1 0 23            // u32([fp + 23], [fp + 24]) = u32(1)
  39: 15 8 23 25           // u32([fp + 25], [fp + 26]) = u32([fp + 8], [fp + 9]) U32Add u32([fp + 23], [fp + 24])
  40: 28 6 25 27           // [fp + 27] = u32([fp + 6], [fp + 7]) U32Less u32([fp + 25], [fp + 26])
  41: 9 1 31 _             // [fp + 31] = 1
  42: 1 31 27 29           // [fp + 29] = [fp + 31] op [fp + 27]
  43: 14 29 2 _            // if [fp + 29] != 0 jmp rel .br_taken_3
  44: 13 8 _ _             // jump rel .br_fallthrough_4
.br_taken_3:
  45: 19 6 0 0 6           // u32([fp + 6], [fp + 7]) = u32([fp + 6], [fp + 7]) + u32(0, 0)
  46: 19 25 0 0 8          // u32([fp + 8], [fp + 9]) = u32([fp + 25], [fp + 26]) + u32(0, 0)
  47: 19 21 0 0 10         // u32([fp + 10], [fp + 11]) = u32([fp + 21], [fp + 22]) + u32(0, 0)
  48: 13 2147483626 _ _    // jump rel .loop_header_2
.br_fallthrough_4:
  49: 13 1 _ _             // jump rel .L_0
.L_0:
  50: 19 2147483641 0 0 32 // u32([fp + 32], [fp + 33]) = u32([fp + -6], [fp + -5]) + u32(0, 0)
  51: 19 2 0 0 34          // u32([fp + 34], [fp + 35]) = u32([fp + 2], [fp + 3]) + u32(0, 0)
  52: 19 4 0 0 36          // u32([fp + 36], [fp + 37]) = u32([fp + 4], [fp + 5]) + u32(0, 0)
  53: 19 4 0 0 38          // u32([fp + 38], [fp + 39]) = u32([fp + 4], [fp + 5]) + u32(0, 0)
.loop_header_5:
  54: 22 38 2 0 40 42      // u32([fp + 40], [fp + 41]); u32([fp + 42], [fp + 43]) = u32([fp + 38], [fp + 39]) / u32(2, 0)
  55: 9 268435454 46 _     // [fp + 46] = 268435454
  56: 1 46 40 44           // [fp + 44] = [fp + 46] op [fp + 40]
  57: 8 44 0 47            // [fp + 47] = [[fp + 44] + 0] (u32 lo)
  58: 8 44 1 48            // [fp + 48] = [[fp + 44] + 1] (u32 hi)
  59: 15 36 47 49          // u32([fp + 49], [fp + 50]) = u32([fp + 36], [fp + 37]) U32Add u32([fp + 47], [fp + 48])
  60: 23 4 0 51            // u32([fp + 51], [fp + 52]) = u32(4)
  61: 15 38 51 53          // u32([fp + 53], [fp + 54]) = u32([fp + 38], [fp + 39]) U32Add u32([fp + 51], [fp + 52])
  62: 23 1 0 55            // u32([fp + 55], [fp + 56]) = u32(1)
  63: 15 34 55 57          // u32([fp + 57], [fp + 58]) = u32([fp + 34], [fp + 35]) U32Add u32([fp + 55], [fp + 56])
  64: 28 32 57 59          // [fp + 59] = u32([fp + 32], [fp + 33]) U32Less u32([fp + 57], [fp + 58])
  65: 9 1 63 _             // [fp + 63] = 1
  66: 1 63 59 61           // [fp + 61] = [fp + 63] op [fp + 59]
  67: 14 61 2 _            // if [fp + 61] != 0 jmp rel .br_taken_6
  68: 13 10 _ _            // jump rel .br_fallthrough_7
.br_taken_6:
  69: 19 32 0 0 32         // u32([fp + 32], [fp + 33]) = u32([fp + 32], [fp + 33]) + u32(0, 0)
  70: 19 57 0 0 34         // u32([fp + 34], [fp + 35]) = u32([fp + 57], [fp + 58]) + u32(0, 0)
  71: 19 49 0 0 36         // u32([fp + 36], [fp + 37]) = u32([fp + 49], [fp + 50]) + u32(0, 0)
  72: 19 53 0 0 38         // u32([fp + 38], [fp + 39]) = u32([fp + 53], [fp + 54]) + u32(0, 0)
  73: 13 2147483623 _ _    // jump rel .loop_header_5
.br_fallthrough_7:
  74: 19 49 0 0 0          // u32([fp + 0], [fp + 1]) = u32([fp + 49], [fp + 50]) + u32(0, 0)
  75: 13 1 _ _             // jump rel .L_1
.L_1:
  76: 4 0 0 2147483643     // Return value 0 slot 0: [fp -4] = [fp + 0] + 0
  77: 4 1 0 2147483644     // Return value 0 slot 1: [fp -3] = [fp + 1] + 0
  78: 11 _ _ _             // return
  79: 23 0 0 0             // u32([fp + 0], [fp + 1]) = u32(0)
  80: 23 65000 0 2         // u32([fp + 2], [fp + 3]) = u32(65000)
  81: 22 0 2 0 4 6         // u32([fp + 4], [fp + 5]); u32([fp + 6], [fp + 7]) = u32([fp + 0], [fp + 1]) / u32(2, 0)
  82: 9 268435454 10 _     // [fp + 10] = 268435454
  83: 1 10 4 8             // [fp + 8] = [fp + 10] op [fp + 4]
  84: 44 8 0 2             // [[fp + 8] + 0] = [fp + 2] (u32 lo)
  85: 44 8 1 3             // [[fp + 8] + 1] = [fp + 3] (u32 hi)
  86: 23 464 1 11          // u32([fp + 11], [fp + 12]) = u32(66000)
  87: 22 0 2 0 13 15       // u32([fp + 13], [fp + 14]); u32([fp + 15], [fp + 16]) = u32([fp + 0], [fp + 1]) / u32(2, 0)
  88: 9 268435452 19 _     // [fp + 19] = 268435452
  89: 1 19 13 17           // [fp + 17] = [fp + 19] op [fp + 13]
  90: 44 17 0 11           // [[fp + 17] + 0] = [fp + 11] (u32 lo)
  91: 44 17 1 12           // [[fp + 17] + 1] = [fp + 12] (u32 hi)
  92: 23 1464 1 20         // u32([fp + 20], [fp + 21]) = u32(67000)
  93: 22 0 2 0 22 24       // u32([fp + 22], [fp + 23]); u32([fp + 24], [fp + 25]) = u32([fp + 0], [fp + 1]) / u32(2, 0)
  94: 9 268435450 28 _     // [fp + 28] = 268435450
  95: 1 28 22 26           // [fp + 26] = [fp + 28] op [fp + 22]
  96: 44 26 0 20           // [[fp + 26] + 0] = [fp + 20] (u32 lo)
  97: 44 26 1 21           // [[fp + 26] + 1] = [fp + 21] (u32 hi)
  98: 22 0 2 0 29 31       // u32([fp + 29], [fp + 30]); u32([fp + 31], [fp + 32]) = u32([fp + 0], [fp + 1]) / u32(2, 0)
  99: 9 268435454 35 _     // [fp + 35] = 268435454
load_store_sum_3_with_offsets:
 100: 1 35 29 33           // [fp + 33] = [fp + 35] op [fp + 29]
 101: 8 33 0 36            // [fp + 36] = [[fp + 33] + 0] (u32 lo)
 102: 8 33 1 37            // [fp + 37] = [[fp + 33] + 1] (u32 hi)
 103: 22 0 2 0 38 40       // u32([fp + 38], [fp + 39]); u32([fp + 40], [fp + 41]) = u32([fp + 0], [fp + 1]) / u32(2, 0)
 104: 9 268435452 44 _     // [fp + 44] = 268435452
 105: 1 44 38 42           // [fp + 42] = [fp + 44] op [fp + 38]
 106: 8 42 0 45            // [fp + 45] = [[fp + 42] + 0] (u32 lo)
 107: 8 42 1 46            // [fp + 46] = [[fp + 42] + 1] (u32 hi)
 108: 22 0 2 0 47 49       // u32([fp + 47], [fp + 48]); u32([fp + 49], [fp + 50]) = u32([fp + 0], [fp + 1]) / u32(2, 0)
 109: 9 268435450 53 _     // [fp + 53] = 268435450
 110: 1 53 47 51           // [fp + 51] = [fp + 53] op [fp + 47]
 111: 8 51 0 54            // [fp + 54] = [[fp + 51] + 0] (u32 lo)
 112: 8 51 1 55            // [fp + 55] = [[fp + 51] + 1] (u32 hi)
 113: 15 45 54 56          // u32([fp + 56], [fp + 57]) = u32([fp + 45], [fp + 46]) U32Add u32([fp + 54], [fp + 55])
 114: 15 36 56 58          // u32([fp + 58], [fp + 59]) = u32([fp + 36], [fp + 37]) U32Add u32([fp + 56], [fp + 57])
 115: 4 58 0 2147483643    // Return value 0 slot 0: [fp -4] = [fp + 58] + 0
 116: 4 59 0 2147483644    // Return value 0 slot 1: [fp -3] = [fp + 59] + 0
 117: 11 _ _ _             // return

---
source: crates/compiler/codegen/tests/mdtest_snapshots.rs
description: "Codegen snapshot for mdtest: Multiple Functions in Cairo-M - Complex Call Patterns"
input_file: mdtest/04-advanced/02-multiple-functions.md
---
Source:
fn test_complex_calls() -> u32 {
    let base = get_base_value();
    let multiplier = calculate_multiplier(base);
    return apply_transformation(base, multiplier);
}

fn get_base_value() -> u32 {
    return 15u32;
}

fn calculate_multiplier(base: u32) -> u32 {
    if base > 10u32 {
        return process_large(base);
    } else {
        return process_small(base);
    }
}

fn process_large(value: u32) -> u32 {
    return value / 3u32;
}

fn process_small(value: u32) -> u32 {
    return value * 2u32;
}

fn apply_transformation(base: u32, multiplier: u32) -> u32 {
    let intermediate = base + multiplier;
    return finalize_result(intermediate);
}

fn finalize_result(value: u32) -> u32 {
    return value * value;
}
============================================================
Generated CASM:
test_complex_calls:
test_complex_calls:
test_complex_calls_0:
   0: 10 8 6 _             // call get_base_value
   1: 10 10 8 _            // call calculate_multiplier
   2: 10 12 34 _           // call apply_transformation
   3: 4 10 0 2147483643    // Return value 0 slot 0: [fp -4] = [fp + 10] + 0
   4: 4 11 0 2147483644    // Return value 0 slot 1: [fp -3] = [fp + 11] + 0
   5: 11 _ _ _             // return
get_base_value:
get_base_value:
get_base_value_0:
   6: 23 15 0 2147483643   // Return value 0: [fp -4, fp -4 + 1] = u32(15)
   7: 11 _ _ _             // return
calculate_multiplier:
calculate_multiplier:
calculate_multiplier_0:
   8: 23 10 0 5            // [fp + 5], [fp + 6] = u32(10)
   9: 28 5 2147483641 0    // [fp + 0] = u32([fp + 5], [fp + 6]) U32Less u32([fp + -6], [fp + -5])
  10: 14 0 2 _             // if [fp + 0] != 0 jmp rel calculate_multiplier_1
  11: 12 18 _ _            // jump abs calculate_multiplier_2
calculate_multiplier_1:
  12: 4 2147483641 0 7     // Arg 0 slot 0: [fp + 7] = [fp + -6] + 0
  13: 4 2147483642 0 8     // Arg 0 slot 1: [fp + 8] = [fp + -5] + 0
  14: 10 11 24 _           // call process_large
  15: 4 9 0 2147483643     // Return value 0 slot 0: [fp -4] = [fp + 9] + 0
  16: 4 10 0 2147483644    // Return value 0 slot 1: [fp -3] = [fp + 10] + 0
  17: 11 _ _ _             // return
calculate_multiplier_2:
  18: 4 2147483641 0 13    // Arg 0 slot 0: [fp + 13] = [fp + -6] + 0
  19: 4 2147483642 0 14    // Arg 0 slot 1: [fp + 14] = [fp + -5] + 0
  20: 10 17 29 _           // call process_small
  21: 4 15 0 2147483643    // Return value 0 slot 0: [fp -4] = [fp + 15] + 0
  22: 4 16 0 2147483644    // Return value 0 slot 1: [fp -3] = [fp + 16] + 0
  23: 11 _ _ _             // return
process_large:
process_large:
process_large_0:
  24: 22 2147483641 3 0 0  // u32([fp + 0], [fp + 1]) = u32([fp + -6], [fp + -5]) U32Div u32(3, 0) /* imm = 0x00000003 */
  25: 4 0 0 2147483643     // Return value 0 slot 0: [fp -4] = [fp + 0] + 0
  26: 4 1 0 2147483644     // Return value 0 slot 1: [fp -3] = [fp + 1] + 0
  27: 11 _ _ _             // return
process_small:
process_small_0:
  28: 21 2147483641 2 0 0  // u32([fp + 0], [fp + 1]) = u32([fp + -6], [fp + -5]) U32Mul u32(2, 0) /* imm = 0x00000002 */
process_small:
  29: 4 0 0 2147483643     // Return value 0 slot 0: [fp -4] = [fp + 0] + 0
  30: 4 1 0 2147483644     // Return value 0 slot 1: [fp -3] = [fp + 1] + 0
  31: 11 _ _ _             // return
apply_transformation:
apply_transformation_0:
  32: 15 2147483639 2147483641 4 // u32([fp + 4], [fp + 5]) = u32([fp + -8], [fp + -7]) U32Add u32([fp + -6], [fp + -5])
  33: 10 8 39 _            // call finalize_result
apply_transformation:
  34: 4 6 0 2147483643     // Return value 0 slot 0: [fp -4] = [fp + 6] + 0
  35: 4 7 0 2147483644     // Return value 0 slot 1: [fp -3] = [fp + 7] + 0
  36: 11 _ _ _             // return
finalize_result:
finalize_result_0:
  37: 19 2147483641 0 0 2  // u32([fp + 2], [fp + 3]) = u32([fp + 2147483641], [fp + 2147483642]) + u32(0, 0)
  38: 17 2 2147483641 0    // u32([fp + 0], [fp + 1]) = u32([fp + 2], [fp + 3]) U32Mul u32([fp + 2147483641], [fp + 2147483642])
finalize_result:
  39: 4 0 0 2147483643     // Return value 0 slot 0: [fp -4] = [fp + 0] + 0
  40: 4 1 0 2147483644     // Return value 0 slot 1: [fp -3] = [fp + 1] + 0
  41: 11 _ _ _             // return

---
source: crates/compiler/codegen/tests/mdtest_snapshots.rs
description: "Codegen snapshot for mdtest: Arrays in Cairo-M - Arrays with Aggregate Types"
input_file: mdtest/01-basics/05-arrays.md
---
Source:
const POINTS: [(u32, u32); 3] = [(1, 2), (3, 4), (5, 6)];

fn test_main() -> u32 {
    return POINTS[0].0 + POINTS[1].1 + POINTS[2].0;
}
============================================================
Generated CASM:
test_main:
test_main:
test_main_0:
   0: 23 1 0 0             // [fp + 0], [fp + 1] = u32(1)
   1: 23 2 0 2             // [fp + 2], [fp + 3] = u32(2)
   2: 23 3 0 4             // [fp + 4], [fp + 5] = u32(3)
   3: 23 4 0 6             // [fp + 6], [fp + 7] = u32(4)
   4: 23 5 0 8             // [fp + 8], [fp + 9] = u32(5)
   5: 23 6 0 10            // [fp + 10], [fp + 11] = u32(6)
   6: 4 0 0 61             // [fp + 61] = [fp + 0] + 0
   7: 4 1 0 62             // [fp + 62] = [fp + 1] + 0
   8: 4 2 0 63             // [fp + 63] = [fp + 2] + 0
   9: 4 3 0 64             // [fp + 64] = [fp + 3] + 0
  10: 4 4 0 65             // [fp + 65] = [fp + 4] + 0
  11: 4 5 0 66             // [fp + 66] = [fp + 5] + 0
  12: 4 6 0 67             // [fp + 67] = [fp + 6] + 0
  13: 4 7 0 68             // [fp + 68] = [fp + 7] + 0
  14: 4 8 0 69             // [fp + 69] = [fp + 8] + 0
  15: 4 9 0 70             // [fp + 70] = [fp + 9] + 0
  16: 4 10 0 71            // [fp + 71] = [fp + 10] + 0
  17: 4 11 0 72            // [fp + 72] = [fp + 11] + 0
  18: 43 61 12 _           // [fp + 12] = fp + 61
  19: 8 12 0 13            // [fp + 13] = [[fp + 12] + 0] (load slot 0)
  20: 8 12 1 14            // [fp + 14] = [[fp + 12] + 1] (load slot 1)
  21: 8 12 2 15            // [fp + 15] = [[fp + 12] + 2] (load slot 2)
  22: 8 12 3 16            // [fp + 16] = [[fp + 12] + 3] (load slot 3)
  23: 8 12 0 17            // [fp + 17] = [[fp + 12] + 0] (load slot 0)
  24: 8 12 1 18            // [fp + 18] = [[fp + 12] + 1] (load slot 1)
  25: 23 1 0 19            // [fp + 19], [fp + 20] = u32(1)
  26: 23 2 0 21            // [fp + 21], [fp + 22] = u32(2)
  27: 23 3 0 23            // [fp + 23], [fp + 24] = u32(3)
  28: 23 4 0 25            // [fp + 25], [fp + 26] = u32(4)
  29: 23 5 0 27            // [fp + 27], [fp + 28] = u32(5)
  30: 23 6 0 29            // [fp + 29], [fp + 30] = u32(6)
  31: 4 19 0 73            // [fp + 73] = [fp + 19] + 0
  32: 4 20 0 74            // [fp + 74] = [fp + 20] + 0
  33: 4 21 0 75            // [fp + 75] = [fp + 21] + 0
  34: 4 22 0 76            // [fp + 76] = [fp + 22] + 0
  35: 4 23 0 77            // [fp + 77] = [fp + 23] + 0
  36: 4 24 0 78            // [fp + 78] = [fp + 24] + 0
  37: 4 25 0 79            // [fp + 79] = [fp + 25] + 0
  38: 4 26 0 80            // [fp + 80] = [fp + 26] + 0
  39: 4 27 0 81            // [fp + 81] = [fp + 27] + 0
  40: 4 28 0 82            // [fp + 82] = [fp + 28] + 0
  41: 4 29 0 83            // [fp + 83] = [fp + 29] + 0
  42: 4 30 0 84            // [fp + 84] = [fp + 30] + 0
  43: 43 73 31 _           // [fp + 31] = fp + 73
  44: 8 31 4 32            // [fp + 32] = [[fp + 31] + 4] (load slot 0)
  45: 8 31 5 33            // [fp + 33] = [[fp + 31] + 5] (load slot 1)
  46: 8 31 6 34            // [fp + 34] = [[fp + 31] + 6] (load slot 2)
  47: 8 31 7 35            // [fp + 35] = [[fp + 31] + 7] (load slot 3)
  48: 8 31 6 36            // [fp + 36] = [[fp + 31] + 6] (load slot 0)
  49: 8 31 7 37            // [fp + 37] = [[fp + 31] + 7] (load slot 1)
  50: 15 17 36 38          // u32([fp + 38], [fp + 39]) = u32([fp + 17], [fp + 18]) U32Add u32([fp + 36], [fp + 37])
  51: 23 1 0 40            // [fp + 40], [fp + 41] = u32(1)
  52: 23 2 0 42            // [fp + 42], [fp + 43] = u32(2)
  53: 23 3 0 44            // [fp + 44], [fp + 45] = u32(3)
  54: 23 4 0 46            // [fp + 46], [fp + 47] = u32(4)
  55: 23 5 0 48            // [fp + 48], [fp + 49] = u32(5)
  56: 23 6 0 50            // [fp + 50], [fp + 51] = u32(6)
  57: 4 40 0 85            // [fp + 85] = [fp + 40] + 0
  58: 4 41 0 86            // [fp + 86] = [fp + 41] + 0
  59: 4 42 0 87            // [fp + 87] = [fp + 42] + 0
  60: 4 43 0 88            // [fp + 88] = [fp + 43] + 0
  61: 4 44 0 89            // [fp + 89] = [fp + 44] + 0
  62: 4 45 0 90            // [fp + 90] = [fp + 45] + 0
  63: 4 46 0 91            // [fp + 91] = [fp + 46] + 0
  64: 4 47 0 92            // [fp + 92] = [fp + 47] + 0
  65: 4 48 0 93            // [fp + 93] = [fp + 48] + 0
  66: 4 49 0 94            // [fp + 94] = [fp + 49] + 0
  67: 4 50 0 95            // [fp + 95] = [fp + 50] + 0
  68: 4 51 0 96            // [fp + 96] = [fp + 51] + 0
  69: 43 85 52 _           // [fp + 52] = fp + 85
  70: 8 52 8 53            // [fp + 53] = [[fp + 52] + 8] (load slot 0)
  71: 8 52 9 54            // [fp + 54] = [[fp + 52] + 9] (load slot 1)
  72: 8 52 10 55           // [fp + 55] = [[fp + 52] + 10] (load slot 2)
  73: 8 52 11 56           // [fp + 56] = [[fp + 52] + 11] (load slot 3)
  74: 8 52 8 57            // [fp + 57] = [[fp + 52] + 8] (load slot 0)
  75: 8 52 9 58            // [fp + 58] = [[fp + 52] + 9] (load slot 1)
  76: 15 38 57 59          // u32([fp + 59], [fp + 60]) = u32([fp + 38], [fp + 39]) U32Add u32([fp + 57], [fp + 58])
  77: 4 59 0 2147483643    // Return value 0 slot 0: [fp -4] = [fp + 59] + 0
  78: 4 60 0 2147483644    // Return value 0 slot 1: [fp -3] = [fp + 60] + 0
  79: 11 _ _ _             // return

---
source: crates/compiler/codegen/tests/mdtest_snapshots.rs
description: "Codegen snapshot for mdtest: Error Handling and Edge Cases in Cairo-M - Memory and Stack Edge Cases"
input_file: mdtest/05-edge-cases/01-error-handling.md
---
Source:
fn deep_recursion(n: u32, depth: u32) -> u32 {
    if (depth > 1000u32) {  // Prevent stack overflow
        return n;
    }

    if (n <= 1u32) {
        return 1;
    }

    return n + deep_recursion(n - 1, depth + 1);
}
============================================================
Generated CASM:
deep_recursion:
deep_recursion:
deep_recursion_0:
   0: 23 1000 0 10         // [fp + 10, fp + 10 + 1] = u32(1000)
   1: 26 -6 10 0           // [fp + 0] = u32([fp + -6], [fp + -6 + 1]) op u32([fp + 10], [fp + 10 + 1])
   2: 14 0 2 _             // if [fp + 0] != 0 jmp rel deep_recursion_1
   3: 12 7 _ _             // jump abs deep_recursion_2
deep_recursion_1:
   4: 4 -8 0 -4            // Return value 0 slot 0: [fp -4] = [fp + -8] + 0
   5: 4 -7 0 -3            // Return value 0 slot 1: [fp -3] = [fp + -7] + 0
   6: 11 _ _ _             // return
deep_recursion_2:
   7: 23 1 0 12            // [fp + 12, fp + 12 + 1] = u32(1)
   8: 29 -8 12 1           // [fp + 1] = u32([fp + -8], [fp + -8 + 1]) op u32([fp + 12], [fp + 12 + 1])
   9: 14 1 2 _             // if [fp + 1] != 0 jmp rel deep_recursion_3
  10: 12 13 _ _            // jump abs deep_recursion_4
deep_recursion_3:
  11: 23 1 0 -4            // Return value 0: [fp -4, fp -4 + 1] = u32(1)
  12: 11 _ _ _             // return
deep_recursion_4:
  13: 20 -8 1 0 2          // u32([fp + 2], [fp + 2 + 1]) = u32([fp + -8], [fp + -8 + 1]) op u32(1, 0)
  14: 19 -6 1 0 16         // u32([fp + 16], [fp + 16 + 1]) = u32([fp + -6], [fp + -6 + 1]) op u32(1, 0)
  15: 4 2 0 17             // Arg 0 slot 0: [fp + 17] = [fp + 2] + 0
  16: 4 3 0 18             // Arg 0 slot 1: [fp + 18] = [fp + 3] + 0
  17: 4 16 0 19            // Arg 1 slot 0: [fp + 19] = [fp + 16] + 0
  18: 4 17 0 20            // Arg 1 slot 1: [fp + 20] = [fp + 17] + 0
  19: 10 23 0 _            // call deep_recursion
  20: 15 -8 21 8           // u32([fp + 8], [fp + 8 + 1]) = u32([fp + -8], [fp + -8 + 1]) op u32([fp + 21], [fp + 21 + 1])
  21: 4 8 0 -4             // Return value 0 slot 0: [fp -4] = [fp + 8] + 0
  22: 4 9 0 -3             // Return value 0 slot 1: [fp -3] = [fp + 9] + 0
  23: 11 _ _ _             // return

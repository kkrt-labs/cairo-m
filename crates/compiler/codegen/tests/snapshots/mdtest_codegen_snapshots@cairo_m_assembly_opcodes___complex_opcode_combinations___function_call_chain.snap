---
source: crates/compiler/codegen/tests/mdtest_snapshots.rs
description: "Codegen snapshot for mdtest: Cairo-M Assembly Opcodes - Complex Opcode Combinations - Function Call Chain"
input_file: mdtest/06-internals/01-opcodes.md
---
Source:
fn test_call_chain() -> felt {
    let a = 10;
    let b = 20;

    let result = add_and_multiply(a, b, 3);
    return result;
}

fn add_and_multiply(x: felt, y: felt, factor: felt) -> felt {
    let sum = x + y;
    let product = sum * factor;

    return compute_final(product, 5);
}

fn compute_final(value: felt, adjustment: felt) -> felt {
    return value + adjustment;
}
============================================================
Generated CASM:
test_call_chain:
test_call_chain:
test_call_chain_0:
   0: 9 10 0 _             // [fp + 0] = 10
   1: 9 20 4 _             // [fp + 4] = 20
   2: 4 0 0 5              // Arg 0 slot 0: [fp + 5] = [fp + 0] + 0
   3: 4 4 0 6              // Arg 1 slot 0: [fp + 6] = [fp + 4] + 0
   4: 9 3 7 _              // Arg 2: [fp + 7] = 3
   5: 10 9 8 _             // call add_and_multiply
   6: 4 8 0 -3             // Return value 0: [fp -3] = [fp + 8] + 0
   7: 11 _ _ _             // return
add_and_multiply:
add_and_multiply:
add_and_multiply_0:
   8: 0 -6 -5 0            // [fp + 0] = [fp + -6] op [fp + -5]
   9: 2 0 -4 3             // [fp + 3] = [fp + 0] op [fp + -4]
  10: 4 3 0 4              // Arg 0 slot 0: [fp + 4] = [fp + 3] + 0
  11: 9 5 5 _              // Arg 1: [fp + 5] = 5
  12: 10 7 15 _            // call compute_final
  13: 4 6 0 -3             // Return value 0: [fp -3] = [fp + 6] + 0
  14: 11 _ _ _             // return
compute_final:
compute_final:
compute_final_0:
  15: 0 -5 -4 -3           // [fp + -3] = [fp + -5] op [fp + -4]
  16: 11 _ _ _             // return

---
source: crates/compiler/codegen/tests/codegen_tests.rs
expression: snapshot_content
---
---
source: crates/compiler/codegen/tests/codegen_tests.rs
expression: codegen_output
---
Fixture: random_instructions.cm
============================================================
Source code:
fn main() -> felt {
    let x = 3;
    let y = 13;
    let even_number = 16;
    let eq = x == y;
    let mut_val = 1;
    let eq_felt = 0;
    if (eq){
        eq_felt = 1;
        mut_val = mut_val + eq_felt + 1;
    }
    mut_val = mut_val * mut_val;
    mut_val = mut_val + (even_number / 2);

    let eq2 = (x == 3);
    let eq2_felt = 0;
    if (eq2){
        eq2_felt = 1;
    }

    let tempvar = 0;
    if (y == 3) {
        tempvar = 1;
    }
    let compound1 = (x != 0) || ((tempvar) + 2 != 0);
    let compound1_felt = 0;
    if (compound1){
        compound1_felt = 1;
    }
    let compound2 = (eq_felt != 2) && (3 != 0);

    let compound2_felt = 0;
    if (compound2){
        compound2_felt = 1;
    }

    for (let i = 0; i != 3; i = i + 1) {
        mut_val = mut_val + i;
    }

    let (a, b) = foo();
    return mut_val + eq2_felt + a + bar() + b + compound1_felt + compound2_felt;
}

fn foo() -> (felt, felt) {
    return (32, 62);
}

fn bar() -> felt {
    return 123;
}

============================================================
Generated CASM:
main:
   0: 9 3 0 _              // [fp + 0] = 3
   3: 9 13 1 _             // [fp + 1] = 13
   6: 9 16 2 _             // [fp + 2] = 16
   9: 1 0 1 3              // [fp + 3] = [fp + 0] op [fp + 1]
  13: 14 3 8 _             // if [fp + 3] != 0, jump to not_zero_0
  16: 9 1 3 _              // [fp + 3] = 1
  19: 12 24 _ _            // jump to end_1
not_zero_0:
  21: 9 0 3 _              // [fp + 3] = 0
end_1:
  24: 9 1 4 _              // [fp + 4] = 1
  27: 9 0 5 _              // [fp + 5] = 0
  30: 14 3 5 _             // if [fp + 3] != 0 jmp rel main_1
  33: 12 50 _ _            // jump abs main_2
main_1:
  35: 9 1 5 _              // Store immediate: [fp + 5] = 1
  38: 0 4 5 6              // [fp + 6] = [fp + 4] op [fp + 5]
  42: 4 6 1 7              // [fp + 7] = [fp + 6] op 1
  46: 4 7 0 4              // Store: [fp + 4] = [fp + 7] + 0
main_2:
  50: 4 4 0 43             // [fp + 43] = [fp + 4] + 0
  54: 4 4 0 44             // [fp + 44] = [fp + 4] + 0
  58: 2 43 44 4            // [fp + 4] = [fp + 43] op [fp + 44]
  62: 7 2 2 9              // [fp + 9] = [fp + 2] op 2
  66: 4 4 0 43             // [fp + 43] = [fp + 4] + 0
  70: 0 43 9 4             // [fp + 4] = [fp + 43] op [fp + 9]
  74: 5 0 3 11             // [fp + 11] = [fp + 0] op 3
  78: 14 11 8 _            // if [fp + 11] != 0, jump to not_zero_2
  81: 9 1 11 _             // [fp + 11] = 1
  84: 12 89 _ _            // jump to end_3
not_zero_2:
  86: 9 0 11 _             // [fp + 11] = 0
end_3:
  89: 9 0 12 _             // [fp + 12] = 0
  92: 14 11 5 _            // if [fp + 11] != 0 jmp rel main_3
  95: 12 100 _ _           // jump abs main_4
main_3:
  97: 9 1 12 _             // Store immediate: [fp + 12] = 1
main_4:
 100: 9 0 13 _             // [fp + 13] = 0
 103: 5 1 3 35             // [fp + 35] = [fp + 1] op 3
 107: 14 35 6 _            // if [fp + 35] != 0 jmp rel main_6
main_5:
 110: 9 1 13 _             // Store immediate: [fp + 13] = 1
main_6:
 113: 5 0 0 14             // [fp + 14] = [fp + 0] op 0
 117: 14 14 8 _            // if [fp + 14] != 0, jump to neq_non_zero_4
 120: 9 0 14 _             // [fp + 14] = 0
 123: 12 128 _ _           // jump to neq_end_5
neq_non_zero_4:
 125: 9 1 14 _             // [fp + 14] = 1
neq_end_5:
 128: 4 13 2 15            // [fp + 15] = [fp + 13] op 2
 132: 5 15 0 16            // [fp + 16] = [fp + 15] op 0
 136: 14 16 8 _            // if [fp + 16] != 0, jump to neq_non_zero_6
 139: 9 0 16 _             // [fp + 16] = 0
 142: 12 147 _ _           // jump to neq_end_7
neq_non_zero_6:
 144: 9 1 16 _             // [fp + 16] = 1
neq_end_7:
 147: 9 0 17 _             // Initialize OR result to 0
 150: 14 14 8 _            // if [fp + 14] != 0, jump to or_true_8
 153: 14 16 5 _            // if [fp + 16] != 0, jump to or_true_8
 156: 12 161 _ _           // jump to or_end_9
or_true_8:
 158: 9 1 17 _             // [fp + 17] = 1
or_end_9:
 161: 9 0 18 _             // [fp + 18] = 0
 164: 14 17 5 _            // if [fp + 17] != 0 jmp rel main_7
 167: 12 172 _ _           // jump abs main_8
main_7:
 169: 9 1 18 _             // Store immediate: [fp + 18] = 1
main_8:
 172: 5 5 2 19             // [fp + 19] = [fp + 5] op 2
 176: 14 19 8 _            // if [fp + 19] != 0, jump to neq_non_zero_10
 179: 9 0 19 _             // [fp + 19] = 0
 182: 12 187 _ _           // jump to neq_end_11
neq_non_zero_10:
 184: 9 1 19 _             // [fp + 19] = 1
neq_end_11:
 187: 9 3 20 _             // [fp + 20] = 3
 190: 14 20 8 _            // if [fp + 20] != 0, jump to neq_non_zero_12
 193: 9 0 20 _             // [fp + 20] = 0
 196: 12 201 _ _           // jump to neq_end_13
neq_non_zero_12:
 198: 9 1 20 _             // [fp + 20] = 1
neq_end_13:
 201: 2 19 20 21           // [fp + 21] = [fp + 19] op [fp + 20]
 205: 14 21 8 _            // if [fp + 21] != 0, jump to and_non_zero_14
 208: 9 0 21 _             // [fp + 21] = 0
 211: 12 216 _ _           // jump to and_end_15
and_non_zero_14:
 213: 9 1 21 _             // [fp + 21] = 1
and_end_15:
 216: 9 0 22 _             // [fp + 22] = 0
 219: 14 21 5 _            // if [fp + 21] != 0 jmp rel main_9
 222: 12 227 _ _           // jump abs main_10
main_9:
 224: 9 1 22 _             // Store immediate: [fp + 22] = 1
main_10:
 227: 9 0 23 _             // [fp + 23] = 0
main_11:
 230: 5 23 3 36            // [fp + 36] = [fp + 23] op 3
 234: 14 36 5 _            // if [fp + 36] != 0 jmp rel main_12
 237: 12 257 _ _           // jump abs main_14
main_12:
 239: 4 4 0 43             // [fp + 43] = [fp + 4] + 0
 243: 0 43 23 4            // [fp + 4] = [fp + 43] op [fp + 23]
main_13:
 247: 4 23 0 43            // [fp + 43] = [fp + 23] + 0
 251: 4 43 1 23            // [fp + 23] = [fp + 43] op 1
 255: 12 230 _ _           // jump abs main_11
main_14:
 257: 10 39 288 _          // call foo
 260: 0 4 12 28            // [fp + 28] = [fp + 4] op [fp + 12]
 264: 0 28 37 29           // [fp + 29] = [fp + 28] op [fp + 37]
 268: 10 42 295 _          // call bar
 271: 0 29 41 31           // [fp + 31] = [fp + 29] op [fp + 41]
 275: 0 31 38 32           // [fp + 32] = [fp + 31] op [fp + 38]
 279: 0 32 18 33           // [fp + 33] = [fp + 32] op [fp + 18]
 283: 0 33 22 -3           // [fp + -3] = [fp + 33] op [fp + 22]
 287: 11 _ _ _             // return
foo:
 288: 9 32 -4 _            // Return value 0: [fp -4] = 32
 291: 9 62 -3 _            // Return value 1: [fp -3] = 62
 294: 11 _ _ _             // return
bar:
 295: 9 123 -3 _           // Return value 0: [fp -3] = 123
 298: 11 _ _ _             // return

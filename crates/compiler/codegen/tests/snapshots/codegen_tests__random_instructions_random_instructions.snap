---
source: crates/compiler/codegen/tests/codegen_tests.rs
expression: snapshot_content
---
---
source: crates/compiler/codegen/tests/codegen_tests.rs
expression: codegen_output
---
Fixture: random_instructions.cm
============================================================
Source code:
func main(){
    let x = 3;
    let y = 13;
    let even_number = 16;
    let eq = x == y;
    let mut_val = 1;
    if (eq) {
        mut_val = mut_val + eq + 1;
    }
    mut_val = mut_val * mut_val;
    mut_val = mut_val + (even_number / 2);

    let eq2 = (x == 3);

    let compound1 = x || (y == 3) + 2;
    let compound2 = eq != 2 && 3;

    let (a, b) = foo();
    return mut_val + eq2 + a + bar() + b + compound1 + compound2;
}

func foo() -> (felt, felt) {
    return (32, 62);
}

func bar() -> felt {
    return 123;
}

============================================================
Generated CASM:
main:
   0: 6 3 _ 0              // Store immediate: [fp + 0] = 3
   1: 6 13 _ 1             // Store immediate: [fp + 1] = 13
   2: 6 16 _ 2             // Store immediate: [fp + 2] = 16
   3: 2 0 1 3              // [fp + 3] = [fp + 0] op [fp + 1]
   4: 15 3 3 _             // if [fp + 3] != 0, jump to not_zero_0
   5: 6 1 _ 3              // [fp + 3] = 1
   6: 13 8 _ _             // jump to end_1
not_zero_0:
   7: 6 0 _ 3              // [fp + 3] = 0
end_1:
   8: 6 1 _ 4              // Store immediate: [fp + 4] = 1
   9: 15 3 2 _             // if [fp + 3] != 0 jmp rel main_1
  10: 13 13 _ _            // jump abs main_2
main_1:
  11: 0 4 3 5              // [fp + 5] = [fp + 4] op [fp + 3]
  12: 1 5 1 4              // [fp + 4] = [fp + 5] op 1
main_2:
  13: 7 4 4 4              // [fp + 4] = [fp + 4] op [fp + 4]
  14: 10 2 2 6             // [fp + 6] = [fp + 2] op 2
  15: 0 4 6 4              // [fp + 4] = [fp + 4] op [fp + 6]
  16: 3 0 3 7              // [fp + 7] = [fp + 0] op 3
  17: 15 7 3 _             // if [fp + 7] != 0, jump to not_zero_2
  18: 6 1 _ 7              // [fp + 7] = 1
  19: 13 21 _ _            // jump to end_3
not_zero_2:
  20: 6 0 _ 7              // [fp + 7] = 0
end_3:
  21: 3 1 3 8              // [fp + 8] = [fp + 1] op 3
  22: 15 8 3 _             // if [fp + 8] != 0, jump to not_zero_4
  23: 6 1 _ 8              // [fp + 8] = 1
  24: 13 26 _ _            // jump to end_5
not_zero_4:
  25: 6 0 _ 8              // [fp + 8] = 0
end_5:
  26: 1 8 2 9              // [fp + 9] = [fp + 8] op 2
  27: 6 0 _ 10             // Initialize OR result to 0
  28: 15 0 3 _             // if [fp + 0] != 0, jump to or_true_6
  29: 15 9 2 _             // if [fp + 9] != 0, jump to or_true_6
  30: 13 32 _ _            // jump to or_end_7
or_true_6:
  31: 6 1 _ 10             // [fp + 10] = 1
or_end_7:
  32: 3 3 2 11             // [fp + 11] = [fp + 3] op 2
  33: 15 11 3 _            // if [fp + 11] != 0, jump to neq_non_zero_8
  34: 6 0 _ 11             // [fp + 11] = 0
  35: 13 37 _ _            // jump to neq_end_9
neq_non_zero_8:
  36: 6 1 _ 11             // [fp + 11] = 1
neq_end_9:
  37: 8 11 3 12            // [fp + 12] = [fp + 11] op 3
  38: 15 12 3 _            // if [fp + 12] != 0, jump to and_non_zero_10
  39: 6 0 _ 12             // [fp + 12] = 0
  40: 13 42 _ _            // jump to and_end_11
and_non_zero_10:
  41: 6 1 _ 12             // [fp + 12] = 1
and_end_11:
  42: 11 15 51 _           // call foo
  43: 0 4 7 17             // [fp + 17] = [fp + 4] op [fp + 7]
  44: 0 17 13 18           // [fp + 18] = [fp + 17] op [fp + 13]
  45: 11 20 54 _           // call bar
  46: 0 18 19 21           // [fp + 21] = [fp + 18] op [fp + 19]
  47: 0 21 14 22           // [fp + 22] = [fp + 21] op [fp + 14]
  48: 0 22 10 23           // [fp + 23] = [fp + 22] op [fp + 10]
  49: 0 23 12 -3           // [fp + -3] = [fp + 23] op [fp + 12]
  50: 12 _ _ _             // return
foo:
  51: 6 32 _ -4            // Return value 0: [fp -4] = 32
  52: 6 62 _ -3            // Return value 1: [fp -3] = 62
  53: 12 _ _ _             // return
bar:
  54: 6 123 _ -3           // Return value 0: [fp -3] = 123
  55: 12 _ _ _             // return

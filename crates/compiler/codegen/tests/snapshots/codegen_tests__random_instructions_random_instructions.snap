---
source: crates/compiler/codegen/tests/codegen_tests.rs
expression: snapshot_content
---
---
source: crates/compiler/codegen/tests/codegen_tests.rs
expression: codegen_output
---
Fixture: random_instructions.cm
============================================================
Source code:
func main(){
    let x = 3;
    let y = 13;
    let even_number = 16;
    let eq = x == y;
    let mut_val = 1;
    if (eq) {
        mut_val = mut_val + eq + 1;
    }
    mut_val = mut_val * mut_val;
    mut_val = mut_val + (even_number / 2);

    let eq2 = (x == 3);

    let compound1 = x || (y == 3) + 2;
    let compound2 = eq != 2 && 3;

    let (a, b) = foo();
    return mut_val + eq2 + a + bar() + b + compound1 + compound2;
}

func foo() -> (felt, felt) {
    return (32, 62);
}

func bar() -> felt {
    return 123;
}

============================================================
Generated CASM:
main:
   0: 6 3 _ 0              // Store immediate: [fp + 0] = 3
   1: 6 13 _ 1             // Store immediate: [fp + 1] = 13
   2: 6 16 _ 2             // Store immediate: [fp + 2] = 16
   3: 2 0 1 3              // [fp + 3] = [fp + 0] op [fp + 1]
   4: 15 3 3 _             // if [fp + 3] != 0, jump to not_zero_0
   5: 6 1 _ 3              // [fp + 3] = 1
   6: 13 8 _ _             // jump to end_1
not_zero_0:
   7: 6 0 _ 3              // [fp + 3] = 0
end_1:
   8: 4 3 _ 4              // Store: [fp + 4] = [fp + 3]
   9: 6 1 _ 5              // Store immediate: [fp + 5] = 1
  10: 15 4 2 _             // if [fp + 4] != 0 jmp rel main_1
  11: 13 15 _ _            // jump abs main_2
main_1:
  12: 0 5 4 6              // [fp + 6] = [fp + 5] op [fp + 4]
  13: 1 6 1 7              // [fp + 7] = [fp + 6] op 1
  14: 4 7 _ 5              // Store: [fp + 5] = [fp + 7]
main_2:
  15: 7 5 5 5              // [fp + 5] = [fp + 5] op [fp + 5]
  16: 10 2 2 8             // [fp + 8] = [fp + 2] op 2
  17: 0 5 8 5              // [fp + 5] = [fp + 5] op [fp + 8]
  18: 3 0 3 9              // [fp + 9] = [fp + 0] op 3
  19: 15 9 3 _             // if [fp + 9] != 0, jump to not_zero_2
  20: 6 1 _ 9              // [fp + 9] = 1
  21: 13 23 _ _            // jump to end_3
not_zero_2:
  22: 6 0 _ 9              // [fp + 9] = 0
end_3:
  23: 4 9 _ 10             // Store: [fp + 10] = [fp + 9]
  24: 3 1 3 11             // [fp + 11] = [fp + 1] op 3
  25: 15 11 3 _            // if [fp + 11] != 0, jump to not_zero_4
  26: 6 1 _ 11             // [fp + 11] = 1
  27: 13 29 _ _            // jump to end_5
not_zero_4:
  28: 6 0 _ 11             // [fp + 11] = 0
end_5:
  29: 1 11 2 12            // [fp + 12] = [fp + 11] op 2
  30: 6 0 _ 13             // Initialize OR result to 0
  31: 15 0 3 _             // if [fp + 0] != 0, jump to or_true_6
  32: 15 12 2 _            // if [fp + 12] != 0, jump to or_true_6
  33: 13 35 _ _            // jump to or_end_7
or_true_6:
  34: 6 1 _ 13             // [fp + 13] = 1
or_end_7:
  35: 4 13 _ 14            // Store: [fp + 14] = [fp + 13]
  36: 3 4 2 15             // [fp + 15] = [fp + 4] op 2
  37: 15 15 3 _            // if [fp + 15] != 0, jump to neq_non_zero_8
  38: 6 0 _ 15             // [fp + 15] = 0
  39: 13 41 _ _            // jump to neq_end_9
neq_non_zero_8:
  40: 6 1 _ 15             // [fp + 15] = 1
neq_end_9:
  41: 8 15 3 16            // [fp + 16] = [fp + 15] op 3
  42: 15 16 3 _            // if [fp + 16] != 0, jump to and_non_zero_10
  43: 6 0 _ 16             // [fp + 16] = 0
  44: 13 46 _ _            // jump to and_end_11
and_non_zero_10:
  45: 6 1 _ 16             // [fp + 16] = 1
and_end_11:
  46: 4 16 _ 17            // Store: [fp + 17] = [fp + 16]
  47: 11 20 56 _           // call foo
  48: 0 5 10 22            // [fp + 22] = [fp + 5] op [fp + 10]
  49: 0 22 18 23           // [fp + 23] = [fp + 22] op [fp + 18]
  50: 11 25 59 _           // call bar
  51: 0 23 24 26           // [fp + 26] = [fp + 23] op [fp + 24]
  52: 0 26 19 27           // [fp + 27] = [fp + 26] op [fp + 19]
  53: 0 27 14 28           // [fp + 28] = [fp + 27] op [fp + 14]
  54: 0 28 17 -3           // [fp + -3] = [fp + 28] op [fp + 17]
  55: 12 _ _ _             // return
foo:
  56: 6 32 _ -4            // Return value 0: [fp -4] = 32
  57: 6 62 _ -3            // Return value 1: [fp -3] = 62
  58: 12 _ _ _             // return
bar:
  59: 6 123 _ -3           // Return value 0: [fp -3] = 123
  60: 12 _ _ _             // return

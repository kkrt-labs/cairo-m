---
source: crates/compiler/codegen/tests/codegen_tests.rs
expression: snapshot_content
---
---
source: crates/compiler/codegen/tests/codegen_tests.rs
expression: codegen_output
---
Fixture: random_instructions.cm
============================================================
Source code:
fn main() -> felt {
    let x = 3;
    let y = 13;
    let even_number = 16;
    let eq = x == y;
    let mut_val = 1;
    let eq_felt = 0;
    if (eq){
        eq_felt = 1;
        mut_val = mut_val + eq_felt + 1;
    }
    mut_val = mut_val * mut_val;
    mut_val = mut_val + (even_number / 2);

    let eq2 = (x == 3);
    let eq2_felt = 0;
    if (eq2){
        eq2_felt = 1;
    }

    let tempvar = 0;
    if (y == 3) {
        tempvar = 1;
    }
    let compound1 = (x != 0) || ((tempvar) + 2 != 0);
    let compound1_felt = 0;
    if (compound1){
        compound1_felt = 1;
    }
    let compound2 = (eq_felt != 2) && (3 != 0);

    let compound2_felt = 0;
    if (compound2){
        compound2_felt = 1;
    }

    for (let i = 0; i != 3; i = i + 1) {
        mut_val = mut_val + i;
    }

    let (a, b) = foo();
    return mut_val + eq2_felt + a + bar() + b + compound1_felt + compound2_felt;
}

fn foo() -> (felt, felt) {
    return (32, 62);
}

fn bar() -> felt {
    return 123;
}

============================================================
Generated CASM:
main:
   0: 9 3 0 _              // [fp + 0] = 3
   1: 9 13 1 _             // [fp + 1] = 13
   2: 9 16 2 _             // [fp + 2] = 16
   3: 1 0 1 3              // [fp + 3] = [fp + 0] op [fp + 1]
   4: 14 3 3 _             // if [fp + 3] != 0, jump to not_zero_0
   5: 9 1 3 _              // [fp + 3] = 1
   6: 12 8 _ _             // jump to end_1
not_zero_0:
   7: 9 0 3 _              // [fp + 3] = 0
end_1:
   8: 9 1 4 _              // [fp + 4] = 1
   9: 9 0 5 _              // [fp + 5] = 0
  10: 14 3 2 _             // if [fp + 3] != 0 jmp rel main_1
  11: 12 16 _ _            // jump abs main_2
main_1:
  12: 9 1 5 _              // Store immediate: [fp + 5] = 1
  13: 0 4 5 6              // [fp + 6] = [fp + 4] op [fp + 5]
  14: 4 6 1 7              // [fp + 7] = [fp + 6] op 1
  15: 4 7 0 4              // Store: [fp + 4] = [fp + 7] + 0
main_2:
  16: 4 4 0 43             // [fp + 43] = [fp + 4] + 0
  17: 4 4 0 44             // [fp + 44] = [fp + 4] + 0
  18: 2 43 44 4            // [fp + 4] = [fp + 43] op [fp + 44]
  19: 7 2 2 9              // [fp + 9] = [fp + 2] op 2
  20: 4 4 0 43             // [fp + 43] = [fp + 4] + 0
  21: 0 43 9 4             // [fp + 4] = [fp + 43] op [fp + 9]
  22: 5 0 3 11             // [fp + 11] = [fp + 0] op 3
  23: 14 11 3 _            // if [fp + 11] != 0, jump to not_zero_2
  24: 9 1 11 _             // [fp + 11] = 1
  25: 12 27 _ _            // jump to end_3
not_zero_2:
  26: 9 0 11 _             // [fp + 11] = 0
end_3:
  27: 9 0 12 _             // [fp + 12] = 0
  28: 14 11 2 _            // if [fp + 11] != 0 jmp rel main_3
  29: 12 31 _ _            // jump abs main_4
main_3:
  30: 9 1 12 _             // Store immediate: [fp + 12] = 1
main_4:
  31: 9 0 13 _             // [fp + 13] = 0
  32: 5 1 3 35             // [fp + 35] = [fp + 1] op 3
  33: 14 35 2 _            // if [fp + 35] != 0 jmp rel main_6
main_5:
  34: 9 1 13 _             // Store immediate: [fp + 13] = 1
main_6:
  35: 5 0 0 14             // [fp + 14] = [fp + 0] op 0
  36: 14 14 3 _            // if [fp + 14] != 0, jump to neq_non_zero_4
  37: 9 0 14 _             // [fp + 14] = 0
  38: 12 40 _ _            // jump to neq_end_5
neq_non_zero_4:
  39: 9 1 14 _             // [fp + 14] = 1
neq_end_5:
  40: 4 13 2 15            // [fp + 15] = [fp + 13] op 2
  41: 5 15 0 16            // [fp + 16] = [fp + 15] op 0
  42: 14 16 3 _            // if [fp + 16] != 0, jump to neq_non_zero_6
  43: 9 0 16 _             // [fp + 16] = 0
  44: 12 46 _ _            // jump to neq_end_7
neq_non_zero_6:
  45: 9 1 16 _             // [fp + 16] = 1
neq_end_7:
  46: 9 0 17 _             // Initialize OR result to 0
  47: 14 14 3 _            // if [fp + 14] != 0, jump to or_true_8
  48: 14 16 2 _            // if [fp + 16] != 0, jump to or_true_8
  49: 12 51 _ _            // jump to or_end_9
or_true_8:
  50: 9 1 17 _             // [fp + 17] = 1
or_end_9:
  51: 9 0 18 _             // [fp + 18] = 0
  52: 14 17 2 _            // if [fp + 17] != 0 jmp rel main_7
  53: 12 55 _ _            // jump abs main_8
main_7:
  54: 9 1 18 _             // Store immediate: [fp + 18] = 1
main_8:
  55: 5 5 2 19             // [fp + 19] = [fp + 5] op 2
  56: 14 19 3 _            // if [fp + 19] != 0, jump to neq_non_zero_10
  57: 9 0 19 _             // [fp + 19] = 0
  58: 12 60 _ _            // jump to neq_end_11
neq_non_zero_10:
  59: 9 1 19 _             // [fp + 19] = 1
neq_end_11:
  60: 9 3 20 _             // [fp + 20] = 3
  61: 14 20 3 _            // if [fp + 20] != 0, jump to neq_non_zero_12
  62: 9 0 20 _             // [fp + 20] = 0
  63: 12 65 _ _            // jump to neq_end_13
neq_non_zero_12:
  64: 9 1 20 _             // [fp + 20] = 1
neq_end_13:
  65: 2 19 20 21           // [fp + 21] = [fp + 19] op [fp + 20]
  66: 14 21 3 _            // if [fp + 21] != 0, jump to and_non_zero_14
  67: 9 0 21 _             // [fp + 21] = 0
  68: 12 70 _ _            // jump to and_end_15
and_non_zero_14:
  69: 9 1 21 _             // [fp + 21] = 1
and_end_15:
  70: 9 0 22 _             // [fp + 22] = 0
  71: 14 21 2 _            // if [fp + 21] != 0 jmp rel main_9
  72: 12 74 _ _            // jump abs main_10
main_9:
  73: 9 1 22 _             // Store immediate: [fp + 22] = 1
main_10:
  74: 9 0 23 _             // [fp + 23] = 0
main_11:
  75: 5 23 3 36            // [fp + 36] = [fp + 23] op 3
  76: 14 36 2 _            // if [fp + 36] != 0 jmp rel main_12
  77: 12 83 _ _            // jump abs main_14
main_12:
  78: 4 4 0 43             // [fp + 43] = [fp + 4] + 0
  79: 0 43 23 4            // [fp + 4] = [fp + 43] op [fp + 23]
main_13:
  80: 4 23 0 43            // [fp + 43] = [fp + 23] + 0
  81: 4 43 1 23            // [fp + 23] = [fp + 43] op 1
  82: 12 75 _ _            // jump abs main_11
main_14:
  83: 10 39 92 _           // call foo
  84: 0 4 12 28            // [fp + 28] = [fp + 4] op [fp + 12]
  85: 0 28 37 29           // [fp + 29] = [fp + 28] op [fp + 37]
  86: 10 42 95 _           // call bar
  87: 0 29 41 31           // [fp + 31] = [fp + 29] op [fp + 41]
  88: 0 31 38 32           // [fp + 32] = [fp + 31] op [fp + 38]
  89: 0 32 18 33           // [fp + 33] = [fp + 32] op [fp + 18]
  90: 0 33 22 -3           // [fp + -3] = [fp + 33] op [fp + 22]
  91: 11 _ _ _             // return
foo:
  92: 9 32 -4 _            // Return value 0: [fp -4] = 32
  93: 9 62 -3 _            // Return value 1: [fp -3] = 62
  94: 11 _ _ _             // return
bar:
  95: 9 123 -3 _           // Return value 0: [fp -3] = 123
  96: 11 _ _ _             // return

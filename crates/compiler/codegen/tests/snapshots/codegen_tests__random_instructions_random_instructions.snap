---
source: crates/compiler/codegen/tests/codegen_tests.rs
expression: snapshot_content
---
---
source: crates/compiler/codegen/tests/codegen_tests.rs
expression: codegen_output
---
Fixture: random_instructions.cm
============================================================
Source code:
func main(){
    let x = 3;
    let y = 13;
    let even_number = 16;
    let eq = x == y;
    let mut_val = 1;
    if (eq) {
        mut_val = mut_val + eq + 1;
    }
    mut_val = mut_val * mut_val;
    mut_val = mut_val + (even_number / 2);

    let eq2 = (x == x);

    let compound1 = x || (y == 3) + 2;
    let compound2 = eq != 2 && 3;

    return mut_val + eq2 + foo() + 32;
}

func foo() -> felt {
    return 32;
}

============================================================
Generated CASM:
main:
   0: 6 3 _ 0              // Store immediate: [fp + 0] = 3
   1: 6 13 _ 1             // Store immediate: [fp + 1] = 13
   2: 6 16 _ 2             // Store immediate: [fp + 2] = 16
   3: 2 0 1 3              // [fp + 3] = [fp + 0] op [fp + 1]
   4: 31 3 3 _             // if [fp + 3] != 0, jump to not_zero_0
   5: 6 1 _ 3              // [fp + 3] = 1
   6: 20 8 _ _             // jump to end_1
not_zero_0:
   7: 6 0 _ 3              // [fp + 3] = 0
end_1:
   8: 4 3 _ 4              // Store: [fp + 4] = [fp + 3]
   9: 6 1 _ 5              // Store immediate: [fp + 5] = 1
  10: 31 4 2 _             // if [fp + 4] != 0 jmp rel main_1
  11: 20 15 _ _            // jump abs main_2
main_1:
  12: 0 5 4 6              // [fp + 6] = [fp + 5] op [fp + 4]
  13: 1 6 1 7              // [fp + 7] = [fp + 6] op 1
  14: 4 7 _ 5              // Store: [fp + 5] = [fp + 7]
main_2:
  15: 7 5 5 5              // [fp + 5] = [fp + 5] op [fp + 5]
  16: 10 2 2 8             // [fp + 8] = [fp + 2] op 2
  17: 0 5 8 5              // [fp + 5] = [fp + 5] op [fp + 8]
  18: 2 0 0 9              // [fp + 9] = [fp + 0] op [fp + 0]
  19: 31 9 3 _             // if [fp + 9] != 0, jump to not_zero_2
  20: 6 1 _ 9              // [fp + 9] = 1
  21: 20 23 _ _            // jump to end_3
not_zero_2:
  22: 6 0 _ 9              // [fp + 9] = 0
end_3:
  23: 4 9 _ 10             // Store: [fp + 10] = [fp + 9]
  24: 3 1 3 11             // [fp + 11] = [fp + 1] op 3
  25: 31 11 3 _            // if [fp + 11] != 0, jump to not_zero_4
  26: 6 1 _ 11             // [fp + 11] = 1
  27: 20 29 _ _            // jump to end_5
not_zero_4:
  28: 6 0 _ 11             // [fp + 11] = 0
end_5:
  29: 1 11 2 12            // [fp + 12] = [fp + 11] op 2
  30: 6 0 _ 13             // Initialize OR result to 0
  31: 31 0 3 _             // if [fp + 0] != 0, jump to or_true_6
  32: 31 12 2 _            // if [fp + 12] != 0, jump to or_true_6
  33: 20 35 _ _            // jump to or_end_7
or_true_6:
  34: 6 1 _ 13             // [fp + 13] = 1
or_end_7:
  35: 3 4 2 14             // [fp + 14] = [fp + 4] op 2
  36: 31 14 3 _            // if [fp + 14] != 0, jump to neq_non_zero_8
  37: 6 0 _ 14             // [fp + 14] = 0
  38: 20 40 _ _            // jump to neq_end_9
neq_non_zero_8:
  39: 6 1 _ 14             // [fp + 14] = 1
neq_end_9:
  40: 8 14 3 15            // [fp + 15] = [fp + 14] op 3
  41: 31 15 3 _            // if [fp + 15] != 0, jump to and_non_zero_10
  42: 6 0 _ 15             // [fp + 15] = 0
  43: 20 45 _ _            // jump to and_end_11
and_non_zero_10:
  44: 6 1 _ 15             // [fp + 15] = 1
and_end_11:
  45: 0 5 10 16            // [fp + 16] = [fp + 5] op [fp + 10]
  46: 12 18 50 _           // call foo
  47: 0 16 17 19           // [fp + 19] = [fp + 16] op [fp + 17]
  48: 1 19 32 -3           // [fp + -3] = [fp + 19] op 32
  49: 15 _ _ _             // return
foo:
  50: 6 32 _ -3            // Return value: [fp - 3] = 32
  51: 15 _ _ _             // return

---
source: crates/compiler/codegen/tests/codegen_tests.rs
expression: snapshot_content
---
---
source: crates/compiler/codegen/tests/codegen_tests.rs
expression: codegen_output
---
Fixture: random_instructions.cm
============================================================
Source code:
func main(){
    let x = 3;
    let y = 13;
    let even_number = 16;
    let eq = x == y;
    let mut_val = 1;
    if (eq) {
        mut_val = mut_val + eq + 1;
    }
    mut_val = mut_val * mut_val;
    mut_val = mut_val + (even_number / 2);

    let eq2 = (x == x);

    return mut_val + eq2 + foo() + 32;
}

func foo() -> felt {
    return 32;
}

============================================================
Generated CASM:
main:
   0: 6 3 _ 0              // Store immediate: [fp + 0] = 3
   1: 6 13 _ 1             // Store immediate: [fp + 1] = 13
   2: 6 16 _ 2             // Store immediate: [fp + 2] = 16
   3: 2 0 1 3              // Equality check: [fp + 3] = [fp + 0] - [fp + 1]
   4: 31 3 3 _             // if [fp + 3] != 0 jmp rel eq_false_3
   5: 6 1 _ 3              // [fp + 3] = 1
   6: 20 8 _ _             // jump abs eq_end_3
eq_false_3:
   7: 6 0 _ 3              // [fp + 3] = 0
eq_end_3:
   8: 4 3 _ 4              // Store: [fp + 4] = [fp + 3]
   9: 6 1 _ 5              // Store immediate: [fp + 5] = 1
  10: 31 4 2 _             // if [fp + 4] != 0 jmp rel main_1
  11: 20 15 _ _            // jump abs main_2
main_1:
  12: 0 5 4 6              // [fp + 6] = [fp + 5] op [fp + 4]
  13: 1 6 1 7              // [fp + 7] = [fp + 6] op 1
  14: 4 7 _ 5              // Store: [fp + 5] = [fp + 7]
main_2:
  15: 7 5 5 8              // [fp + 8] = [fp + 5] op [fp + 5]
  16: 4 8 _ 5              // Store: [fp + 5] = [fp + 8]
  17: 10 2 2 9             // [fp + 9] = [fp + 2] op 2
  18: 0 5 9 10             // [fp + 10] = [fp + 5] op [fp + 9]
  19: 4 10 _ 5             // Store: [fp + 5] = [fp + 10]
  20: 2 0 0 11             // Equality check: [fp + 11] = [fp + 0] - [fp + 0]
  21: 31 11 3 _            // if [fp + 11] != 0 jmp rel eq_false_11
  22: 6 1 _ 11             // [fp + 11] = 1
  23: 20 25 _ _            // jump abs eq_end_11
eq_false_11:
  24: 6 0 _ 11             // [fp + 11] = 0
eq_end_11:
  25: 4 11 _ 12            // Store: [fp + 12] = [fp + 11]
  26: 0 5 12 13            // [fp + 13] = [fp + 5] op [fp + 12]
  27: 12 15 31 _           // call foo
  28: 0 13 14 16           // [fp + 16] = [fp + 13] op [fp + 14]
  29: 1 16 32 -3           // [fp + -3] = [fp + 16] op 32
  30: 15 _ _ _             // return
foo:
  31: 6 32 _ -3            // Return value: [fp - 3] = 32
  32: 15 _ _ _             // return

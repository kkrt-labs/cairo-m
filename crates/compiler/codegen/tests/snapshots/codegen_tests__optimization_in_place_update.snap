---
source: crates/compiler/codegen/tests/codegen_tests.rs
expression: snapshot_content
---
---
source: crates/compiler/codegen/tests/codegen_tests.rs
expression: codegen_output
---
Fixture: in_place_update.cm
============================================================
Source code:
fn test_in_place_update() -> felt {
    let a = 5;
    a = a + 1;
    let b = 10;
    b = b + a;
    return b;
}

fn test_loop_optimization() -> felt {
    let i = 0;
    let sum = 0;
    while (i != 5) {
        sum = sum + i;
        i = i + 1;
    }
    return sum;
}

fn main() -> felt {
    let x = test_in_place_update();
    let y = test_loop_optimization();
    return x + y;
}

============================================================
Generated CASM:
test_in_place_update:
test_in_place_update:
test_in_place_update_0:
   0: 9 5 0 _              // [fp + 0] = 5
   1: 4 0 0 4              // [fp + 4] = [fp + 0] + 0
   2: 4 4 1 0              // [fp + 0] = [fp + 4] op 1
   3: 9 10 -3 _            // [fp + -3] = 10
   4: 4 -3 0 4             // [fp + 4] = [fp + -3] + 0
   5: 0 4 0 -3             // [fp + -3] = [fp + 4] op [fp + 0]
   6: 11 _ _ _             // return
test_loop_optimization:
test_loop_optimization:
test_loop_optimization_0:
   7: 9 0 0 _              // [fp + 0] = 0
   8: 9 0 1 _              // [fp + 1] = 0
test_loop_optimization_1:
   9: 5 0 5 4              // [fp + 4] = [fp + 0] op 5
  10: 14 4 2 _             // if [fp + 4] != 0 jmp rel test_loop_optimization_2
  11: 12 17 _ _            // jump abs test_loop_optimization_3
test_loop_optimization_2:
  12: 4 1 0 5              // [fp + 5] = [fp + 1] + 0
  13: 0 5 0 1              // [fp + 1] = [fp + 5] op [fp + 0]
  14: 4 0 0 5              // [fp + 5] = [fp + 0] + 0
  15: 4 5 1 0              // [fp + 0] = [fp + 5] op 1
  16: 12 9 _ _             // jump abs test_loop_optimization_1
test_loop_optimization_3:
  17: 4 1 0 -3             // Return value 0: [fp -3] = [fp + 1] + 0
  18: 11 _ _ _             // return
main:
  19: 10 2 0 _             // call test_in_place_update
  20: 10 4 7 _             // call test_loop_optimization
  21: 0 1 3 -3             // [fp + -3] = [fp + 1] op [fp + 3]
  22: 11 _ _ _             // return

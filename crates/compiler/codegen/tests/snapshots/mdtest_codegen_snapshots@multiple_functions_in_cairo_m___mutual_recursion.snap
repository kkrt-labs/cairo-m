---
source: crates/compiler/codegen/tests/mdtest_snapshots.rs
description: "Codegen snapshot for mdtest: Multiple Functions in Cairo-M - Mutual Recursion"
input_file: mdtest/04-advanced/02-multiple-functions.md
---
Source:
fn test_mutual_recursion() -> felt {
    let n = 5;
    return is_even(n) * 10 + is_odd(n);
}

fn is_even(n: felt) -> felt {
    if n == 0 {
        return 1;
    }
    return is_odd(n - 1);
}

fn is_odd(n: felt) -> felt {
    if n == 0 {
        return 0;
    }
    return is_even(n - 1);
}
============================================================
Generated CASM:
test_mutual_recursion:
test_mutual_recursion:
test_mutual_recursion_0:
   0: 9 5 5 _              // [fp + 5] = 5
   1: 10 7 7 _             // call is_even
   2: 6 6 10 2             // [fp + 2] = [fp + 6] * 10
   3: 4 5 0 8              // Arg 0 slot 0: [fp + 8] = [fp + 5] + 0
   4: 10 10 20 _           // call is_odd
   5: 0 2 9 2147483644     // [fp + -3] = [fp + 2] op [fp + 9]
   6: 11 _ _ _             // return
is_even:
is_even:
is_even_0:
   7: 4 2147483643 0 0     // [fp + 0] = [fp + -4] + (-0) (-0 as M31 -> 0)
   8: 14 0 3 _             // if [fp + 0] != 0 jmp rel not_zero_0
   9: 9 1 0 _              // [fp + 0] = 1
  10: 13 2 _ _             // jump rel end_1
not_zero_0:
  11: 9 0 0 _              // [fp + 0] = 0
end_1:
  12: 14 0 2 _             // if [fp + 0] != 0 jmp rel is_even_1
  13: 13 3 _ _             // jump rel is_even_2
is_even_1:
  14: 9 1 2147483644 _     // Return value 0: [fp -3] = 1
  15: 11 _ _ _             // return
is_even_2:
  16: 4 2147483643 2147483646 3 // [fp + 3] = [fp + -4] + (-1) (-1 as M31 -> 2147483646 (=-1 mod M31))
  17: 10 5 20 _            // call is_odd
  18: 4 4 0 2147483644     // Return value 0: [fp -3] = [fp + 4] + 0
  19: 11 _ _ _             // return
is_odd:
is_odd:
is_odd_0:
  20: 4 2147483643 0 0     // [fp + 0] = [fp + -4] + (-0) (-0 as M31 -> 0)
  21: 14 0 3 _             // if [fp + 0] != 0 jmp rel not_zero_2
  22: 9 1 0 _              // [fp + 0] = 1
  23: 13 2 _ _             // jump rel end_3
not_zero_2:
  24: 9 0 0 _              // [fp + 0] = 0
end_3:
  25: 14 0 2 _             // if [fp + 0] != 0 jmp rel is_odd_1
  26: 13 3 _ _             // jump rel is_odd_2
is_odd_1:
  27: 9 0 2147483644 _     // Return value 0: [fp -3] = 0
  28: 11 _ _ _             // return
is_odd_2:
  29: 4 2147483643 2147483646 3 // [fp + 3] = [fp + -4] + (-1) (-1 as M31 -> 2147483646 (=-1 mod M31))
  30: 10 5 7 _             // call is_even
  31: 4 4 0 2147483644     // Return value 0: [fp -3] = [fp + 4] + 0
  32: 11 _ _ _             // return

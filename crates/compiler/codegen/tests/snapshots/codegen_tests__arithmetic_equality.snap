---
source: crates/compiler/codegen/tests/codegen_tests.rs
expression: snapshot_content
---
---
source: crates/compiler/codegen/tests/codegen_tests.rs
expression: codegen_output
---
Fixture: equality.cm
============================================================
Source code:
func main() -> felt {
    let a = 1;
    let b = 0;
    let c = a == b;
    let d = a == 0;
    return c + d;
}

============================================================
Generated CASM:
main:
   0: 6 1 _ 0              // Store immediate: [fp + 0] = 1
   1: 6 0 _ 1              // Store immediate: [fp + 1] = 0
   2: 2 0 1 2              // [fp + 2] = [fp + 0] op [fp + 1]
   3: 15 2 3 _             // if [fp + 2] != 0, jump to not_zero_0
   4: 6 1 _ 2              // [fp + 2] = 1
   5: 13 7 _ _             // jump to end_1
not_zero_0:
   6: 6 0 _ 2              // [fp + 2] = 0
end_1:
   7: 2 0 1 3              // [fp + 3] = [fp + 0] op [fp + 1]
   8: 15 3 3 _             // if [fp + 3] != 0, jump to not_zero_2
   9: 6 1 _ 3              // [fp + 3] = 1
  10: 13 12 _ _            // jump to end_3
not_zero_2:
  11: 6 0 _ 3              // [fp + 3] = 0
end_3:
  12: 4 3 _ 4              // Store: [fp + 4] = [fp + 3]
  13: 3 0 0 5              // [fp + 5] = [fp + 0] op 0
  14: 15 5 3 _             // if [fp + 5] != 0, jump to not_zero_4
  15: 6 1 _ 5              // [fp + 5] = 1
  16: 13 18 _ _            // jump to end_5
not_zero_4:
  17: 6 0 _ 5              // [fp + 5] = 0
end_5:
  18: 3 0 0 6              // [fp + 6] = [fp + 0] op 0
  19: 15 6 3 _             // if [fp + 6] != 0, jump to not_zero_6
  20: 6 1 _ 6              // [fp + 6] = 1
  21: 13 23 _ _            // jump to end_7
not_zero_6:
  22: 6 0 _ 6              // [fp + 6] = 0
end_7:
  23: 4 6 _ 7              // Store: [fp + 7] = [fp + 6]
  24: 0 4 7 -3             // [fp + -3] = [fp + 4] op [fp + 7]
  25: 12 _ _ _             // return

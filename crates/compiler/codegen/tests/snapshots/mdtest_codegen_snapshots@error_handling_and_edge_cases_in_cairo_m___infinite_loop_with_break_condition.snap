---
source: crates/compiler/codegen/tests/mdtest_snapshots.rs
description: "Codegen snapshot for mdtest: Error Handling and Edge Cases in Cairo-M - Infinite Loop with Break Condition"
input_file: mdtest/05-edge-cases/01-error-handling.md
---
Source:
fn loop_with_escape() -> u32 {
    let counter = 0u32;

    loop {
        counter = counter + 1u32;

        // Multiple exit conditions
        if (counter > 1000u32) {
            break;  // Prevent actual infinite loop
        }

        if (counter == 10u32) {
            break;
        }
    }

    return counter;  // Should return 100
}
============================================================
Generated CASM:
loop_with_escape:
loop_with_escape:
loop_with_escape_0:
   0: 23 0 0 0             // u32([fp + 0], [fp + 1]) = u32(0)
   1: 19 0 0 0 2           // u32([fp + 2], [fp + 3]) = u32([fp + 0], [fp + 1]) + u32(0, 0)
loop_with_escape_1:
   2: 19 2 1 0 4           // u32([fp + 4], [fp + 5]) = u32([fp + 2], [fp + 3]) U32Add u32(1, 0)
   3: 32 4 1000 0 6        // [fp + 6] = u32([fp + 4], [fp + 5]) U32Greater u32(1000, 0)
   4: 14 6 5 _             // if [fp + 6] != 0 jmp rel loop_with_escape_3
   5: 12 15 _ _            // jump abs loop_with_escape_4
loop_with_escape_2:
   6: 4 7 0 -4             // Return value 0 slot 0: [fp -4] = [fp + 7] + 0
   7: 4 8 0 -3             // Return value 0 slot 1: [fp -3] = [fp + 8] + 0
   8: 11 _ _ _             // return
loop_with_escape_3:
   9: 19 2 0 0 7           // u32([fp + 7], [fp + 8]) = u32([fp + 2], [fp + 3]) + u32(0, 0)
  10: 12 9 _ _             // jump abs loop_with_escape_2
loop_with_escape_4:
  11: 30 4 10 0 9          // [fp + 9] = u32([fp + 4], [fp + 5]) U32Eq u32(10, 0)
  12: 14 9 2 _             // if [fp + 9] != 0 jmp rel loop_with_escape_5
  13: 12 22 _ _            // jump abs loop_with_escape_6
loop_with_escape_5:
  14: 19 4 0 0 7           // u32([fp + 7], [fp + 8]) = u32([fp + 4], [fp + 5]) + u32(0, 0)
  15: 12 9 _ _             // jump abs loop_with_escape_2
loop_with_escape_6:
  16: 19 4 0 0 2           // u32([fp + 2], [fp + 3]) = u32([fp + 4], [fp + 5]) + u32(0, 0)
  17: 12 3 _ _             // jump abs loop_with_escape_1

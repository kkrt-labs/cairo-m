---
source: crates/compiler/codegen/tests/codegen_tests.rs
expression: snapshot_content
---
---
source: crates/compiler/codegen/tests/codegen_tests.rs
expression: codegen_output
---
Fixture: args_in_order.cm
============================================================
Source code:
// Test case where arguments might already be in order
fn process_four(a: felt, b: felt, c: felt, d: felt) -> felt {
    return a + b + c + d;
}

fn wrapper(x: felt, y: felt, z: felt, w: felt) -> felt {
    // If x, y, z, w are at [fp - 6], [fp - 5], [fp - 4], [fp - 3]
    // and we haven't allocated any locals yet (L = 0),
    // then they might already be in consecutive positions
    return process_four(x, y, z, w);
}

============================================================
Generated CASM:
process_four:
process_four:
process_four_0:
   0: 0 -7 -6 0            // [fp + 0] = [fp + -7] op [fp + -6]
   1: 0 0 -5 1             // [fp + 1] = [fp + 0] op [fp + -5]
   2: 0 1 -4 -3            // [fp + -3] = [fp + 1] op [fp + -4]
   3: 11 _ _ _             // return
wrapper:
   4: 4 -7 0 0             // Arg 0 slot 0: [fp + 0] = [fp + -7] + 0
   5: 4 -6 0 1             // Arg 1 slot 0: [fp + 1] = [fp + -6] + 0
   6: 4 -5 0 2             // Arg 2 slot 0: [fp + 2] = [fp + -5] + 0
   7: 4 -4 0 3             // Arg 3 slot 0: [fp + 3] = [fp + -4] + 0
   8: 10 5 0 _             // call process_four
   9: 4 4 0 -3             // Return value 0: [fp -3] = [fp + 4] + 0
  10: 11 _ _ _             // return

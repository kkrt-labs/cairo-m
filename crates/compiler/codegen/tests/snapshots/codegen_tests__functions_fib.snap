---
source: crates/compiler/codegen/tests/codegen_tests.rs
expression: snapshot_content
---
---
source: crates/compiler/codegen/tests/codegen_tests.rs
expression: codegen_output
---
Fixture: fib.cm
============================================================
Source code:
fn main() -> felt {
    let n = 10;
    let result = fib(n);
    return result;
}

fn fib(n: felt) -> felt {
    if (n == 0) {
        return 0;
    }
    if (n == 1) {
        return 1;
    }
    return fib(n - 1) + fib(n - 2);
}

============================================================
Generated CASM:
main:
   0: 9 10 3 _             // Direct arg placement: [fp + 3] = 10
   1: 10 5 15 _            // call fib
   2: 4 4 0 2              // Store: [fp + 2] = [fp + 4] + 0
   3: 4 2 0 -3             // Return value 0: [fp -3] = [fp + 2] + 0
   4: 11 _ _ _             // return
fib:
   5: 14 -4 9 _            // if [fp + -4] != 0 jmp rel fib_2
   6: 12 20 _ _            // jump abs fib_1
fib_1:
   6: 9 0 -3 _             // Return value 0: [fp -3] = 0
   7: 11 _ _ _             // return
fib_2:
   8: 5 -4 1 5             // [fp + 5] = [fp + -4] op 1
   9: 14 5 7 _             // if [fp + 5] != 0 jmp rel fib_4
fib_3:
  10: 9 1 -3 _             // Return value 0: [fp -3] = 1
  11: 11 _ _ _             // return
fib_4:
  12: 5 -4 1 1             // [fp + 1] = [fp + -4] op 1
  13: 10 3 14 _            // call fib
fib:
  14: 5 -4 2 4             // [fp + 4] = [fp + -4] op 2
  15: 10 6 14 _            // call fib
  16: 0 2 5 -3             // [fp + -3] = [fp + 2] op [fp + 5]
  17: 11 _ _ _             // return

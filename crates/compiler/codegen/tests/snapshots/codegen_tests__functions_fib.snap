---
source: crates/compiler/codegen/tests/codegen_tests.rs
expression: snapshot_content
---
---
source: crates/compiler/codegen/tests/codegen_tests.rs
expression: codegen_output
---
Fixture: fib.cm
============================================================
Source code:
fn main() -> felt {
    let n = 10;
    let result = fib(n);
    return result;
}

fn fib(n: felt) -> felt {
    if (n == 0) {
        return 0;
    }
    if (n == 1) {
        return 1;
    }
    return fib(n - 1) + fib(n - 2);
}

============================================================
Generated CASM:
main:
   0: 9 10 0 _             // Store immediate: [fp + 0] = 10
   1: 10 2 5 _             // call fib
   2: 4 1 0 3              // Store: [fp + 3] = [fp + 1] + 0
   3: 4 3 0 -3             // Return value 0: [fp -3] = [fp + 3] + 0
   4: 11 _ _ _             // return
fib:
   5: 14 -4 4 _            // if [fp + -4] != 0 jmp rel fib_2
   6: 12 7 _ _             // jump abs fib_1
fib_1:
   7: 9 0 -3 _             // Return value 0: [fp -3] = 0
   8: 11 _ _ _             // return
fib_2:
   9: 5 -4 1 0             // [fp + 0] = [fp + -4] op 1
  10: 14 0 3 _             // if [fp + 0] != 0 jmp rel fib_4
fib_3:
  11: 9 1 -3 _             // Return value 0: [fp -3] = 1
  12: 11 _ _ _             // return
fib_4:
  13: 5 -4 1 1             // [fp + 1] = [fp + -4] op 1
  14: 10 3 5 _             // call fib
  15: 5 -4 2 4             // [fp + 4] = [fp + -4] op 2
  16: 10 6 5 _             // call fib
  17: 0 2 5 -3             // [fp + -3] = [fp + 2] op [fp + 5]
  18: 11 _ _ _             // return

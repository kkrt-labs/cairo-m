---
source: crates/compiler/codegen/tests/codegen_tests.rs
expression: snapshot_content
---
---
source: crates/compiler/codegen/tests/codegen_tests.rs
expression: codegen_output
---
Fixture: fib.cm
============================================================
Source code:
func main() -> felt {
    let a = 0;
    let b = 1;
    let n = 10;
    let result = fib(a, b, n);
    return result;
}

func fib(a: felt, b: felt, n: felt) -> felt {
    if (n == 0) {
        return a;
    }
    if (n == 1) {
        return b;
    }
    return fib(b, a + b, n - 1);
}

============================================================
Generated CASM:
main:
   0: 6 0 0                // Store immediate: [fp+0] = 0
   1: 6 1 1                // Store immediate: [fp+1] = 1
   2: 6 2 10               // Store immediate: [fp+2] = 10
   3: 4 0 3                // Arg 0: [fp + 3] = [fp + 0]
   4: 4 1 4                // Arg 1: [fp + 4] = [fp + 1]
   5: 4 2 5                // Arg 2: [fp + 5] = [fp + 2]
   6: 12 7 10              // call fib
   7: 4 6 4                // Store: [fp+4] = [fp+6]
   8: 4 4 -3               // Return value: [fp-3] = [fp+4]
   9: 15                   // return
fib:
  10: 4 -6 0               // Store: [fp+0] = [fp+-6]
  11: 4 -5 1               // Store: [fp+1] = [fp+-5]
  12: 4 -4 2               // Store: [fp+2] = [fp+-4]
  13: 3 2 3 0              // Equality check: [fp+3] = [fp+2] - 0
  14: 31 3 4               // if [fp+3] != 0 jmp rel fib_2
  15: 20 16                // jump abs fib_1
fib_1:
  16: 4 0 -3               // Return value: [fp-3] = [fp+0]
  17: 15                   // return
fib_2:
  18: 3 2 4 1              // Equality check: [fp+4] = [fp+2] - 1
  19: 31 4 4               // if [fp+4] != 0 jmp rel fib_4
  20: 20 21                // jump abs fib_3
fib_3:
  21: 4 1 -3               // Return value: [fp-3] = [fp+1]
  22: 15                   // return
fib_4:
  23: 0 0 1 5              // [fp + 5] = [fp + 0] op [fp + 1]
  24: 3 2 6 1              // [fp + 6] = [fp + 2] op 1
  25: 4 1 7                // Arg 0: [fp + 7] = [fp + 1]
  26: 4 5 8                // Arg 1: [fp + 8] = [fp + 5]
  27: 4 6 9                // Arg 2: [fp + 9] = [fp + 6]
  28: 12 11 10             // call fib
  29: 4 10 -3              // Return value: [fp-3] = [fp+10]
  30: 15                   // return

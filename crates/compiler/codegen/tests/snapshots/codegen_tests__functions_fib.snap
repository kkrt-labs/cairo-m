---
source: crates/compiler/codegen/tests/codegen_tests.rs
expression: snapshot_content
---
---
source: crates/compiler/codegen/tests/codegen_tests.rs
expression: codegen_output
---
Fixture: fib.cm
============================================================
Source code:
func main() -> felt {
    let a = 0;
    let b = 1;
    let n = 10;
    let result = fib(a, b, n);
    return result;
}

func fib(a: felt, b: felt, n: felt) -> felt {
    if (n == 0) {
        return a;
    }
    if (n == 1) {
        return b;
    }
    return fib(b, a + b, n - 1);
}

============================================================
Generated CASM:
main:
   0: 6 0 0                // Store immediate: [fp+0] = 0
   1: 6 1 1                // Store immediate: [fp+1] = 1
   2: 6 2 10               // Store immediate: [fp+2] = 10
   3: 4 0 3                // Arg 0: [fp + 3] = [fp + 0]
   4: 4 1 4                // Arg 1: [fp + 4] = [fp + 1]
   5: 4 2 5                // Arg 2: [fp + 5] = [fp + 2]
   6: 12 7 10              // call fib
   7: 4 6 4                // Store: [fp+4] = [fp+6]
   8: 4 4 -3               // Return value: [fp-3] = [fp+4]
   9: 15                   // return
fib:
  10: 3 -4 0 0             // Equality check: [fp+0] = [fp+-4] - 0
  11: 31 0 3               // if [fp+0] != 0 jmp rel fib_2
fib_1:
  12: 4 -6 -3              // Return value: [fp-3] = [fp+-6]
  13: 15                   // return
fib_2:
  14: 3 -4 1 1             // Equality check: [fp+1] = [fp+-4] - 1
  15: 31 1 3               // if [fp+1] != 0 jmp rel fib_4
fib_3:
  16: 4 -5 -3              // Return value: [fp-3] = [fp+-5]
  17: 15                   // return
fib_4:
  18: 0 -6 -5 2            // [fp + 2] = [fp + -6] op [fp + -5]
  19: 3 -4 3 1             // [fp + 3] = [fp + -4] op 1
  20: 4 -5 4               // Arg 0: [fp + 4] = [fp + -5]
  21: 4 2 5                // Arg 1: [fp + 5] = [fp + 2]
  22: 4 3 6                // Arg 2: [fp + 6] = [fp + 3]
  23: 12 8 10              // call fib
  24: 4 7 -3               // Return value: [fp-3] = [fp+7]
  25: 15                   // return

---
source: crates/compiler/codegen/tests/mdtest_snapshots.rs
description: "Codegen snapshot for mdtest: Arrays in Cairo-M - Array Iteration Pattern"
input_file: mdtest/01-basics/05-arrays.md
---
Source:
fn array_sum_loop() -> u32{
    let arr: [u32; 5] = [1, 2, 3, 4, 5];
    let sum: u32 = 0;
    let i = 0u32;
    while (i < 5u32) {
        sum = sum + arr[i];
        i = i + 1;
    }
    return sum;
}
============================================================
Generated CASM:
array_sum_loop:
array_sum_loop:
array_sum_loop_0:
   0: 23 1 0 16            // [fp + 16], [fp + 17] = u32(1)
   1: 23 2 0 18            // [fp + 18], [fp + 19] = u32(2)
   2: 23 3 0 20            // [fp + 20], [fp + 21] = u32(3)
   3: 23 4 0 22            // [fp + 22], [fp + 23] = u32(4)
   4: 23 5 0 24            // [fp + 24], [fp + 25] = u32(5)
   5: 43 16 0 _            // [fp + 0] = fp + 16
   6: 23 0 0 1             // u32([fp + 1], [fp + 2]) = u32(0)
   7: 23 0 0 3             // u32([fp + 3], [fp + 4]) = u32(0)
   8: 19 1 0 0 5           // u32([fp + 5], [fp + 6]) = u32([fp + 1], [fp + 2]) + u32(0, 0)
   9: 19 3 0 0 7           // u32([fp + 7], [fp + 8]) = u32([fp + 3], [fp + 4]) + u32(0, 0)
array_sum_loop_1:
  10: 34 7 5 0 9           // [fp + 9] = u32([fp + 7], [fp + 8]) U32Less u32(5, 0)
  11: 14 9 2 _             // if [fp + 9] != 0 jmp rel array_sum_loop_2
  12: 12 28 _ _            // jump abs array_sum_loop_3
array_sum_loop_2:
  13: 6 7 2 26             // [fp + 26] = [fp + 7] * 2 (scale index by element size)
  14: 42 0 26 10           // [fp + 10] = [[fp + 0] + [fp + 26]]
  15: 4 26 1 27            // [fp + 27] = [fp + 26] + 1 (offset for slot 1)
  16: 42 0 27 11           // [fp + 11] = [[fp + 0] + [fp + 27]] (slot 1)
  17: 15 5 10 12           // u32([fp + 12], [fp + 13]) = u32([fp + 5], [fp + 6]) U32Add u32([fp + 10], [fp + 11])
  18: 19 7 1 0 14          // u32([fp + 14], [fp + 15]) = u32([fp + 7], [fp + 8]) U32Add u32(1, 0)
  19: 19 12 0 0 5          // u32([fp + 5], [fp + 6]) = u32([fp + 12], [fp + 13]) + u32(0, 0)
  20: 19 14 0 0 7          // u32([fp + 7], [fp + 8]) = u32([fp + 14], [fp + 15]) + u32(0, 0)
  21: 12 12 _ _            // jump abs array_sum_loop_1
array_sum_loop_3:
  22: 4 5 0 -4             // Return value 0 slot 0: [fp -4] = [fp + 5] + 0
  23: 4 6 0 -3             // Return value 0 slot 1: [fp -3] = [fp + 6] + 0
  24: 11 _ _ _             // return

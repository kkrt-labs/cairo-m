---
source: crates/compiler/codegen/tests/mdtest_snapshots.rs
description: "Codegen snapshot for mdtest: Arrays in Cairo-M - Array Iteration Pattern"
input_file: mdtest/01-basics/05-arrays.md
---
Source:
fn array_sum_loop() -> u32{
    let arr: [u32; 5] = [1, 2, 3, 4, 5];
    let sum: u32 = 0;
    let i = 0;
    while i != 5 {
        sum = sum + arr[i];
        i = i + 1;
    }
    return sum;
}
============================================================
Generated CASM:
array_sum_loop:
array_sum_loop:
array_sum_loop_0:
   0: 23 1 0 13            // [fp + 13], [fp + 14] = u32(1)
   1: 23 2 0 15            // [fp + 15], [fp + 16] = u32(2)
   2: 23 3 0 17            // [fp + 17], [fp + 18] = u32(3)
   3: 23 4 0 19            // [fp + 19], [fp + 20] = u32(4)
   4: 23 5 0 21            // [fp + 21], [fp + 22] = u32(5)
   5: 43 13 0 _            // [fp + 0] = fp + 13
   6: 23 0 0 1             // u32([fp + 1], [fp + 2]) = u32(0)
   7: 9 0 3 _              // [fp + 3] = 0
   8: 19 1 0 0 4           // u32([fp + 4], [fp + 5]) = u32([fp + 1], [fp + 2]) + u32(0, 0)
   9: 4 3 0 6              // [fp + 6] = [fp + 3] + 0
array_sum_loop_1:
  10: 4 6 2147483642 7     // [fp + 7] = [fp + 6] + (-5) (-5 as M31 -> 2147483642 (=-5 mod M31))
  11: 14 7 3 _             // if [fp + 7] != 0 jmp rel neq_non_zero_0
  12: 9 0 7 _              // [fp + 7] = 0
  13: 12 16 _ _            // jump abs neq_end_1
neq_non_zero_0:
  14: 9 1 7 _              // [fp + 7] = 1
neq_end_1:
  15: 14 7 2 _             // if [fp + 7] != 0 jmp rel array_sum_loop_2
  16: 12 28 _ _            // jump abs array_sum_loop_3
array_sum_loop_2:
  17: 6 6 2 23             // [fp + 23] = [fp + 6] * 2 - Scale index by element size
  18: 42 0 23 8            // [fp + 8] = [[fp + 0] + [fp + 23]]
  19: 4 23 1 24            // [fp + 24] = [fp + 23] + 1 (offset for slot 1)
  20: 42 0 24 9            // [fp + 9] = [[fp + 0] + [fp + 24]] (slot 1)
  21: 15 4 8 10            // u32([fp + 10], [fp + 11]) = u32([fp + 4], [fp + 5]) U32Add u32([fp + 8], [fp + 9])
  22: 4 6 1 12             // [fp + 12] = [fp + 6] + 1
  23: 19 10 0 0 4          // u32([fp + 4], [fp + 5]) = u32([fp + 10], [fp + 11]) + u32(0, 0)
  24: 4 12 0 6             // [fp + 6] = [fp + 12] + 0
  25: 12 11 _ _            // jump abs array_sum_loop_1
array_sum_loop_3:
  26: 4 4 0 2147483643     // Return value 0 slot 0: [fp -4] = [fp + 4] + 0
  27: 4 5 0 2147483644     // Return value 0 slot 1: [fp -3] = [fp + 5] + 0
  28: 11 _ _ _             // return

---
source: crates/compiler/codegen/tests/mdtest_snapshots.rs
description: "Codegen snapshot for mdtest: Arrays in Cairo-M - Array Iteration Pattern"
input_file: mdtest/01-basics/05-arrays.md
---
Source:
fn array_sum_loop() -> u32{
    let arr: [u32; 5] = [1, 2, 3, 4, 5];
    let sum: u32 = 0;
    let i = 0;
    while i != 5 {
        sum = sum + arr[i];
        i = i + 1;
    }
    return sum;
}
============================================================
Generated CASM:
array_sum_loop:
array_sum_loop:
array_sum_loop_0:
   0: 23 1 0 12            // [fp + 12], [fp + 13] = u32(1)
   1: 23 2 0 14            // [fp + 14], [fp + 15] = u32(2)
   2: 23 3 0 16            // [fp + 16], [fp + 17] = u32(3)
   3: 23 4 0 18            // [fp + 18], [fp + 19] = u32(4)
   4: 23 5 0 20            // [fp + 20], [fp + 21] = u32(5)
   5: 43 12 0 _            // [fp + 0] = fp + 12
   6: 23 0 0 1             // u32([fp + 1], [fp + 2]) = u32(0)
   7: 9 0 3 _              // [fp + 3] = 0
   8: 19 1 0 0 4           // u32([fp + 4], [fp + 5]) = u32([fp + 1], [fp + 2]) + u32(0, 0)
   9: 4 3 0 6              // [fp + 6] = [fp + 3] + 0
array_sum_loop_1:
  10: 4 6 2147483642 22    // [fp + 22] = [fp + 6] op 5
  11: 14 22 2 _            // if [fp + 22] != 0 jmp rel array_sum_loop_2
  12: 12 24 _ _            // jump abs array_sum_loop_3
array_sum_loop_2:
  13: 6 6 2 23             // [fp + 23] = [fp + 6] * 2 - Scale index by element size
  14: 42 0 23 7            // [fp + 7] = [[fp + 0] + [fp + 23]]
  15: 4 23 1 24            // [fp + 24] = [fp + 23] + 1 (offset for slot 1)
  16: 42 0 24 8            // [fp + 8] = [[fp + 0] + [fp + 24]] (slot 1)
  17: 15 4 7 9             // u32([fp + 9], [fp + 10]) = u32([fp + 4], [fp + 5]) U32Add u32([fp + 7], [fp + 8])
  18: 4 6 1 11             // [fp + 11] = [fp + 6] op 1
  19: 19 9 0 0 4           // u32([fp + 4], [fp + 5]) = u32([fp + 9], [fp + 10]) + u32(0, 0)
  20: 4 11 0 6             // [fp + 6] = [fp + 11] + 0
  21: 12 11 _ _            // jump abs array_sum_loop_1
array_sum_loop_3:
  22: 4 4 0 -4             // Return value 0 slot 0: [fp -4] = [fp + 4] + 0
  23: 4 5 0 -3             // Return value 0 slot 1: [fp -3] = [fp + 5] + 0
  24: 11 _ _ _             // return

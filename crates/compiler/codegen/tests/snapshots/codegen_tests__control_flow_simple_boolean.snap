---
source: crates/compiler/codegen/tests/codegen_tests.rs
expression: snapshot_content
---
---
source: crates/compiler/codegen/tests/codegen_tests.rs
expression: codegen_output
---
Fixture: simple_boolean.cm
============================================================
Source code:
func simple_eq() -> felt {
    let x = 10;
    let y = x == 20;
    return y;
}

func simple_neq() -> felt {
    let x = 10;
    let y = x != 20;
    return y;
}

func simple_and() -> felt {
    let x = 10;
    let y = x && 20;
    return y;
}

func simple_or() -> felt {
    let x = 10;
    let y = x || 20;
    return y;
}

============================================================
Generated CASM:
simple_eq:
simple_eq:
simple_eq_0:
   0: 6 10 _ 0             // Store immediate: [fp + 0] = 10
   1: 3 0 20 2             // [fp + 2] = [fp + 0] op 20
   2: 31 2 3 _             // if temp != 0, jump to not_zero
   3: 6 1 _ 1              // Set [fp + 1] to 1
   4: 20 6 _ _             // jump to end
not_zero_0:
   5: 6 0 _ 1              // Set [fp + 1] to 0
end_0:
   6: 4 1 _ 3              // Store: [fp + 3] = [fp + 1]
   7: 4 3 _ -3             // Return value: [fp - 3] = [fp + 3]
   8: 15 _ _ _             // return
simple_neq:
simple_neq:
simple_neq_0:
   9: 6 10 _ 0             // Store immediate: [fp + 0] = 10
  10: 3 0 20 1             // [fp + 1] = [fp + 0] op 20
  11: 4 1 _ 2              // Store: [fp + 2] = [fp + 1]
  12: 4 2 _ -3             // Return value: [fp - 3] = [fp + 2]
  13: 15 _ _ _             // return
simple_and:
simple_and:
simple_and_0:
  14: 6 10 _ 0             // Store immediate: [fp + 0] = 10
  15: 8 0 20 1             // [fp + 1] = [fp + 0] op 20
  16: 4 1 _ 2              // Store: [fp + 2] = [fp + 1]
  17: 4 2 _ -3             // Return value: [fp - 3] = [fp + 2]
  18: 15 _ _ _             // return
simple_or:
simple_or:
simple_or_0:
  19: 6 10 _ 0             // Store immediate: [fp + 0] = 10
  20: 31 0 3 _             // if left != 0, jump to set left_bool = 1
  21: 6 0 _ 2              // left_bool = 0
  22: 20 24 _ _            // jump to left_end
left_true_4:
  23: 6 1 _ 2              // left_bool = 1
left_end_4:
  24: 6 1 _ 3              // right_bool = 1
  25: 0 2 3 4              // sum = left_bool + right_bool
  26: 6 1 _ 5              // temp = 1
  27: 2 4 5 5              // temp = sum - 1
  28: 31 5 3 _             // if sum > 1, jump to clamp
  29: 4 4 _ 1              // result = sum
  30: 20 32 _ _            // jump to end
clamp_4:
  31: 6 1 _ 1              // result = 1 (clamped)
end_4:
  32: 4 1 _ 6              // Store: [fp + 6] = [fp + 1]
  33: 4 6 _ -3             // Return value: [fp - 3] = [fp + 6]
  34: 15 _ _ _             // return

---
source: crates/compiler/codegen/tests/mdtest_snapshots.rs
description: "Codegen snapshot for mdtest: Multiple Functions in Cairo-M - Helper Functions"
input_file: mdtest/04-advanced/02-multiple-functions.md
---
Source:
fn test_helpers() -> felt {
    let x = 5;
    let y = 3;
    return calculate_result(x, y);
}

fn calculate_result(a: felt, b: felt) -> felt {
    let sum = add_values(a, b);
    let product = multiply_values(a, b);
    return combine_results(sum, product);
}

fn add_values(x: felt, y: felt) -> felt {
    return x + y;
}

fn multiply_values(x: felt, y: felt) -> felt {
    return x * y;
}

fn combine_results(sum: felt, product: felt) -> felt {
    return sum * 10 + product;
}
============================================================
Generated CASM:
test_helpers:
test_helpers:
test_helpers_0:
   0: 9 5 0 _              // [fp + 0] = 5
   1: 9 3 4 _              // [fp + 4] = 3
   2: 4 0 0 5              // Arg 0 slot 0: [fp + 5] = [fp + 0] + 0
   3: 4 4 0 6              // Arg 1 slot 0: [fp + 6] = [fp + 4] + 0
   4: 10 8 7 _             // call calculate_result
   5: 4 7 0 -3             // Return value 0: [fp -3] = [fp + 7] + 0
   6: 11 _ _ _             // return
calculate_result:
calculate_result:
calculate_result_0:
   7: 4 -5 0 3             // Arg 0 slot 0: [fp + 3] = [fp + -5] + 0
   8: 4 -4 0 4             // Arg 1 slot 0: [fp + 4] = [fp + -4] + 0
   9: 10 6 18 _            // call add_values
  10: 4 -5 0 7             // Arg 0 slot 0: [fp + 7] = [fp + -5] + 0
  11: 4 -4 0 8             // Arg 1 slot 0: [fp + 8] = [fp + -4] + 0
  12: 10 10 20 _           // call multiply_values
  13: 4 5 0 11             // Arg 0 slot 0: [fp + 11] = [fp + 5] + 0
  14: 4 9 0 12             // Arg 1 slot 0: [fp + 12] = [fp + 9] + 0
  15: 10 14 22 _           // call combine_results
  16: 4 13 0 -3            // Return value 0: [fp -3] = [fp + 13] + 0
  17: 11 _ _ _             // return
add_values:
add_values:
add_values_0:
  18: 0 -5 -4 -3           // [fp + -3] = [fp + -5] op [fp + -4]
  19: 11 _ _ _             // return
multiply_values:
multiply_values:
multiply_values_0:
  20: 2 -5 -4 -3           // [fp + -3] = [fp + -5] op [fp + -4]
  21: 11 _ _ _             // return
combine_results:
combine_results:
combine_results_0:
  22: 6 -5 10 0            // [fp + 0] = [fp + -5] op 10
  23: 0 0 -4 -3            // [fp + -3] = [fp + 0] op [fp + -4]
  24: 11 _ _ _             // return

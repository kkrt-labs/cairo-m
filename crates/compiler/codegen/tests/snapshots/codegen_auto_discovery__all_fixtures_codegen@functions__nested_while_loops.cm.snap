---
source: crates/compiler/codegen/tests/codegen_auto_discovery.rs
description: Codegen snapshot for functions/nested_while_loops.cm
input_file: test_data/functions/nested_while_loops.cm
---
Fixture: functions/nested_while_loops.cm
============================================================
Source code:
fn nested_while_loops() -> felt {
    let i = 0;
    let j = 0;
    while (i != 10) {
        while (j != 10) {
            j = j + 1;
        }
        i = i + 1;
    }
    return i;
}

============================================================
Generated CASM:
nested_while_loops:
nested_while_loops:
nested_while_loops_0:
   0: 9 0 0 _              // [fp + 0] = 0
   1: 9 0 1 _              // [fp + 1] = 0
nested_while_loops_1:
   2: 5 0 10 4             // [fp + 4] = [fp + 0] op 10
   3: 14 4 2 _             // if [fp + 4] != 0 jmp rel nested_while_loops_2
   4: 12 6 _ _             // jump abs nested_while_loops_3
nested_while_loops_2:
   5: 12 8 _ _             // jump abs nested_while_loops_4
nested_while_loops_3:
   6: 4 0 0 -3             // Return value 0: [fp -3] = [fp + 0] + 0
   7: 11 _ _ _             // return
nested_while_loops_4:
   8: 5 1 10 5             // [fp + 5] = [fp + 1] op 10
   9: 14 5 2 _             // if [fp + 5] != 0 jmp rel nested_while_loops_5
  10: 12 14 _ _            // jump abs nested_while_loops_6
nested_while_loops_5:
  11: 4 1 0 6              // [fp + 6] = [fp + 1] + 0
  12: 4 6 1 1              // [fp + 1] = [fp + 6] op 1
  13: 12 8 _ _             // jump abs nested_while_loops_4
nested_while_loops_6:
  14: 4 0 0 6              // [fp + 6] = [fp + 0] + 0
  15: 4 6 1 0              // [fp + 0] = [fp + 6] op 1
  16: 12 2 _ _             // jump abs nested_while_loops_1

---
source: crates/compiler/codegen/tests/mdtest_snapshots.rs
description: "Codegen snapshot for mdtest: Loops in Cairo-M - Nested Loops"
input_file: mdtest/02-control-flow/02-loops.md
---
Source:
fn multiply_table() -> felt {
    let result = 0;
    for (let i = 1; i != 10; i = i + 1) {
        for (let j = 1; j != 10; j = j + 1) {
            result = result + (i * j);
        }
    }
    return result;
}
============================================================
Generated CASM:
multiply_table:
multiply_table:
multiply_table_0:
   0: 9 0 0 _              // [fp + 0] = 0
   1: 9 1 1 _              // [fp + 1] = 1
   2: 4 0 0 2              // [fp + 2] = [fp + 0] + 0
   3: 4 1 0 3              // [fp + 3] = [fp + 1] + 0
multiply_table_1:
   4: 4 3 2147483637 11    // [fp + 11] = [fp + 3] - 10 (-10 as M31 -> 2147483637 (=-10 mod M31))
   5: 14 11 2 _            // if [fp + 11] != 0 jmp rel multiply_table_2
   6: 12 15 _ _            // jump abs multiply_table_4
multiply_table_2:
   7: 9 1 4 _              // [fp + 4] = 1
   8: 4 4 0 5              // [fp + 5] = [fp + 4] + 0
   9: 4 2 0 6              // [fp + 6] = [fp + 2] + 0
  10: 12 17 _ _            // jump abs multiply_table_5
multiply_table_3:
  11: 4 3 1 7              // [fp + 7] = [fp + 3] + 1
  12: 4 6 0 2              // [fp + 2] = [fp + 6] + 0
  13: 4 7 0 3              // [fp + 3] = [fp + 7] + 0
  14: 12 4 _ _             // jump abs multiply_table_1
multiply_table_4:
  15: 4 2 0 -3             // Return value 0: [fp -3] = [fp + 2] + 0
  16: 11 _ _ _             // return
multiply_table_5:
  17: 4 5 2147483637 12    // [fp + 12] = [fp + 5] - 10 (-10 as M31 -> 2147483637 (=-10 mod M31))
  18: 14 12 2 _            // if [fp + 12] != 0 jmp rel multiply_table_6
  19: 12 26 _ _            // jump abs multiply_table_8
multiply_table_6:
  20: 2 3 5 8              // [fp + 8] = [fp + 3] op [fp + 5]
  21: 0 6 8 9              // [fp + 9] = [fp + 6] op [fp + 8]
multiply_table_7:
  22: 4 5 1 10             // [fp + 10] = [fp + 5] + 1
  23: 4 10 0 5             // [fp + 5] = [fp + 10] + 0
  24: 4 9 0 6              // [fp + 6] = [fp + 9] + 0
  25: 12 17 _ _            // jump abs multiply_table_5
multiply_table_8:
  26: 12 11 _ _            // jump abs multiply_table_3

---
source: crates/compiler/codegen/tests/mdtest_snapshots.rs
description: "Codegen snapshot for mdtest: Loops in Cairo-M - Nested Loops"
input_file: mdtest/02-control-flow/02-loops.md
---
Source:
fn multiply_table() -> felt {
    let result = 0;
    for (let i = 1; i != 10; i = i + 1) {
        for (let j = 1; j != 10; j = j + 1) {
            result = result + (i * j);
        }
    }
    return result;
}
============================================================
Generated CASM:
multiply_table:
multiply_table:
multiply_table_0:
   0: 9 0 0 _              // [fp + 0] = 0
   1: 9 1 1 _              // [fp + 1] = 1
   2: 4 0 0 2              // [fp + 2] = [fp + 0] + 0
   3: 4 1 0 3              // [fp + 3] = [fp + 1] + 0
multiply_table_1:
   4: 4 3 2147483637 4     // [fp + 4] = [fp + 3] + (-10) (-10 as M31 -> 2147483637 (=-10 mod M31))
   5: 14 4 3 _             // if [fp + 4] != 0 jmp rel neq_non_zero_0
   6: 9 0 4 _              // [fp + 4] = 0
   7: 13 2 _ _             // jump rel neq_end_1
neq_non_zero_0:
   8: 9 1 4 _              // [fp + 4] = 1
neq_end_1:
   9: 14 4 2 _             // if [fp + 4] != 0 jmp rel multiply_table_2
  10: 13 9 _ _             // jump rel multiply_table_4
multiply_table_2:
  11: 9 1 5 _              // [fp + 5] = 1
  12: 4 5 0 6              // [fp + 6] = [fp + 5] + 0
  13: 4 2 0 7              // [fp + 7] = [fp + 2] + 0
  14: 13 7 _ _             // jump rel multiply_table_5
multiply_table_3:
  15: 4 3 1 8              // [fp + 8] = [fp + 3] + 1
  16: 4 7 0 2              // [fp + 2] = [fp + 7] + 0
  17: 4 8 0 3              // [fp + 3] = [fp + 8] + 0
  18: 13 2147483633 _ _    // jump rel multiply_table_1
multiply_table_4:
  19: 4 2 0 2147483644     // Return value 0: [fp -3] = [fp + 2] + 0
  20: 11 _ _ _             // return
multiply_table_5:
  21: 4 6 2147483637 9     // [fp + 9] = [fp + 6] + (-10) (-10 as M31 -> 2147483637 (=-10 mod M31))
  22: 14 9 3 _             // if [fp + 9] != 0 jmp rel neq_non_zero_2
  23: 9 0 9 _              // [fp + 9] = 0
  24: 13 2 _ _             // jump rel neq_end_3
neq_non_zero_2:
  25: 9 1 9 _              // [fp + 9] = 1
neq_end_3:
  26: 14 9 2 _             // if [fp + 9] != 0 jmp rel multiply_table_6
  27: 13 7 _ _             // jump rel multiply_table_8
multiply_table_6:
  28: 2 3 6 10             // [fp + 10] = [fp + 3] op [fp + 6]
  29: 0 7 10 11            // [fp + 11] = [fp + 7] op [fp + 10]
multiply_table_7:
  30: 4 6 1 12             // [fp + 12] = [fp + 6] + 1
  31: 4 12 0 6             // [fp + 6] = [fp + 12] + 0
  32: 4 11 0 7             // [fp + 7] = [fp + 11] + 0
  33: 13 2147483635 _ _    // jump rel multiply_table_5
multiply_table_8:
  34: 13 2147483628 _ _    // jump rel multiply_table_3

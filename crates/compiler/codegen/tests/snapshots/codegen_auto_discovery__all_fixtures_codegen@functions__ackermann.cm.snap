---
source: crates/compiler/codegen/tests/codegen_auto_discovery.rs
description: Codegen snapshot for functions/ackermann.cm
input_file: test_data/functions/ackermann.cm
---
Fixture: functions/ackermann.cm
============================================================
Source code:
fn main() -> felt {
    let m = 2;
    let n = 2;
    let result = ackermann(m, n);
    return result;
}

fn ackermann(m: felt, n: felt) -> felt {
    if (m == 0) {
        return n + 1;
    }
    if (n == 0) {
        return ackermann(m - 1, 1);
    }
    return ackermann(m - 1, ackermann(m, n - 1));
}

============================================================
Generated CASM:
main:
   0: 9 2 0 _              // [fp + 0] = 2
   1: 9 2 4 _              // [fp + 4] = 2
   2: 4 0 0 5              // Arg 0 slot 0: [fp + 5] = [fp + 0] + 0
   3: 4 4 0 6              // Arg 1 slot 0: [fp + 6] = [fp + 4] + 0
   4: 10 8 7 _             // call ackermann
   5: 4 7 0 -3             // Return value 0: [fp -3] = [fp + 7] + 0
   6: 11 _ _ _             // return
ackermann:
   7: 14 -5 4 _            // if [fp + -5] != 0 jmp rel ackermann_2
   8: 12 9 _ _             // jump abs ackermann_1
ackermann_1:
   9: 4 -4 1 -3            // [fp + -3] = [fp + -4] op 1
  10: 11 _ _ _             // return
ackermann_2:
  11: 14 -4 8 _            // if [fp + -4] != 0 jmp rel ackermann_4
  12: 12 13 _ _            // jump abs ackermann_3
ackermann_3:
  13: 5 -5 1 7             // [fp + 7] = [fp + -5] op 1
  14: 4 7 0 8              // Arg 0 slot 0: [fp + 8] = [fp + 7] + 0
  15: 9 1 9 _              // Arg 1: [fp + 9] = 1
  16: 10 11 7 _            // call ackermann
  17: 4 10 0 -3            // Return value 0: [fp -3] = [fp + 10] + 0
  18: 11 _ _ _             // return
ackermann_4:
  19: 5 -5 1 3             // [fp + 3] = [fp + -5] op 1
  20: 5 -4 1 13            // [fp + 13] = [fp + -4] op 1
  21: 4 -5 0 14            // Arg 0 slot 0: [fp + 14] = [fp + -5] + 0
  22: 4 13 0 15            // Arg 1 slot 0: [fp + 15] = [fp + 13] + 0
  23: 10 17 7 _            // call ackermann
  24: 4 3 0 18             // Arg 0 slot 0: [fp + 18] = [fp + 3] + 0
  25: 4 16 0 19            // Arg 1 slot 0: [fp + 19] = [fp + 16] + 0
  26: 10 21 7 _            // call ackermann
  27: 4 20 0 -3            // Return value 0: [fp -3] = [fp + 20] + 0
  28: 11 _ _ _             // return

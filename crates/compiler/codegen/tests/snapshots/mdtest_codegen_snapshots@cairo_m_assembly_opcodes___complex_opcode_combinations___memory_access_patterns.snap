---
source: crates/compiler/codegen/tests/mdtest_snapshots.rs
description: "Codegen snapshot for mdtest: Cairo-M Assembly Opcodes - Complex Opcode Combinations - Memory Access Patterns"
input_file: mdtest/06-internals/01-opcodes.md
---
Source:
fn test_memory_patterns() -> u32 {
    // Store immediates
    let base_value: u32 = 100;
    let offset: u32 = 5;

    // Arithmetic operations creating intermediate values
    let intermediate1 = base_value * 2u32;
    let intermediate2 = base_value + offset;
    let intermediate3 = intermediate1 - intermediate2;

    // Complex expression combining multiple operations
    let final_result = (intermediate3 + 50u32) / 3u32;

    return final_result;
}
============================================================
Generated CASM:
test_memory_patterns:
test_memory_patterns:
test_memory_patterns_0:
   0: 23 100 0 0           // [fp + 0, fp + 0 + 1] = u32(100)
   1: 23 5 0 2             // [fp + 2, fp + 2 + 1] = u32(5)
   2: 21 0 2 0 4           // u32([fp + 4], [fp + 4 + 1]) = u32([fp + 0], [fp + 0 + 1]) op u32(2, 0)
   3: 15 0 2 6             // u32([fp + 6], [fp + 6 + 1]) = u32([fp + 0], [fp + 0 + 1]) op u32([fp + 2], [fp + 2 + 1])
   4: 16 4 6 8             // u32([fp + 8], [fp + 8 + 1]) = u32([fp + 4], [fp + 4 + 1]) op u32([fp + 6], [fp + 6 + 1])
   5: 19 8 50 0 10         // u32([fp + 10], [fp + 10 + 1]) = u32([fp + 8], [fp + 8 + 1]) op u32(50, 0)
   6: 22 10 3 0 12         // u32([fp + 12], [fp + 12 + 1]) = u32([fp + 10], [fp + 10 + 1]) op u32(3, 0)
   7: 4 12 0 -4            // Return value 0 slot 0: [fp -4] = [fp + 12] + 0
   8: 4 13 0 -3            // Return value 0 slot 1: [fp -3] = [fp + 13] + 0
   9: 11 _ _ _             // return

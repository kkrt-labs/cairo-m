---
source: crates/compiler/codegen/tests/codegen_auto_discovery.rs
description: Codegen snapshot for functions/fibonacci_loop.cm
input_file: test_data/functions/fibonacci_loop.cm
---
Fixture: functions/fibonacci_loop.cm
============================================================
Source code:
fn fibonacci_loop(n: felt) -> felt {
    let a = 0;
    let b = 1;
    let i = 0;
    while (i != n) {
        let temp = a + b;
        a = b;
        b = temp;
        i = i + 1;
    }
    return a;
}

============================================================
Generated CASM:
fibonacci_loop:
fibonacci_loop:
fibonacci_loop_0:
   0: 9 0 0 _              // [fp + 0] = 0
   1: 9 1 1 _              // [fp + 1] = 1
   2: 9 0 2 _              // [fp + 2] = 0
fibonacci_loop_1:
   3: 1 2 -4 5             // [fp + 5] = [fp + 2] op [fp + -4]
   4: 14 5 2 _             // if [fp + 5] != 0 jmp rel fibonacci_loop_2
   5: 12 12 _ _            // jump abs fibonacci_loop_3
fibonacci_loop_2:
   6: 0 0 1 3              // [fp + 3] = [fp + 0] op [fp + 1]
   7: 4 1 0 0              // Store: [fp + 0] = [fp + 1] + 0
   8: 4 3 0 1              // Store: [fp + 1] = [fp + 3] + 0
   9: 4 2 0 6              // [fp + 6] = [fp + 2] + 0
  10: 4 6 1 2              // [fp + 2] = [fp + 6] op 1
  11: 12 3 _ _             // jump abs fibonacci_loop_1
fibonacci_loop_3:
  12: 4 0 0 -3             // Return value 0: [fp -3] = [fp + 0] + 0
  13: 11 _ _ _             // return

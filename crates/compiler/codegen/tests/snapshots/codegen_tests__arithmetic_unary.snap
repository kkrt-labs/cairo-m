---
source: crates/compiler/codegen/tests/codegen_tests.rs
expression: snapshot_content
---
---
source: crates/compiler/codegen/tests/codegen_tests.rs
expression: codegen_output
---
Fixture: unary.cm
============================================================
Source code:
// Tests various unary operations.
fn test_neg(a: felt) -> felt {
    let c = -a;
    return c;
}

fn test_not(a: bool) -> bool {
    let c = !a;
    return c;
}

fn test_neg_literal() -> felt {
    let c = -42;
    return c;
}

fn test_not_literal_nonzero() -> bool {
    let c = !true;
    return c;
}

fn test_double_neg(a: felt) -> felt {
    let c = --a;
    return c;
}

fn test_not_not(a: bool) -> bool {
    let c = !!a;
    return c;
}

============================================================
Generated CASM:
test_neg:
test_neg:
test_neg_0:
   0: 9 0 1 _              // [fp + 1] = 0
   3: 1 1 -4 -3            // [fp + -3] = [fp + 1] op [fp + -4]
   7: 11 _ _ _             // return
test_not:
test_not_0:
   8: 14 -4 8 _            // if [fp + -4] != 0, jump to not_zero_0
  11: 9 1 -3 _             // [fp + -3] = 1
  14: 12 19 _ _            // jump to not_end_1
not_zero_0:
  16: 9 0 -3 _             // [fp + -3] = 0
not_end_1:
  19: 11 _ _ _             // return
test_not:
test_neg_literal:
test_neg_literal_0:
  20: 9 2147483605 -3 _    // [fp + -3] = 2147483605
  23: 11 _ _ _             // return
test_not_literal_nonzero:
test_not_literal_nonzero_0:
  24: 9 1 -3 _             // [fp + -3] = true
  27: 11 _ _ _             // return
test_double_neg:
test_double_neg_0:
  28: 9 0 2 _              // [fp + 2] = 0
  31: 1 2 -4 0             // [fp + 0] = [fp + 2] op [fp + -4]
  35: 9 0 3 _              // [fp + 3] = 0
  38: 1 3 0 -3             // [fp + -3] = [fp + 3] op [fp + 0]
  42: 11 _ _ _             // return
test_not_not:
test_not_not_0:
  43: 14 -4 8 _            // if [fp + -4] != 0, jump to not_zero_20
  46: 9 1 0 _              // [fp + 0] = 1
  49: 12 54 _ _            // jump to not_end_21
test_neg_literal:
not_zero_20:
  51: 9 0 0 _              // [fp + 0] = 0
not_end_21:
  54: 14 0 8 _             // if [fp + 0] != 0, jump to not_zero_22
  57: 9 1 -3 _             // [fp + -3] = 1
  60: 12 65 _ _            // jump to not_end_23
test_not_literal_nonzero:
not_zero_22:
  62: 9 0 -3 _             // [fp + -3] = 0
not_end_23:
  65: 11 _ _ _             // return

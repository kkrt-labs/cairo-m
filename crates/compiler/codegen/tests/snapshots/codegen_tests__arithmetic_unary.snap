---
source: crates/compiler/codegen/tests/codegen_tests.rs
expression: snapshot_content
---
---
source: crates/compiler/codegen/tests/codegen_tests.rs
expression: codegen_output
---
Fixture: unary.cm
============================================================
Source code:
// Tests various unary operations.
fn test_neg(a: felt) -> felt {
    let c = -a;
    return c;
}

fn test_not(a: bool) -> bool {
    let c = !a;
    return c;
}

fn test_neg_literal() -> felt {
    let c = -42;
    return c;
}

fn test_not_literal_nonzero() -> bool {
    let c = !true;
    return c;
}

fn test_double_neg(a: felt) -> felt {
    let c = --a;
    return c;
}

fn test_not_not(a: bool) -> bool {
    let c = !!a;
    return c;
}

============================================================
Generated CASM:
test_neg:
test_neg:
test_neg_0:
   0: 9 0 2 _              // [fp + 2] = 0
   3: 1 2 -4 0             // [fp + 0] = [fp + 2] op [fp + -4]
   7: 4 0 0 1              // Store: [fp + 1] = [fp + 0] + 0
  11: 4 1 0 -3             // Return value 0: [fp -3] = [fp + 1] + 0
  15: 11 _ _ _             // return
test_not:
test_not_0:
  16: 14 -4 8 _            // if [fp + -4] != 0, jump to not_zero_0
  19: 9 1 0 _              // [fp + 0] = 1
  22: 12 27 _ _            // jump to not_end_1
not_zero_0:
  24: 9 0 0 _              // [fp + 0] = 0
not_end_1:
  27: 4 0 0 1              // Store: [fp + 1] = [fp + 0] + 0
  31: 4 1 0 -3             // Return value 0: [fp -3] = [fp + 1] + 0
  35: 11 _ _ _             // return
test_neg_literal:
test_neg_literal_0:
  36: 9 2147483605 0 _     // [fp + 0] = 2147483605
  39: 4 0 0 1              // Store: [fp + 1] = [fp + 0] + 0
  43: 4 1 0 -3             // Return value 0: [fp -3] = [fp + 1] + 0
  47: 11 _ _ _             // return
test_not:
test_not_literal_nonzero:
test_not_literal_nonzero_0:
  48: 9 0 0 _              // [fp + 0] = 0
  51: 4 0 0 1              // Store: [fp + 1] = [fp + 0] + 0
  55: 4 1 0 -3             // Return value 0: [fp -3] = [fp + 1] + 0
  59: 11 _ _ _             // return
test_double_neg:
test_double_neg_0:
  60: 9 0 3 _              // [fp + 3] = 0
  63: 1 3 -4 0             // [fp + 0] = [fp + 3] op [fp + -4]
  67: 9 0 4 _              // [fp + 4] = 0
  70: 1 4 0 1              // [fp + 1] = [fp + 4] op [fp + 0]
  74: 4 1 0 2              // Store: [fp + 2] = [fp + 1] + 0
  78: 4 2 0 -3             // Return value 0: [fp -3] = [fp + 2] + 0
  82: 11 _ _ _             // return
test_not_not:
test_not_not_0:
  83: 14 -4 8 _            // if [fp + -4] != 0, jump to not_zero_20
  86: 9 1 0 _              // [fp + 0] = 1
  89: 12 94 _ _            // jump to not_end_21
not_zero_20:
  91: 9 0 0 _              // [fp + 0] = 0
not_end_21:
  94: 14 0 8 _             // if [fp + 0] != 0, jump to not_zero_22
  97: 9 1 1 _              // [fp + 1] = 1
 100: 12 105 _ _           // jump to not_end_23
not_zero_22:
 102: 9 0 1 _              // [fp + 1] = 0
not_end_23:
 105: 4 1 0 2              // Store: [fp + 2] = [fp + 1] + 0
test_neg_literal:
 109: 4 2 0 -3             // Return value 0: [fp -3] = [fp + 2] + 0
 113: 11 _ _ _             // return

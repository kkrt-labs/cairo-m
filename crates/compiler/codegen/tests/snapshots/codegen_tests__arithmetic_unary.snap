---
source: crates/compiler/codegen/tests/codegen_tests.rs
expression: snapshot_content
---
---
source: crates/compiler/codegen/tests/codegen_tests.rs
expression: codegen_output
---
Fixture: unary.cm
============================================================
Source code:
// Tests various unary operations.
fn test_neg(a: felt) -> felt {
    let c = -a;
    return c;
}

fn test_not(a: felt) -> felt {
    let c = !a;
    return c;
}

fn test_neg_literal() -> felt {
    let c = -42;
    return c;
}

fn test_not_literal_nonzero() -> felt {
    let c = !5;
    return c;
}

fn test_double_neg(a: felt) -> felt {
    let c = --a;
    return c;
}

fn test_not_not(a: felt) -> felt {
    let c = !!a;
    return c;
}

============================================================
Generated CASM:
test_neg:
test_neg:
test_neg_0:
   0: 9 0 2 _              // [fp + 2] = 0
   1: 1 2 -4 0             // [fp + 0] = [fp + 2] op [fp + -4]
   2: 4 0 0 1              // Store: [fp + 1] = [fp + 0] + 0
   3: 4 1 0 -3             // Return value 0: [fp -3] = [fp + 1] + 0
   4: 11 _ _ _             // return
test_not:
test_not:
test_not_0:
   5: 14 -4 3 _            // if [fp + -4] != 0, jump to not_zero_0
   6: 9 1 0 _              // [fp + 0] = 1
   7: 12 9 _ _             // jump to not_end_1
not_zero_0:
   8: 9 0 0 _              // [fp + 0] = 0
not_end_1:
   9: 4 0 0 1              // Store: [fp + 1] = [fp + 0] + 0
  10: 4 1 0 -3             // Return value 0: [fp -3] = [fp + 1] + 0
  11: 11 _ _ _             // return
test_neg_literal:
test_neg_literal:
test_neg_literal_0:
  12: 9 2147483605 0 _     // [fp + 0] = 2147483605
  13: 4 0 0 1              // Store: [fp + 1] = [fp + 0] + 0
  14: 4 1 0 -3             // Return value 0: [fp -3] = [fp + 1] + 0
  15: 11 _ _ _             // return
test_not_literal_nonzero:
test_not_literal_nonzero:
test_not_literal_nonzero_0:
  16: 9 0 0 _              // [fp + 0] = 0
  17: 4 0 0 1              // Store: [fp + 1] = [fp + 0] + 0
  18: 4 1 0 -3             // Return value 0: [fp -3] = [fp + 1] + 0
  19: 11 _ _ _             // return
test_double_neg:
test_double_neg:
test_double_neg_0:
  20: 9 0 3 _              // [fp + 3] = 0
  21: 1 3 -4 0             // [fp + 0] = [fp + 3] op [fp + -4]
  22: 9 0 4 _              // [fp + 4] = 0
  23: 1 4 0 1              // [fp + 1] = [fp + 4] op [fp + 0]
  24: 4 1 0 2              // Store: [fp + 2] = [fp + 1] + 0
  25: 4 2 0 -3             // Return value 0: [fp -3] = [fp + 2] + 0
  26: 11 _ _ _             // return
test_not_not:
test_not_not:
test_not_not_0:
  27: 14 -4 3 _            // if [fp + -4] != 0, jump to not_zero_20
  28: 9 1 0 _              // [fp + 0] = 1
  29: 12 31 _ _            // jump to not_end_21
not_zero_20:
  30: 9 0 0 _              // [fp + 0] = 0
not_end_21:
  31: 14 0 3 _             // if [fp + 0] != 0, jump to not_zero_22
  32: 9 1 1 _              // [fp + 1] = 1
  33: 12 35 _ _            // jump to not_end_23
not_zero_22:
  34: 9 0 1 _              // [fp + 1] = 0
not_end_23:
  35: 4 1 0 2              // Store: [fp + 2] = [fp + 1] + 0
  36: 4 2 0 -3             // Return value 0: [fp -3] = [fp + 2] + 0
  37: 11 _ _ _             // return

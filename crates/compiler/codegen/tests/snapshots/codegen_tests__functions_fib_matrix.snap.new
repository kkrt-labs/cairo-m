---
source: crates/compiler/codegen/tests/codegen_tests.rs
assertion_line: 151
expression: snapshot_content
---
---
source: crates/compiler/codegen/tests/codegen_tests.rs
expression: codegen_output
---
Fixture: fib_matrix.cm
============================================================
Source code:
struct Matrix{
    a: felt,
    b: felt,
    c: felt,
    d: felt,
}

func matrix_mul(A: Matrix, B: Matrix){
    return Matrix{a: A.a * B.a + A.b * B.c,
                  b: A.a * B.b + A.b * B.d,
                  c: A.c * B.a + A.d * B.c,
                  d: A.c * B.d + A.d * B.d,
    };
}

============================================================
Generated CASM:
matrix_mul:
matrix_mul:
matrix_mul_0:
   0: 4 -5 _ 4             // [fp + 4] = [fp + -5]
   1: 4 -4 _ 5             // [fp + 5] = [fp + -4]
   2: 7 4 5 6              // [fp + 6] = [fp + 4] op [fp + 5]
   3: 4 -4 _ 7             // [fp + 7] = [fp + -4]
   4: 4 -2 _ 8             // [fp + 8] = [fp + -2]
   5: 7 7 8 9              // [fp + 9] = [fp + 7] op [fp + 8]
   6: 0 6 9 10             // [fp + 10] = [fp + 6] op [fp + 9]
   7: 4 10 _ 0             // [fp + 0] = [fp + 10]
   8: 4 -5 _ 11            // [fp + 11] = [fp + -5]
   9: 4 -3 _ 12            // [fp + 12] = [fp + -3]
  10: 7 11 12 13           // [fp + 13] = [fp + 11] op [fp + 12]
  11: 4 -4 _ 14            // [fp + 14] = [fp + -4]
  12: 4 -1 _ 15            // [fp + 15] = [fp + -1]
  13: 7 14 15 16           // [fp + 16] = [fp + 14] op [fp + 15]
  14: 0 13 16 17           // [fp + 17] = [fp + 13] op [fp + 16]
  15: 4 17 _ 1             // [fp + 1] = [fp + 17]
  16: 4 -3 _ 18            // [fp + 18] = [fp + -3]
  17: 4 -4 _ 19            // [fp + 19] = [fp + -4]
  18: 7 18 19 20           // [fp + 20] = [fp + 18] op [fp + 19]
  19: 4 -2 _ 21            // [fp + 21] = [fp + -2]
  20: 4 -2 _ 22            // [fp + 22] = [fp + -2]
  21: 7 21 22 23           // [fp + 23] = [fp + 21] op [fp + 22]
  22: 0 20 23 24           // [fp + 24] = [fp + 20] op [fp + 23]
  23: 4 24 _ 2             // [fp + 2] = [fp + 24]
  24: 4 -3 _ 25            // [fp + 25] = [fp + -3]
  25: 4 -1 _ 26            // [fp + 26] = [fp + -1]
  26: 7 25 26 27           // [fp + 27] = [fp + 25] op [fp + 26]
  27: 4 -2 _ 28            // [fp + 28] = [fp + -2]
  28: 4 -1 _ 29            // [fp + 29] = [fp + -1]
  29: 7 28 29 30           // [fp + 30] = [fp + 28] op [fp + 29]
  30: 0 27 30 31           // [fp + 31] = [fp + 27] op [fp + 30]
  31: 4 31 _ 3             // [fp + 3] = [fp + 31]
  32: 4 0 _ -3             // Return value 0: [fp -3] = [fp + 0]
  33: 15 _ _ _             // return

---
source: crates/compiler/codegen/tests/codegen_tests.rs
expression: snapshot_content
---
---
source: crates/compiler/codegen/tests/codegen_tests.rs
expression: codegen_output
---
Fixture: complex_condition.cm
============================================================
Source code:
func complex_condition() -> felt {
    let x = 10;
    let y = 5;
    let cond = x == 2 && y != 3;
    if (cond || x == y){
        return 0;
    } else {
        return 1;
    }
}

============================================================
Generated CASM:
complex_condition:
complex_condition:
complex_condition_0:
   0: 6 10 _ 0             // Store immediate: [fp + 0] = 10
   1: 6 5 _ 1              // Store immediate: [fp + 1] = 5
   2: 3 0 2 2              // [fp + 2] = [fp + 0] op 2
   3: 31 2 3 _             // if temp != 0, jump to not_zero
   4: 6 1 _ 2              // Set [fp + 2] to 1
   5: 20 7 _ _             // jump to end
not_zero_0:
   6: 6 0 _ 2              // Set [fp + 2] to 0
end_1:
   7: 3 1 3 3              // [fp + 3] = [fp + 1] op 3
   8: 31 3 3 _             // if temp != 0, jump to set result to 1
   9: 6 0 _ 3              // Set NEQ result to 0
  10: 20 12 _ _            // jump to end
neq_non_zero_2:
  11: 6 1 _ 3              // Set NEQ result to 1
neq_end_3:
  12: 7 2 3 4              // [fp + 4] = [fp + 2] op [fp + 3]
  13: 31 4 3 _             // if temp != 0, jump to set result to 1
  14: 6 0 _ 4              // Set AND result to 0
  15: 20 17 _ _            // jump to end
and_non_zero_4:
  16: 6 1 _ 4              // Set AND result to 1
and_end_5:
  17: 4 4 _ 5              // Store: [fp + 5] = [fp + 4]
  18: 2 0 1 6              // [fp + 6] = [fp + 0] op [fp + 1]
  19: 31 6 3 _             // if temp != 0, jump to not_zero
  20: 6 1 _ 6              // Set [fp + 6] to 1
  21: 20 23 _ _            // jump to end
not_zero_6:
  22: 6 0 _ 6              // Set [fp + 6] to 0
end_7:
  23: 6 0 _ 7              // Initialize OR result to 0
  24: 31 5 3 _             // if left != 0, set result to 1
  25: 31 6 2 _             // if right != 0, set result to 1
  26: 20 28 _ _            // Both operands were 0, keep result as 0
or_true_8:
  27: 6 1 _ 7              // Set OR result to 1
or_end_9:
  28: 31 7 2 _             // if [fp + 7] != 0 jmp rel complex_condition_1
  29: 20 32 _ _            // jump abs complex_condition_2
complex_condition_1:
  30: 6 0 _ -3             // Return value: [fp - 3] = 0
  31: 15 _ _ _             // return
complex_condition_2:
  32: 6 1 _ -3             // Return value: [fp - 3] = 1
  33: 15 _ _ _             // return

---
source: crates/compiler/codegen/tests/codegen_tests.rs
expression: snapshot_content
---
---
source: crates/compiler/codegen/tests/codegen_tests.rs
expression: codegen_output
---
Fixture: complex_condition.cm
============================================================
Source code:
func complex_condition() -> felt {
    let x = 10;
    let y = 5;
    let cond = x == 2 && y != 3;
    if (cond || x == y){
        return 0;
    } else {
        return 1;
    }
}

============================================================
Generated CASM:
complex_condition:
complex_condition:
complex_condition_0:
   0: 6 10 _ 0             // Store immediate: [fp + 0] = 10
   1: 6 5 _ 1              // Store immediate: [fp + 1] = 5
   2: 3 0 2 3              // [fp + 3] = [fp + 0] op 2
   3: 31 3 3 _             // if temp != 0, jump to not_zero
   4: 6 1 _ 2              // Set [fp + 2] to 1
   5: 20 7 _ _             // jump to end
not_zero_0:
   6: 6 0 _ 2              // Set [fp + 2] to 0
end_0:
   7: 3 1 3 4              // [fp + 4] = [fp + 1] op 3
   8: 7 2 4 5              // [fp + 5] = [fp + 2] op [fp + 4]
   9: 4 5 _ 6              // Store: [fp + 6] = [fp + 5]
  10: 2 0 1 3              // [fp + 3] = [fp + 0] op [fp + 1]
  11: 31 3 3 _             // if temp != 0, jump to not_zero
  12: 6 1 _ 7              // Set [fp + 7] to 1
  13: 20 15 _ _            // jump to end
not_zero_1:
  14: 6 0 _ 7              // Set [fp + 7] to 0
end_1:
  15: 31 6 3 _             // if left != 0, jump to set left_bool = 1
  16: 6 0 _ 3              // left_bool = 0
  17: 20 19 _ _            // jump to left_end
left_true_2:
  18: 6 1 _ 3              // left_bool = 1
left_end_2:
  19: 31 7 3 _             // if right != 0, jump to set right_bool = 1
  20: 6 0 _ 9              // right_bool = 0
  21: 20 23 _ _            // jump to right_end
right_true_2:
  22: 6 1 _ 9              // right_bool = 1
right_end_2:
  23: 0 3 9 10             // sum = left_bool + right_bool
  24: 6 1 _ 11             // temp = 1
  25: 2 10 11 11           // temp = sum - 1
  26: 31 11 3 _            // if sum > 1, jump to clamp
  27: 4 10 _ 8             // result = sum
  28: 20 30 _ _            // jump to end
clamp_2:
  29: 6 1 _ 8              // result = 1 (clamped)
end_2:
  30: 31 8 2 _             // if [fp + 8] != 0 jmp rel complex_condition_1
  31: 20 34 _ _            // jump abs complex_condition_2
complex_condition_1:
  32: 6 0 _ -3             // Return value: [fp - 3] = 0
  33: 15 _ _ _             // return
complex_condition_2:
  34: 6 1 _ -3             // Return value: [fp - 3] = 1
  35: 15 _ _ _             // return

---
source: crates/compiler/codegen/tests/codegen_tests.rs
expression: snapshot_content
---
---
source: crates/compiler/codegen/tests/codegen_tests.rs
expression: codegen_output
---
Fixture: complex_condition.cm
============================================================
Source code:
fn complex_condition() -> felt {
    let x = 10;
    let y = 5;
    let cond = x == 2 && y != 3;
    if (cond || x == y){
        return 0;
    } else {
        return 1;
    }
}

============================================================
Generated CASM:
complex_condition:
complex_condition:
complex_condition_0:
   0: 9 10 0 _             // [fp + 0] = 10
   3: 9 5 1 _              // [fp + 1] = 5
   6: 5 0 2 2              // [fp + 2] = [fp + 0] op 2
  10: 14 2 8 _             // if [fp + 2] != 0, jump to not_zero_0
  13: 9 1 2 _              // [fp + 2] = 1
  16: 12 21 _ _            // jump to end_1
not_zero_0:
  18: 9 0 2 _              // [fp + 2] = 0
end_1:
  21: 5 1 3 3              // [fp + 3] = [fp + 1] op 3
  25: 14 3 8 _             // if [fp + 3] != 0, jump to neq_non_zero_2
  28: 9 0 3 _              // [fp + 3] = 0
  31: 12 36 _ _            // jump to neq_end_3
neq_non_zero_2:
  33: 9 1 3 _              // [fp + 3] = 1
neq_end_3:
  36: 2 2 3 4              // [fp + 4] = [fp + 2] op [fp + 3]
  40: 14 4 8 _             // if [fp + 4] != 0, jump to and_non_zero_4
  43: 9 0 4 _              // [fp + 4] = 0
  46: 12 51 _ _            // jump to and_end_5
and_non_zero_4:
  48: 9 1 4 _              // [fp + 4] = 1
and_end_5:
  51: 1 0 1 5              // [fp + 5] = [fp + 0] op [fp + 1]
  55: 14 5 8 _             // if [fp + 5] != 0, jump to not_zero_6
  58: 9 1 5 _              // [fp + 5] = 1
  61: 12 66 _ _            // jump to end_7
not_zero_6:
  63: 9 0 5 _              // [fp + 5] = 0
end_7:
  66: 9 0 6 _              // Initialize OR result to 0
  69: 14 4 8 _             // if [fp + 4] != 0, jump to or_true_8
  72: 14 5 5 _             // if [fp + 5] != 0, jump to or_true_8
  75: 12 80 _ _            // jump to or_end_9
or_true_8:
  77: 9 1 6 _              // [fp + 6] = 1
or_end_9:
  80: 14 6 5 _             // if [fp + 6] != 0 jmp rel complex_condition_1
  83: 12 89 _ _            // jump abs complex_condition_2
complex_condition_1:
  85: 9 0 -3 _             // Return value 0: [fp -3] = 0
  88: 11 _ _ _             // return
complex_condition_2:
  89: 9 1 -3 _             // Return value 0: [fp -3] = 1
  92: 11 _ _ _             // return

---
source: crates/compiler/codegen/tests/codegen_tests.rs
expression: snapshot_content
---
---
source: crates/compiler/codegen/tests/codegen_tests.rs
expression: codegen_output
---
Fixture: complex_condition.cm
============================================================
Source code:
func complex_condition() -> felt {
    let x = 10;
    let y = 5;
    let cond = x == 2 && y != 3;
    if (cond || x == y){
        return 0;
    } else {
        return 1;
    }
}

============================================================
Generated CASM:
complex_condition:
complex_condition:
complex_condition_0:
   0: 6 10 _ 0             // Store immediate: [fp + 0] = 10
   1: 6 5 _ 1              // Store immediate: [fp + 1] = 5
   2: 3 0 2 2              // [fp + 2] = [fp + 0] op 2
   3: 15 2 3 _             // if [fp + 2] != 0, jump to not_zero_0
   4: 6 1 _ 2              // [fp + 2] = 1
   5: 13 7 _ _             // jump to end_1
not_zero_0:
   6: 6 0 _ 2              // [fp + 2] = 0
end_1:
   7: 3 1 3 3              // [fp + 3] = [fp + 1] op 3
   8: 15 3 3 _             // if [fp + 3] != 0, jump to neq_non_zero_2
   9: 6 0 _ 3              // [fp + 3] = 0
  10: 13 12 _ _            // jump to neq_end_3
neq_non_zero_2:
  11: 6 1 _ 3              // [fp + 3] = 1
neq_end_3:
  12: 7 2 3 4              // [fp + 4] = [fp + 2] op [fp + 3]
  13: 15 4 3 _             // if [fp + 4] != 0, jump to and_non_zero_4
  14: 6 0 _ 4              // [fp + 4] = 0
  15: 13 17 _ _            // jump to and_end_5
and_non_zero_4:
  16: 6 1 _ 4              // [fp + 4] = 1
and_end_5:
  17: 3 0 2 5              // [fp + 5] = [fp + 0] op 2
  18: 15 5 3 _             // if [fp + 5] != 0, jump to not_zero_6
  19: 6 1 _ 5              // [fp + 5] = 1
  20: 13 22 _ _            // jump to end_7
not_zero_6:
  21: 6 0 _ 5              // [fp + 5] = 0
end_7:
  22: 3 1 3 6              // [fp + 6] = [fp + 1] op 3
  23: 15 6 3 _             // if [fp + 6] != 0, jump to neq_non_zero_8
  24: 6 0 _ 6              // [fp + 6] = 0
  25: 13 27 _ _            // jump to neq_end_9
neq_non_zero_8:
  26: 6 1 _ 6              // [fp + 6] = 1
neq_end_9:
  27: 7 5 6 7              // [fp + 7] = [fp + 5] op [fp + 6]
  28: 15 7 3 _             // if [fp + 7] != 0, jump to and_non_zero_10
  29: 6 0 _ 7              // [fp + 7] = 0
  30: 13 32 _ _            // jump to and_end_11
and_non_zero_10:
  31: 6 1 _ 7              // [fp + 7] = 1
and_end_11:
  32: 4 7 _ 8              // Store: [fp + 8] = [fp + 7]
  33: 2 0 1 9              // [fp + 9] = [fp + 0] op [fp + 1]
  34: 15 9 3 _             // if [fp + 9] != 0, jump to not_zero_12
  35: 6 1 _ 9              // [fp + 9] = 1
  36: 13 38 _ _            // jump to end_13
not_zero_12:
  37: 6 0 _ 9              // [fp + 9] = 0
end_13:
  38: 6 0 _ 10             // Initialize OR result to 0
  39: 15 8 3 _             // if [fp + 8] != 0, jump to or_true_14
  40: 15 9 2 _             // if [fp + 9] != 0, jump to or_true_14
  41: 13 43 _ _            // jump to or_end_15
or_true_14:
  42: 6 1 _ 10             // [fp + 10] = 1
or_end_15:
  43: 15 10 2 _            // if [fp + 10] != 0 jmp rel complex_condition_1
  44: 13 47 _ _            // jump abs complex_condition_2
complex_condition_1:
  45: 6 0 _ -3             // Return value 0: [fp -3] = 0
  46: 12 _ _ _             // return
complex_condition_2:
  47: 6 1 _ -3             // Return value 0: [fp -3] = 1
  48: 12 _ _ _             // return

---
source: crates/compiler/codegen/tests/codegen_tests.rs
expression: snapshot_content
---
---
source: crates/compiler/codegen/tests/codegen_tests.rs
expression: codegen_output
---
Fixture: fib_loop.cm
============================================================
Source code:
fn fibonacci_loop(n: felt) -> felt {
    let a = 0;
    let b = 1;
    let i = 0;
    while (i != n) {
        let temp = a + b;
        a = b;
        b = temp;
        i = i + 1;
    }
    return a;
}

fn main() -> felt {
    let n = 10;
    let result = fibonacci_loop(n);
    return result;
}

============================================================
Generated CASM:
fibonacci_loop:
fibonacci_loop:
fibonacci_loop_0:
   0: 9 0 0 _              // [fp + 0] = 0
   3: 9 1 1 _              // [fp + 1] = 1
   6: 9 0 2 _              // [fp + 2] = 0
fibonacci_loop_1:
   9: 1 2 -4 5             // [fp + 5] = [fp + 2] op [fp + -4]
  13: 14 5 5 _             // if [fp + 5] != 0 jmp rel fibonacci_loop_2
  16: 12 40 _ _            // jump abs fibonacci_loop_3
fibonacci_loop_2:
  18: 0 0 1 3              // [fp + 3] = [fp + 0] op [fp + 1]
  22: 4 1 0 0              // Store: [fp + 0] = [fp + 1] + 0
  26: 4 3 0 1              // Store: [fp + 1] = [fp + 3] + 0
  30: 4 2 0 6              // [fp + 6] = [fp + 2] + 0
  34: 4 6 1 2              // [fp + 2] = [fp + 6] op 1
  38: 12 9 _ _             // jump abs fibonacci_loop_1
fibonacci_loop_3:
  40: 4 0 0 -3             // Return value 0: [fp -3] = [fp + 0] + 0
  44: 11 _ _ _             // return
main:
  45: 9 10 3 _             // Direct arg placement: [fp + 3] = 10
  48: 10 5 0 _             // call fibonacci_loop
  51: 4 4 0 2              // Store: [fp + 2] = [fp + 4] + 0
  55: 4 2 0 -3             // Return value 0: [fp -3] = [fp + 2] + 0
  59: 11 _ _ _             // return

---
source: crates/compiler/codegen/tests/codegen_tests.rs
expression: snapshot_content
---
---
source: crates/compiler/codegen/tests/codegen_tests.rs
expression: codegen_output
---
Fixture: jump_offsets.cm
============================================================
Source code:
// Test case to verify jump offset calculation
// Even though we don't generate variable-sized instructions yet,
// this test verifies the infrastructure is in place

fn test_jumps(x: felt) -> felt {
    let a = x + 1;
    
    if (a == 0) {
        // This jump should use physical addresses
        return 1;
    }
    
    let b = a + 2;
    
    if (b == 0) {
        // Another jump to test multiple jumps
        return 2;
    }
    
    return b;
}

fn main() -> felt {
    return test_jumps(5);
}
============================================================
Generated CASM:
test_jumps:
test_jumps:
test_jumps_0:
   0: 4 -4 1 0             // [fp + 0] = [fp + -4] op 1
   1: 14 0 4 _             // if [fp + 0] != 0 jmp rel test_jumps_2
   2: 12 3 _ _             // jump abs test_jumps_1
test_jumps_1:
   3: 9 1 -3 _             // Return value 0: [fp -3] = 1
   4: 11 _ _ _             // return
test_jumps_2:
   5: 4 0 2 1              // [fp + 1] = [fp + 0] op 2
   6: 14 1 4 _             // if [fp + 1] != 0 jmp rel test_jumps_4
   7: 12 8 _ _             // jump abs test_jumps_3
test_jumps_3:
   8: 9 2 -3 _             // Return value 0: [fp -3] = 2
   9: 11 _ _ _             // return
test_jumps_4:
  10: 4 1 0 -3             // Return value 0: [fp -3] = [fp + 1] + 0
  11: 11 _ _ _             // return
main:
  12: 9 5 0 _              // Arg 0: [fp + 0] = 5
  13: 10 2 0 _             // call test_jumps
  14: 4 1 0 -3             // Return value 0: [fp -3] = [fp + 1] + 0
  15: 11 _ _ _             // return

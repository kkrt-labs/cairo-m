---
source: crates/compiler/codegen/tests/codegen_tests.rs
expression: snapshot_content
---
---
source: crates/compiler/codegen/tests/codegen_tests.rs
expression: codegen_output
---
Fixture: mutual_recursion.cm
============================================================
Source code:
fn main() -> felt {
    let n = 42;
    let even_result = is_even(n);
    let odd_result = is_odd(n);
    return even_result * 100 + odd_result;
}

fn is_even(n: felt) -> felt {
    if (n == 0) {
        return 1;
    }
    return is_odd(n - 1);
}

fn is_odd(n: felt) -> felt {
    if (n == 0) {
        return 0;
    }
    return is_even(n - 1);
}

============================================================
Generated CASM:
main:
   0: 9 42 5 _             // [fp + 5] = 42
   1: 10 7 7 _             // call is_even
   2: 4 5 0 8              // Arg 0 slot 0: [fp + 8] = [fp + 5] + 0
   3: 10 10 15 _           // call is_odd
   4: 6 6 100 3            // [fp + 3] = [fp + 6] op 100
   5: 0 3 9 -3             // [fp + -3] = [fp + 3] op [fp + 9]
   6: 11 _ _ _             // return
is_even:
is_even:
is_even_0:
   7: 14 -4 4 _            // if [fp + -4] != 0 jmp rel is_even_2
   8: 12 9 _ _             // jump abs is_even_1
is_even_1:
   9: 9 1 -3 _             // Return value 0: [fp -3] = 1
  10: 11 _ _ _             // return
is_even_2:
  11: 5 -4 1 2             // [fp + 2] = [fp + -4] op 1
  12: 10 4 15 _            // call is_odd
  13: 4 3 0 -3             // Return value 0: [fp -3] = [fp + 3] + 0
  14: 11 _ _ _             // return
is_odd:
is_odd:
is_odd_0:
  15: 14 -4 4 _            // if [fp + -4] != 0 jmp rel is_odd_2
  16: 12 17 _ _            // jump abs is_odd_1
is_odd_1:
  17: 9 0 -3 _             // Return value 0: [fp -3] = 0
  18: 11 _ _ _             // return
is_odd_2:
  19: 5 -4 1 2             // [fp + 2] = [fp + -4] op 1
  20: 10 4 7 _             // call is_even
  21: 4 3 0 -3             // Return value 0: [fp -3] = [fp + 3] + 0
  22: 11 _ _ _             // return

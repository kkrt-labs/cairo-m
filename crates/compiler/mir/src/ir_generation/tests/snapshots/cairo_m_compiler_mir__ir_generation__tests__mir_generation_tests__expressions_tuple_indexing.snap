---
source: crates/compiler/mir/src/ir_generation/tests/mir_generation_tests.rs
expression: snapshot_content
---
---
source: crates/compiler/mir/src/ir_generation/tests/mir_generation_tests.rs
expression: mir_output
---
Fixture: tuple_indexing.cm
============================================================
Source code:
// Tests tuple indexing syntax (expr.N)
fn test_basic_tuple_index() -> felt {
    let tt = (10, 20, 30);
    return tt.1;
}

// TODO: Add u32 test on accessing tuple index.
// fn test_u32_tuple_index() -> u32 {
//     let tt = (10u32, 20u32, 30u32);
//     return tt.1;
// }

fn test_tuple_index_lvalue() -> felt {
    let tt = (100, 200, 300);
    tt.1 = 250;
    return tt.1;
}

fn test_nested_tuple_index() -> felt {
    let nested = ((1, 2), (3, 4));
    return nested.0.1 + nested.1.0;
}

fn get_tuple() -> (felt, felt) {
    return (42, 99);
}

fn test_function_return_tuple_index() -> felt {
    return get_tuple().1;
}

fn test_simple_function_call_index() -> felt {
    let result = get_tuple().1;
    return result;
}

fn test_chain_tuple_operations() -> felt {
    let tt = (1, 2, 3);
    let x = tt.0;
    tt.2 = x + tt.1;
    return tt.2;
}

============================================================
Generated MIR:
module {
  // Function 0
  fn test_basic_tuple_index {
    entry: 0

    0:
      // Allocate tuple with 3 elements
%0 = stackalloc 3
      // Get address of tuple element 0
%1 = getelementptr %0, 0
      store %1, 10
      // Get address of tuple element 1
%2 = getelementptr %0, 1
      store %2, 20
      // Get address of tuple element 2
%3 = getelementptr %0, 2
      store %3, 30
      // Get address of tuple element 1
%4 = getelementptr %0, 1
      // Load tuple element 1
%5 = load %4
      return %5

  }

  // Function 1
  fn test_tuple_index_lvalue {
    entry: 0

    0:
      // Allocate tuple with 3 elements
%0 = stackalloc 3
      // Get address of tuple element 0
%1 = getelementptr %0, 0
      store %1, 100
      // Get address of tuple element 1
%2 = getelementptr %0, 1
      store %2, 200
      // Get address of tuple element 2
%3 = getelementptr %0, 2
      store %3, 300
      // Get address of tuple element 1 for assignment
%4 = getelementptr %0, 1
      store %4, 250
      // Get address of tuple element 1
%5 = getelementptr %0, 1
      // Load tuple element 1
%6 = load %5
      return %6

  }

  // Function 2
  fn test_nested_tuple_index {
    entry: 0

    0:
      // Allocate tuple with 2 elements
%0 = stackalloc 4
      // Allocate tuple with 2 elements
%1 = stackalloc 2
      // Get address of tuple element 0
%2 = getelementptr %1, 0
      store %2, 1
      // Get address of tuple element 1
%3 = getelementptr %1, 1
      store %3, 2
      // Get address of tuple element 0
%4 = getelementptr %0, 0
      store %4, %1
      // Allocate tuple with 2 elements
%5 = stackalloc 2
      // Get address of tuple element 0
%6 = getelementptr %5, 0
      store %6, 3
      // Get address of tuple element 1
%7 = getelementptr %5, 1
      store %7, 4
      // Get address of tuple element 1
%8 = getelementptr %0, 1
      store %8, %5
      // Get address of tuple element 0 for assignment
%9 = getelementptr %0, 0
      // Get address of tuple element 1
%10 = getelementptr %9, 1
      // Load tuple element 1
%11 = load %10
      // Get address of tuple element 1 for assignment
%12 = getelementptr %0, 2
      // Get address of tuple element 0
%13 = getelementptr %12, 0
      // Load tuple element 0
%14 = load %13
      %15 = %11 Add %14
      return %15

  }

  // Function 3
  fn get_tuple {
    entry: 0

    0:
      return (42, 99)

  }

  // Function 4
  fn test_function_return_tuple_index {
    entry: 0

    0:
      %0, %1 = call 3()
      return %1

  }

  // Function 5
  fn test_simple_function_call_index {
    entry: 0

    0:
      %0, %1 = call 3()
      %2 = stackalloc 1
      store %2, %1
      return %2

  }

  // Function 6
  fn test_chain_tuple_operations {
    entry: 0

    0:
      // Allocate tuple with 3 elements
%0 = stackalloc 3
      // Get address of tuple element 0
%1 = getelementptr %0, 0
      store %1, 1
      // Get address of tuple element 1
%2 = getelementptr %0, 1
      store %2, 2
      // Get address of tuple element 2
%3 = getelementptr %0, 2
      store %3, 3
      // Get address of tuple element 0
%4 = getelementptr %0, 0
      // Load tuple element 0
%5 = load %4
      %6 = stackalloc 1
      store %6, %5
      // Get address of tuple element 1
%7 = getelementptr %0, 1
      // Load tuple element 1
%8 = load %7
      %9 = %6 Add %8
      // Get address of tuple element 2 for assignment
%10 = getelementptr %0, 2
      store %10, %9
      // Get address of tuple element 2
%11 = getelementptr %0, 2
      // Load tuple element 2
%12 = load %11
      return %12

  }

}

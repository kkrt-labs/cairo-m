---
source: crates/compiler/mir/tests/mdtest_snapshots.rs
description: "MIR snapshot for mdtest: Structs in Cairo-M - Nested Structs"
input_file: mdtest/03-types/02-structs.md
---
Source:
struct Point {
    x: felt,
    y: felt,
}

struct Line {
    start: Point,
    end: Point,
}

fn line_length_squared() -> felt {
    let line = Line {
        start: Point { x: 0, y: 0 },
        end: Point { x: 3, y: 4 }
    };
    let dx = line.end.x - line.start.x;
    let dy = line.end.y - line.start.y;
    return dx * dx + dy * dy;  // Returns 25
}
============================================================
Generated MIR:
module {
  // Function 0
  fn line_length_squared {
    entry: 0

    0:
      // Lowered struct alloca for %0
%17 = framealloc Point
      // Get address of field 'x'
%18 = getelementptr %17, 0
      // Store field 'x'
store %18, 0
      // Get address of field 'y'
%19 = getelementptr %17, 1
      // Store field 'y'
store %19, 0
      // Alias struct value to alloca
%0 = %17 (*Point)
      // Lowered struct alloca for %1
%20 = framealloc Point
      // Get address of field 'x'
%21 = getelementptr %20, 0
      // Store field 'x'
store %21, 3
      // Get address of field 'y'
%22 = getelementptr %20, 1
      // Store field 'y'
store %22, 4
      // Alias struct value to alloca
%1 = %20 (*Point)
      // Folded ExtractStructField(2, "end")
%3 = %1 (Point)
      %4 = extractfield %3, "x"
      // Folded ExtractStructField(2, "start")
%5 = %0 (Point)
      %6 = extractfield %5, "x"
      %7 = %4 Sub %6
      // Folded ExtractStructField(2, "end")
%8 = %1 (Point)
      %9 = extractfield %8, "y"
      // Folded ExtractStructField(2, "start")
%10 = %0 (Point)
      %11 = extractfield %10, "y"
      %12 = %9 Sub %11
      %13 = %7 Mul %7
      %14 = %12 Mul %12
      %15 = %13 Add %14
      return %15

  }

}

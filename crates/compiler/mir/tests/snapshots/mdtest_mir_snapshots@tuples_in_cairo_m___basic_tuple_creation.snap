---
source: crates/compiler/mir/tests/mdtest_snapshots.rs
description: "MIR snapshot for mdtest: Tuples in Cairo-M - Basic Tuple Creation"
input_file: mdtest/03-types/01-tuples.md
---
Source:
fn main_test() -> felt {
    let tuple = create_tuple();
    return tuple.0 + tuple.1 + tuple.2;
}

fn create_tuple() -> (felt, felt, felt) {
    return (1, 2, 3);
}
============================================================
Generated MIR:
module {
  // Function 0
  fn main_test {
    entry: 0

    0:
      %0, %1, %2 = call 1()
      // Allocate space for tuple return value
%3 = framealloc (felt, felt, felt)
      // Get address of tuple element 0
%4 = getelementptr %3, 0
      store %4, %0
      // Get address of tuple element 1
%5 = getelementptr %3, 1
      store %5, %1
      // Get address of tuple element 2
%6 = getelementptr %3, 2
      store %6, %2
      // Load variable tuple
%7 = load (felt, felt, felt) %3
      %8 = extracttuple %7, 0
      // Load variable tuple
%9 = load (felt, felt, felt) %3
      %10 = extracttuple %9, 1
      %11 = %8 Add %10
      // Load variable tuple
%12 = load (felt, felt, felt) %3
      %13 = extracttuple %12, 2
      %14 = %11 Add %13
      return %14

  }

  // Function 1
  fn create_tuple {
    entry: 0

    0:
      return (1, 2, 3)

  }

}

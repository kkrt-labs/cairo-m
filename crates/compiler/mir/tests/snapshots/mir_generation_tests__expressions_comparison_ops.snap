---
source: crates/compiler/mir/tests/mir_generation_tests.rs
expression: snapshot_content
---
---
source: crates/compiler/mir/tests/mir_generation_tests.rs
expression: mir_output
---
Fixture: comparison_ops.cm
============================================================
Source code:
//!ASSERT CONTAINS: Less
//!ASSERT CONTAINS: Greater
//!ASSERT CONTAINS: LessEqual
//!ASSERT CONTAINS: GreaterEqual

// Tests new comparison operations.
fn test_less(a: felt, b: felt) -> felt {
    let c = a < b;
    return c;
}

fn test_greater(a: felt, b: felt) -> felt {
    let c = a > b;
    return c;
}

fn test_less_equal(a: felt, b: felt) -> felt {
    let c = a <= b;
    return c;
}

fn test_greater_equal(a: felt, b: felt) -> felt {
    let c = a >= b;
    return c;
}

// Test comparison operators in conditional context
fn test_comparison_in_if(x: felt, y: felt) -> felt {
    if (x < y) {
        return 1;
    } else if (x > y) {
        return 2;
    } else {
        return 0;
    }
}

============================================================
Generated MIR:
module {
  // Function 0
  fn test_less {
    parameters: [0, 1]
    entry: 0

    0:
      %2 = %0 Less %1
      return %2

  }

  // Function 1
  fn test_greater {
    parameters: [0, 1]
    entry: 0

    0:
      %2 = %0 Greater %1
      return %2

  }

  // Function 2
  fn test_less_equal {
    parameters: [0, 1]
    entry: 0

    0:
      %2 = %0 LessEqual %1
      return %2

  }

  // Function 3
  fn test_greater_equal {
    parameters: [0, 1]
    entry: 0

    0:
      %2 = %0 GreaterEqual %1
      return %2

  }

  // Function 4
  fn test_comparison_in_if {
    parameters: [0, 1]
    entry: 0

    0:
      %2 = %0 Less %1
      if %2 then jump 1 else jump 2

    1:
      return 1

    2:
      %3 = %0 Greater %1
      if %3 then jump 3 else jump 4

    3:
      return 2

    4:
      return 0

  }

}

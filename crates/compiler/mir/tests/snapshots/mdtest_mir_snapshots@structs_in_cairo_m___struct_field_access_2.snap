---
source: crates/compiler/mir/tests/mdtest_snapshots.rs
description: "MIR snapshot for mdtest: Structs in Cairo-M - Struct Field Access 2"
input_file: mdtest/03-types/02-structs.md
---
Source:
struct RectangleU32 {
    width: u32,
    height: u32,
}

fn calculate_area_u32() -> u32 {
    let rect = RectangleU32 { width: 5, height: 10 };
    if rect.width == 5 {
        rect.width = rect.width * 2;
    } else {
        rect.width = rect.height;
    }
    return rect.width * rect.height;
}
============================================================
Generated MIR:
module {
  // Function 0
  fn calculate_area_u32 {
    entry: 0

    0:
      // Lowered struct alloca for %0
%12 = framealloc RectangleU32
      // Get address of field 'width'
%13 = getelementptr %12, 0
      // Store field 'width'
store %13, 5 (u32)
      // Get address of field 'height'
%14 = getelementptr %12, 2
      // Store field 'height'
store %14, 10 (u32)
      // Alias struct value to alloca
%0 = %12 (*RectangleU32)
      // Folded ExtractStructField(0, "width")
%1 = 5 (u32)
      if %1 U32Eq 5 then jump 1 else jump 2

    1 (block_1):
      ; block_1
      // Get address of field 'width' (lowered)
%15 = getelementptr %12, 0
      // Load field 'width' (lowered)
%3 = load u32 %15
      %4 = %3 U32Mul 2
      // Get address of field 'width'
%5 = getelementptr %0, 0
      store %5, %4 (u32)
      jump 3

    2 (block_2):
      ; block_2
      // Get address of field 'width'
%6 = getelementptr %0, 0
      // Get address of field 'height' (lowered)
%16 = getelementptr %12, 2
      // Load field 'height' (lowered)
%7 = load u32 %16
      store %6, %7 (u32)
      jump 3

    3 (block_3):
      ; block_3
      // Get address of field 'width' (lowered)
%17 = getelementptr %12, 0
      // Load field 'width' (lowered)
%8 = load u32 %17
      // Get address of field 'height' (lowered)
%18 = getelementptr %12, 2
      // Load field 'height' (lowered)
%9 = load u32 %18
      %10 = %8 U32Mul %9
      return %10

  }

}

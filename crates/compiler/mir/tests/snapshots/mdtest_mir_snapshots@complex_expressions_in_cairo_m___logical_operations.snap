---
source: crates/compiler/mir/tests/mdtest_snapshots.rs
description: "MIR snapshot for mdtest: Complex Expressions in Cairo-M - Logical Operations"
input_file: mdtest/01-basics/06-expressions.md
---
Source:
fn test_logical_ops() -> felt {
    let a = 5;
    let b = 0;
    let c = 3;

    // Logical AND: both operands must be non-zero
    let and_result1 = (a != 0) && (c != 0);  // 1 (true && true)
    let and_result2 = (a != 0) && (b != 0);  // 0 (true && false)

    // Logical OR: at least one operand must be non-zero
    let or_result1 = (a != 0) || (b != 0);   // 1 (true || false)
    let or_result2 = (b != 0) || (b != 0);   // 0 (false || false)

    let res = 0;
    if and_result1 {
        res = res + 1;
    }
    if and_result2 {
        res = res + 1;
    }
    if or_result1 {
        res = res + 1;
    }
    if or_result2 {
        res = res + 1;
    }
    return res;
}
============================================================
Generated MIR:
module {
  // Function 0
  fn test_logical_ops {
    entry: 0

    0:
      %0 = 5
      %1 = 0
      %2 = 3
      %3 = %0 Neq 0
      %4 = %2 Neq 0
      %5 = %3 And %4
      %6 = %0 Neq 0
      %7 = %1 Neq 0
      %8 = %6 And %7
      %9 = %0 Neq 0
      %10 = %1 Neq 0
      %11 = %9 Or %10
      %12 = %1 Neq 0
      %13 = %1 Neq 0
      %14 = %12 Or %13
      %15 = 0
      if %5 then jump 1 else jump 2

    1:
      %15 = %15 Add 1
      jump 2

    2:
      if %8 then jump 3 else jump 4

    3:
      %15 = %15 Add 1
      jump 4

    4:
      if %11 then jump 5 else jump 6

    5:
      %15 = %15 Add 1
      jump 6

    6:
      if %14 then jump 7 else jump 8

    7:
      %15 = %15 Add 1
      jump 8

    8:
      return %15

  }

}

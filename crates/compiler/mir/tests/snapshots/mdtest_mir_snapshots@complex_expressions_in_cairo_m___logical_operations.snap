---
source: crates/compiler/mir/tests/mdtest_snapshots.rs
description: "MIR snapshot for mdtest: Complex Expressions in Cairo-M - Logical Operations"
input_file: mdtest/01-basics/06-expressions.md
---
Source:
fn test_logical_ops() -> felt {
    let a = 5;
    let b = 0;
    let c = 3;

    // Logical AND: both operands must be non-zero
    let and_result1 = (a != 0) && (c != 0);  // 1 (true && true)
    let and_result2 = (a != 0) && (b != 0);  // 0 (true && false)

    // Logical OR: at least one operand must be non-zero
    let or_result1 = (a != 0) || (b != 0);   // 1 (true || false)
    let or_result2 = (b != 0) || (b != 0);   // 0 (false || false)

    let res = 0;
    if and_result1 {
        res = res + 1;
    }
    if and_result2 {
        res = res + 1;
    }
    if or_result1 {
        res = res + 1;
    }
    if or_result2 {
        res = res + 1;
    }
    return res;
}
============================================================
Generated MIR:
module {
  // Function 0
  fn test_logical_ops {
    entry: 0

    0:
      %0 = 5
      %1 = 0
      %2 = 3
      %3 = %0 != 0
      %4 = %2 != 0
      %5 = %3 && %4
      %6 = %0 != 0
      %7 = %1 != 0
      %8 = %6 && %7
      %9 = %0 != 0
      %10 = %1 != 0
      %11 = %9 || %10
      %12 = %1 != 0
      %13 = %1 != 0
      %14 = %12 || %13
      %15 = 0
      %18 = %15
      if %5 then jump 1 else jump 9

    1 (block_1):
      ; block_1
      %16 = %15 + 1
      %18 = %16
      jump 2

    2 (block_2):
      ; block_2
      %22 = %18
      if %8 then jump 3 else jump 10

    3 (block_3):
      ; block_3
      %19 = %18 + 1
      %22 = %19
      jump 4

    4 (block_4):
      ; block_4
      %27 = %22
      if %11 then jump 5 else jump 11

    5 (block_5):
      ; block_5
      %23 = %22 + 1
      %27 = %23
      jump 6

    6 (block_6):
      ; block_6
      %29 = %27
      if %14 then jump 7 else jump 12

    7 (block_7):
      ; block_7
      %28 = %27 + 1
      %29 = %28
      jump 8

    8 (block_8):
      ; block_8
      return %29

    9 (edge_0_2):
      ; edge_0_2
      jump 2

    10 (edge_2_4):
      ; edge_2_4
      jump 4

    11 (edge_4_6):
      ; edge_4_6
      jump 6

    12 (edge_6_8):
      ; edge_6_8
      jump 8

  }

}

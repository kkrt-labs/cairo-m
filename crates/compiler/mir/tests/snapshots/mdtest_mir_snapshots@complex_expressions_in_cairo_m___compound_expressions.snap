---
source: crates/compiler/mir/tests/mdtest_snapshots.rs
description: "MIR snapshot for mdtest: Complex Expressions in Cairo-M - Compound Expressions"
input_file: mdtest/01-basics/06-expressions.md
---
Source:
fn test_compound_expressions() -> u32 {
    let x: u32 = 8;
    let y: u32 = 3;
    let z: u32 = 12;

    // Complex arithmetic with precedence
    let expr1 = x * y + z / 4u32;                    // 8 * 3 + 12 / 4 = 24 + 3 = 27

    // Nested parentheses
    let expr2 = (x + y) * (z - y * 2u32);            // (8 + 3) * (12 - 3 * 2) = 11 * 6 = 66

    // Mixed arithmetic and comparison
    let expr3 = (x > y) && ((z + x) < 25u32);        // (8 > 3) && ((12 + 8) < 25) = 1 && 1 = 1

    let res = expr1 + expr2;
    if expr3 {
        res = res + 1u32;
    }
    return res;
}
============================================================
Generated MIR:
module {
  // Function 0
  fn test_compound_expressions {
    entry: 0

    0:
      %0 = 8 (u32)
      %1 = 3 (u32)
      %2 = 12 (u32)
      %3 = %0 U32Mul %1
      %4 = %2 U32Div 4
      %5 = %3 U32Add %4
      %6 = %0 U32Add %1
      %7 = %1 U32Mul 2
      %8 = %2 U32Sub %7
      %9 = %6 U32Mul %8
      %10 = %0 U32Greater %1
      %11 = %2 U32Add %0
      %12 = %11 U32Less 25
      %13 = %10 And %12
      %14 = %5 U32Add %9
      if %13 then jump 1 else jump 2

    1:
      %14 = %14 U32Add 1
      jump 2

    2:
      return %14

  }

}

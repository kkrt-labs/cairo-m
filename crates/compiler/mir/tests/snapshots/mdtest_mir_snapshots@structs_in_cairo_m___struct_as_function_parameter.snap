---
source: crates/compiler/mir/tests/mdtest_snapshots.rs
description: "MIR snapshot for mdtest: Structs in Cairo-M - Struct as Function Parameter"
input_file: mdtest/03-types/02-structs.md
---
Source:
struct Vector {
    x: felt,
    y: felt,
    z: felt,
}

fn test_struct_param() -> felt {
    let a = Vector { x: 1, y: 2, z: 3 };
    let b = Vector { x: 4, y: 5, z: 6 };
    return dot_product(a, b);  // Returns 32
}

fn dot_product(v1: Vector, v2: Vector) -> felt {
    return v1.x * v2.x + v1.y * v2.y + v1.z * v2.z;
}
============================================================
Generated MIR:
module {
  // Function 0
  fn test_struct_param {
    entry: 0

    0:
      // Lowered struct alloca for %0
%4 = framealloc Vector
      // Get address of field 'x'
%5 = getelementptr %4, 0
      // Store field 'x'
store %5, 1
      // Get address of field 'y'
%6 = getelementptr %4, 1
      // Store field 'y'
store %6, 2
      // Get address of field 'z'
%7 = getelementptr %4, 2
      // Store field 'z'
store %7, 3
      // Alias struct value to alloca
%0 = %4 (*Vector)
      // Lowered struct alloca for %1
%8 = framealloc Vector
      // Get address of field 'x'
%9 = getelementptr %8, 0
      // Store field 'x'
store %9, 4
      // Get address of field 'y'
%10 = getelementptr %8, 1
      // Store field 'y'
store %10, 5
      // Get address of field 'z'
%11 = getelementptr %8, 2
      // Store field 'z'
store %11, 6
      // Alias struct value to alloca
%1 = %8 (*Vector)
      %2 = call 1(%0, %1)
      return %2

  }

  // Function 1
  fn dot_product {
    parameters: [0, 1]
    entry: 0

    0:
      // Get address of field 'x' (lowered)
%14 = getelementptr %4, 0
      // Load field 'x' (lowered)
%2 = load felt %14
      // Get address of field 'x' (lowered)
%15 = getelementptr %8, 0
      // Load field 'x' (lowered)
%3 = load felt %15
      %4 = %2 Mul %3
      // Get address of field 'y' (lowered)
%16 = getelementptr %4, 0
      // Load field 'y' (lowered)
%5 = load felt %16
      // Get address of field 'y' (lowered)
%17 = getelementptr %8, 0
      // Load field 'y' (lowered)
%6 = load felt %17
      %7 = %5 Mul %6
      %8 = %4 Add %7
      // Get address of field 'z' (lowered)
%18 = getelementptr %4, 0
      // Load field 'z' (lowered)
%9 = load felt %18
      // Get address of field 'z' (lowered)
%19 = getelementptr %8, 0
      // Load field 'z' (lowered)
%10 = load felt %19
      %11 = %9 Mul %10
      %12 = %8 Add %11
      return %12

  }

}

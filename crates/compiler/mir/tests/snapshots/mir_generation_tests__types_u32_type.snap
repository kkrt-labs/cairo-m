---
source: crates/compiler/mir/tests/mir_generation_tests.rs
expression: snapshot_content
---
---
source: crates/compiler/mir/tests/mir_generation_tests.rs
expression: mir_output
---
Fixture: u32_type.cm
============================================================
Source code:
//!ASSERT CONTAINS: U32Add
//!ASSERT CONTAINS: U32Mul
//!ASSERT CONTAINS: U32Eq
//!ASSERT CONTAINS: U32Sub
//!ASSERT CONTAINS: U32Div

fn test_u32_literal() -> u32 {
    let x: u32 = 42;
    return x;
}

// Tests various binary operations on u32.
fn test_add(a: u32, b: u32) -> u32 {
    let c = a + b;
    return c;
}

fn test_mul(a: u32, b: u32) -> u32 {
    let c = a * b;
    return c;
}

fn test_sub(a: u32, b: u32) -> u32 {
    let c = a - b;
    return c;
}

fn test_div(a: u32, b: u32) -> u32 {
    let c = a / b;
    return c;
}

fn test_eq(a: u32, b: u32) -> u32 {
    let c = a == b;
    return c;
}

============================================================
Generated MIR:
module {
  // Function 0
  fn test_u32_literal {
    entry: 0

    0:
      %0 = 42 (u32)
      return %0

  }

  // Function 1
  fn test_add {
    parameters: [0, 1]
    entry: 0

    0:
      %2 = %0 U32Add %1
      return %2

  }

  // Function 2
  fn test_mul {
    parameters: [0, 1]
    entry: 0

    0:
      %2 = %0 U32Mul %1
      return %2

  }

  // Function 3
  fn test_sub {
    parameters: [0, 1]
    entry: 0

    0:
      %2 = %0 U32Sub %1
      return %2

  }

  // Function 4
  fn test_div {
    parameters: [0, 1]
    entry: 0

    0:
      %2 = %0 U32Div %1
      return %2

  }

  // Function 5
  fn test_eq {
    parameters: [0, 1]
    entry: 0

    0:
      %2 = %0 U32Eq %1
      return %2

  }

}

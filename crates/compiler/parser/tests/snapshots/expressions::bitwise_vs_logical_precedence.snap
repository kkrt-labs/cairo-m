---
source: crates/compiler/parser/tests/common.rs
expression: snapshot
---
--- Code ---
fn test() { let x = a & b && c | d; }
--- AST ---
[
    Function(
        Spanned(
            FunctionDef {
                name: Spanned(
                    "test",
                    3..7,
                ),
                params: [],
                return_type: Spanned(
                    Tuple(
                        [],
                    ),
                    0..0,
                ),
                body: [
                    Spanned(
                        Let {
                            pattern: Identifier(
                                Spanned(
                                    "x",
                                    16..17,
                                ),
                            ),
                            statement_type: None,
                            value: Spanned(
                                BinaryOp {
                                    op: And,
                                    left: Spanned(
                                        BinaryOp {
                                            op: BitwiseAnd,
                                            left: Spanned(
                                                Identifier(
                                                    Spanned(
                                                        "a",
                                                        20..21,
                                                    ),
                                                ),
                                                20..21,
                                            ),
                                            right: Spanned(
                                                Identifier(
                                                    Spanned(
                                                        "b",
                                                        24..25,
                                                    ),
                                                ),
                                                24..25,
                                            ),
                                        },
                                        20..25,
                                    ),
                                    right: Spanned(
                                        BinaryOp {
                                            op: BitwiseOr,
                                            left: Spanned(
                                                Identifier(
                                                    Spanned(
                                                        "c",
                                                        29..30,
                                                    ),
                                                ),
                                                29..30,
                                            ),
                                            right: Spanned(
                                                Identifier(
                                                    Spanned(
                                                        "d",
                                                        33..34,
                                                    ),
                                                ),
                                                33..34,
                                            ),
                                        },
                                        29..34,
                                    ),
                                },
                                20..34,
                            ),
                        },
                        12..35,
                    ),
                ],
            },
            0..37,
        ),
    ),
]

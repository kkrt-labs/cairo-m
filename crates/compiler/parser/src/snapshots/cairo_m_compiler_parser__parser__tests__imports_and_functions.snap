---
source: crates/compiler/parser/src/parser.rs
expression: snapshot_entry
---
code: 
                from std.math import sqrt
                from std.io import print as output

                struct Point {
                    x: felt,
                    y: felt
                }

                func distance(p1: Point, p2: Point) -> felt {
                    local dx: felt = p1.x - p2.x;
                    local dy: felt = p1.y - p2.y;
                    return sqrt(dx * dx + dy * dy);
                }
            
result: [
    Import(
        ImportStmt {
            path: [
                "std",
                "math",
            ],
            item: "sqrt",
            alias: None,
        },
    ),
    Import(
        ImportStmt {
            path: [
                "std",
                "io",
            ],
            item: "print",
            alias: Some(
                "output",
            ),
        },
    ),
    Struct(
        StructDef {
            name: "Point",
            fields: [
                (
                    "x",
                    Named(
                        "felt",
                    ),
                ),
                (
                    "y",
                    Named(
                        "felt",
                    ),
                ),
            ],
        },
    ),
    Function(
        FunctionDef {
            name: "distance",
            params: [
                Parameter {
                    name: "p1",
                    type_expr: Named(
                        "Point",
                    ),
                },
                Parameter {
                    name: "p2",
                    type_expr: Named(
                        "Point",
                    ),
                },
            ],
            return_type: Some(
                Named(
                    "felt",
                ),
            ),
            body: [
                Local {
                    name: "dx",
                    ty: Some(
                        Named(
                            "felt",
                        ),
                    ),
                    value: BinaryOp {
                        op: Sub,
                        left: MemberAccess {
                            object: Identifier(
                                "p1",
                            ),
                            field: "x",
                        },
                        right: MemberAccess {
                            object: Identifier(
                                "p2",
                            ),
                            field: "x",
                        },
                    },
                },
                Local {
                    name: "dy",
                    ty: Some(
                        Named(
                            "felt",
                        ),
                    ),
                    value: BinaryOp {
                        op: Sub,
                        left: MemberAccess {
                            object: Identifier(
                                "p1",
                            ),
                            field: "y",
                        },
                        right: MemberAccess {
                            object: Identifier(
                                "p2",
                            ),
                            field: "y",
                        },
                    },
                },
                Return {
                    value: Some(
                        FunctionCall {
                            callee: Identifier(
                                "sqrt",
                            ),
                            args: [
                                BinaryOp {
                                    op: Add,
                                    left: BinaryOp {
                                        op: Mul,
                                        left: Identifier(
                                            "dx",
                                        ),
                                        right: Identifier(
                                            "dx",
                                        ),
                                    },
                                    right: BinaryOp {
                                        op: Mul,
                                        left: Identifier(
                                            "dy",
                                        ),
                                        right: Identifier(
                                            "dy",
                                        ),
                                    },
                                },
                            ],
                        },
                    ),
                },
            ],
        },
    ),
]

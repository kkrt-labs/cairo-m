---
source: crates/compiler/semantic/src/validation/tests/mod.rs
expression: snapshot_content
---
Fixture: function_call_comprehensive.cm
============================================================
Source code:
// Comprehensive Function Call Validation Test
// This file tests all scenarios handled by the FunctionCallValidator

// Valid function definitions for testing
func add(x: felt, y: felt) -> felt {
    return x + y;
}

func no_params() -> felt {
    return 42;
}

func single_param(value: felt) -> felt {
    return value * 2;
}

func multi_param(a: felt, b: felt, c: felt) -> felt {
    return a + b + c;
}

struct Point {
    x: felt,
    y: felt
}

func point_func(p: Point) -> felt {
    return p.x + p.y;
}

func test_function_calls() {
    // ========== VALID CALLS (should not error) ==========
    let result1 = add(1, 2);                    // OK: correct arity and types
    let result2 = no_params();                  // OK: no parameters
    let result3 = single_param(42);             // OK: single parameter
    let result4 = multi_param(1, 2, 3);         // OK: multiple parameters
    let p = Point { x: 1, y: 2 };
    let result5 = point_func(p);                // OK: struct parameter

    // ========== ARITY MISMATCH ERRORS ==========
    let error1 = add(1);                        // Error: too few args (expects 2, got 1)
    let error2 = add(1, 2, 3);                  // Error: too many args (expects 2, got 3)
    let error3 = no_params(1);                  // Error: too many args (expects 0, got 1)
    let error4 = single_param();                // Error: too few args (expects 1, got 0)
    let error5 = multi_param(1, 2);             // Error: too few args (expects 3, got 2)

    // ========== TYPE MISMATCH ERRORS ==========
    // Note: Currently we only have 'felt' and struct types, so type mismatches
    // are limited. These would error if we had different primitive types:
    // let error6 = add("hello", 42);           // Would be: type mismatch (string vs felt)

    // ========== NON-CALLABLE TYPE ERRORS ==========
    let x = 42;
    let error7 = x(1, 2);                       // Error: cannot call felt as function

    let y = Point { x: 1, y: 2 };
    let error8 = y();                           // Error: cannot call struct as function

    // ========== UNDECLARED FUNCTION CALLS ==========
    // These should NOT generate FunctionCallValidator errors, only ScopeValidator errors
    let error9 = undefined_function(42);        // ScopeValidator: undeclared variable
    let error10 = another_missing_func(1, 2);   // ScopeValidator: undeclared variable
    let error11 = foo();                        // ScopeValidator: undeclared variable

    // ========== CHAINED CALLS ==========
    // These test more complex scenarios
    let chain1 = add(single_param(5), 10);      // OK: nested valid calls
    let chain2 = undefined_func(add(1, 2));     // Mixed: valid inner call, undeclared outer
   
    return();
}

// Test calls in different contexts
func test_calls_in_expressions() {
    // Function calls in binary operations
    let sum = add(1, 2) + add(3, 4);            // OK: both calls valid
    let bad_sum = add(1) + add(2, 3);           // Error: first call has wrong arity

    // Function calls in conditionals
    if (no_params() == 42) {                    // OK: valid call
        let x = 1;
    }

    if (add(1)) {                               // Error: wrong arity in condition
        let y = 2;
    }

    return();
}

// Test function calls as return values
func test_return_calls() -> felt {
    return add(5, 10);                          // OK: valid call in return
}

func test_bad_return_calls() -> felt {
    return add(5);                              // Error: wrong arity in return
}

============================================================
Found 35 diagnostic(s):

--- Diagnostic 1 ---
[1001] Error: Undeclared variable 'undefined_function'
    ╭─[ <unknown>:60:18 ]
    │
 60 │     let error9 = undefined_function(42);        // ScopeValidator: undeclared variable
    │                  ─────────┬────────  
    │                           ╰────────── Undeclared variable 'undefined_function'
────╯

--- Diagnostic 2 ---
[1001] Error: Undeclared variable 'another_missing_func'
    ╭─[ <unknown>:61:19 ]
    │
 61 │     let error10 = another_missing_func(1, 2);   // ScopeValidator: undeclared variable
    │                   ──────────┬─────────  
    │                             ╰─────────── Undeclared variable 'another_missing_func'
────╯

--- Diagnostic 3 ---
[1001] Error: Undeclared variable 'foo'
    ╭─[ <unknown>:62:19 ]
    │
 62 │     let error11 = foo();                        // ScopeValidator: undeclared variable
    │                   ─┬─  
    │                    ╰─── Undeclared variable 'foo'
────╯

--- Diagnostic 4 ---
[1001] Error: Undeclared variable 'undefined_func'
    ╭─[ <unknown>:67:18 ]
    │
 67 │     let chain2 = undefined_func(add(1, 2));     // Mixed: valid inner call, undeclared outer
    │                  ───────┬──────  
    │                         ╰──────── Undeclared variable 'undefined_func'
────╯

--- Diagnostic 5 ---
[1002] Warning: Unused variable 'result1'
    ╭─[ <unknown>:32:9 ]
    │
 32 │     let result1 = add(1, 2);                    // OK: correct arity and types
    │         ───┬───  
    │            ╰───── Unused variable 'result1'
────╯

--- Diagnostic 6 ---
[1002] Warning: Unused variable 'result2'
    ╭─[ <unknown>:33:9 ]
    │
 33 │     let result2 = no_params();                  // OK: no parameters
    │         ───┬───  
    │            ╰───── Unused variable 'result2'
────╯

--- Diagnostic 7 ---
[1002] Warning: Unused variable 'result3'
    ╭─[ <unknown>:34:9 ]
    │
 34 │     let result3 = single_param(42);             // OK: single parameter
    │         ───┬───  
    │            ╰───── Unused variable 'result3'
────╯

--- Diagnostic 8 ---
[1002] Warning: Unused variable 'result4'
    ╭─[ <unknown>:35:9 ]
    │
 35 │     let result4 = multi_param(1, 2, 3);         // OK: multiple parameters
    │         ───┬───  
    │            ╰───── Unused variable 'result4'
────╯

--- Diagnostic 9 ---
[1002] Warning: Unused variable 'result5'
    ╭─[ <unknown>:37:9 ]
    │
 37 │     let result5 = point_func(p);                // OK: struct parameter
    │         ───┬───  
    │            ╰───── Unused variable 'result5'
────╯

--- Diagnostic 10 ---
[1002] Warning: Unused variable 'error1'
    ╭─[ <unknown>:40:9 ]
    │
 40 │     let error1 = add(1);                        // Error: too few args (expects 2, got 1)
    │         ───┬──  
    │            ╰──── Unused variable 'error1'
────╯

--- Diagnostic 11 ---
[1002] Warning: Unused variable 'error2'
    ╭─[ <unknown>:41:9 ]
    │
 41 │     let error2 = add(1, 2, 3);                  // Error: too many args (expects 2, got 3)
    │         ───┬──  
    │            ╰──── Unused variable 'error2'
────╯

--- Diagnostic 12 ---
[1002] Warning: Unused variable 'error3'
    ╭─[ <unknown>:42:9 ]
    │
 42 │     let error3 = no_params(1);                  // Error: too many args (expects 0, got 1)
    │         ───┬──  
    │            ╰──── Unused variable 'error3'
────╯

--- Diagnostic 13 ---
[1002] Warning: Unused variable 'error4'
    ╭─[ <unknown>:43:9 ]
    │
 43 │     let error4 = single_param();                // Error: too few args (expects 1, got 0)
    │         ───┬──  
    │            ╰──── Unused variable 'error4'
────╯

--- Diagnostic 14 ---
[1002] Warning: Unused variable 'error5'
    ╭─[ <unknown>:44:9 ]
    │
 44 │     let error5 = multi_param(1, 2);             // Error: too few args (expects 3, got 2)
    │         ───┬──  
    │            ╰──── Unused variable 'error5'
────╯

--- Diagnostic 15 ---
[1002] Warning: Unused variable 'error7'
    ╭─[ <unknown>:53:9 ]
    │
 53 │     let error7 = x(1, 2);                       // Error: cannot call felt as function
    │         ───┬──  
    │            ╰──── Unused variable 'error7'
────╯

--- Diagnostic 16 ---
[1002] Warning: Unused variable 'error8'
    ╭─[ <unknown>:56:9 ]
    │
 56 │     let error8 = y();                           // Error: cannot call struct as function
    │         ───┬──  
    │            ╰──── Unused variable 'error8'
────╯

--- Diagnostic 17 ---
[1002] Warning: Unused variable 'error9'
    ╭─[ <unknown>:60:9 ]
    │
 60 │     let error9 = undefined_function(42);        // ScopeValidator: undeclared variable
    │         ───┬──  
    │            ╰──── Unused variable 'error9'
────╯

--- Diagnostic 18 ---
[1002] Warning: Unused variable 'error10'
    ╭─[ <unknown>:61:9 ]
    │
 61 │     let error10 = another_missing_func(1, 2);   // ScopeValidator: undeclared variable
    │         ───┬───  
    │            ╰───── Unused variable 'error10'
────╯

--- Diagnostic 19 ---
[1002] Warning: Unused variable 'error11'
    ╭─[ <unknown>:62:9 ]
    │
 62 │     let error11 = foo();                        // ScopeValidator: undeclared variable
    │         ───┬───  
    │            ╰───── Unused variable 'error11'
────╯

--- Diagnostic 20 ---
[1002] Warning: Unused variable 'chain1'
    ╭─[ <unknown>:66:9 ]
    │
 66 │     let chain1 = add(single_param(5), 10);      // OK: nested valid calls
    │         ───┬──  
    │            ╰──── Unused variable 'chain1'
────╯

--- Diagnostic 21 ---
[1002] Warning: Unused variable 'chain2'
    ╭─[ <unknown>:67:9 ]
    │
 67 │     let chain2 = undefined_func(add(1, 2));     // Mixed: valid inner call, undeclared outer
    │         ───┬──  
    │            ╰──── Unused variable 'chain2'
────╯

--- Diagnostic 22 ---
[1002] Warning: Unused variable 'sum'
    ╭─[ <unknown>:75:9 ]
    │
 75 │     let sum = add(1, 2) + add(3, 4);            // OK: both calls valid
    │         ─┬─  
    │          ╰─── Unused variable 'sum'
────╯

--- Diagnostic 23 ---
[1002] Warning: Unused variable 'bad_sum'
    ╭─[ <unknown>:76:9 ]
    │
 76 │     let bad_sum = add(1) + add(2, 3);           // Error: first call has wrong arity
    │         ───┬───  
    │            ╰───── Unused variable 'bad_sum'
────╯

--- Diagnostic 24 ---
[1002] Warning: Unused variable 'x'
    ╭─[ <unknown>:80:13 ]
    │
 80 │         let x = 1;
    │             ┬  
    │             ╰── Unused variable 'x'
────╯

--- Diagnostic 25 ---
[1002] Warning: Unused variable 'y'
    ╭─[ <unknown>:84:13 ]
    │
 84 │         let y = 2;
    │             ┬  
    │             ╰── Unused variable 'y'
────╯

--- Diagnostic 26 ---
[2005] Error: Function expects 2 argument(s), but 1 were provided
    ╭─[ <unknown>:40:18 ]
    │
 40 │     let error1 = add(1);                        // Error: too few args (expects 2, got 1)
    │                  ─┬─  
    │                   ╰─── Function expects 2 argument(s), but 1 were provided
────╯

--- Diagnostic 27 ---
[2005] Error: Function expects 2 argument(s), but 3 were provided
    ╭─[ <unknown>:41:18 ]
    │
 41 │     let error2 = add(1, 2, 3);                  // Error: too many args (expects 2, got 3)
    │                  ─┬─  
    │                   ╰─── Function expects 2 argument(s), but 3 were provided
────╯

--- Diagnostic 28 ---
[2005] Error: Function expects 0 argument(s), but 1 were provided
    ╭─[ <unknown>:42:18 ]
    │
 42 │     let error3 = no_params(1);                  // Error: too many args (expects 0, got 1)
    │                  ────┬────  
    │                      ╰────── Function expects 0 argument(s), but 1 were provided
────╯

--- Diagnostic 29 ---
[2005] Error: Function expects 1 argument(s), but 0 were provided
    ╭─[ <unknown>:43:18 ]
    │
 43 │     let error4 = single_param();                // Error: too few args (expects 1, got 0)
    │                  ──────┬─────  
    │                        ╰─────── Function expects 1 argument(s), but 0 were provided
────╯

--- Diagnostic 30 ---
[2005] Error: Function expects 3 argument(s), but 2 were provided
    ╭─[ <unknown>:44:18 ]
    │
 44 │     let error5 = multi_param(1, 2);             // Error: too few args (expects 3, got 2)
    │                  ─────┬─────  
    │                       ╰─────── Function expects 3 argument(s), but 2 were provided
────╯

--- Diagnostic 31 ---
[2005] Error: Cannot call value of type 'Felt' as a function
    ╭─[ <unknown>:53:18 ]
    │
 53 │     let error7 = x(1, 2);                       // Error: cannot call felt as function
    │                  ┬  
    │                  ╰── Cannot call value of type 'Felt' as a function
────╯

--- Diagnostic 32 ---
[2005] Error: Cannot call value of type 'Struct(StructTypeId(Id(1c00)))' as a function
    ╭─[ <unknown>:56:18 ]
    │
 56 │     let error8 = y();                           // Error: cannot call struct as function
    │                  ┬  
    │                  ╰── Cannot call value of type 'Struct(StructTypeId(Id(1c00)))' as a function
────╯

--- Diagnostic 33 ---
[2005] Error: Function expects 2 argument(s), but 1 were provided
    ╭─[ <unknown>:76:19 ]
    │
 76 │     let bad_sum = add(1) + add(2, 3);           // Error: first call has wrong arity
    │                   ─┬─  
    │                    ╰─── Function expects 2 argument(s), but 1 were provided
────╯

--- Diagnostic 34 ---
[2005] Error: Function expects 2 argument(s), but 1 were provided
    ╭─[ <unknown>:83:9 ]
    │
 83 │     if (add(1)) {                               // Error: wrong arity in condition
    │         ─┬─  
    │          ╰─── Function expects 2 argument(s), but 1 were provided
────╯

--- Diagnostic 35 ---
[2005] Error: Function expects 2 argument(s), but 1 were provided
    ╭─[ <unknown>:96:12 ]
    │
 96 │     return add(5);                              // Error: wrong arity in return
    │            ─┬─  
    │             ╰─── Function expects 2 argument(s), but 1 were provided
────╯

// Test fixture for scope validation errors
// This file intentionally contains various scope-related errors

func test_undeclared_variables() {
    let x = undefined_var; // Should error: undeclared variable
    let y = another_undefined; // Should error: undeclared variable
    return x + y;
}

func test_unused_variables() {
    let unused1 = 42; // Should warn: unused variable
    let unused2 = 24; // Should warn: unused variable
    let used = 100;
    return used;
}

func test_duplicate_definitions() {
    let duplicate = 1;
    let duplicate = 2; // Should error: duplicate definition
    return duplicate;
}

func test_scope_visibility() {
    let outer = 1;
    {
        let inner = outer + 1; // OK: outer is visible
    }
    let bad = inner; // Should error: undeclared variable (inner out of scope)
    return bad;
}

func test_complex_scope_errors(param: felt) {
    let local1 = param; // OK: param is visible
    let unused_local = 42; // Should warn: unused variable

    {
        let level2 = local1 + 1; // OK: local1 is visible
        let also_unused = level2; // Should warn: unused variable

        if (undefined_condition) { // Should error: undeclared variable
            let inner = level2; // OK: level2 is visible
            return inner;
        }
    }

    let bad_ref = level2; // Should error: undeclared variable (level2 out of scope)
    return bad_ref;
}

struct TestStruct {
    field1: felt,
    field2: felt
}

func test_struct_usage() {
    let s = TestStruct { field1: 1, field2: undefined_field }; // Should error: undeclared variable
    let value = s.field1; // OK: s is defined, field1 exists
    let bad = undefined_struct.field; // Should error: undeclared variable
    return value;
}

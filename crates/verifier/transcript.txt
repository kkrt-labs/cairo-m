// send :
pcs_config.mix_into(channel);
MC::mix_root(channel, proof.stark_proof.commitment[0]);
proof.claim.mix_into(channel);
MC::mix_root(channel, proof.stark_proof.commitment[1]);
channel.mix_u64(proof.interaction_pow);

// request
let relations = Relations::draw(channel);

// send:
proof.interaction_claim.mix_into(channel);
MC::mix_root(channel, proof.stark_proof.commitment[2]);

// request
let random_coeff = channel.draw_secure_felt();

// send:
MC::mix_root(channel, proof.stark_proof.last().unwrap());

// request:
let oods_point = CirclePoint::<SecureField>::get_random_point(channel); (equivalent to channel.draw_secure_felt();)

// send:
channel.mix_felts(&proof.sampled_values.clone().flatten_cols());

// request:
let random_coeff = channel.draw_secure_felt();

// send:
MC::mix_root(channel, proof.first_layer.commitment);
for (layer_index, proof) in proof.inner_layers.into_iter().enumerate() {
    MC::mix_root(channel, proof.commitment);
    // request:
    let folding_alpha = channel.draw_secure_felt();
    // send:
    channel.mix_felts(&last_layer_poly);
}

channel.mix_u64(proof.proof_of_work);

// request
let queries = Queries::generate(channel, max_column_log_size, self.config.n_queries);

i am building a verifier AIR, for this i need to fill the trace with all the hints requiered in the AIR. First of i want to generate hints for
  the channel in the hints/channel.rs file. There are two types of interaction with the channel: send and request. You need to rebuild the
  transcript from the proof (add a function hints(proof) in the hints/mod.rs file). You have to perform in the right order a series of operations
   that are either send or request. For requests, the channel sends back data that needs to be stored in a ChannelHints struct where each field
  contains the data of a request. To know what operation to do when look at the transcript.txt file where i added indications (created following
  the flow from verify_verifier->verify->verify_values if you want to check). You will use the methods of the Poseidon31MerkleChannel. You will
  build a test vector from the actual verify_verifier (execute the real function and store the parameters in a channelHints), the criteria for
  success in these modifications is that this test passes.

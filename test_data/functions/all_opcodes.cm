// Cairo-M combination test file demonstrating all compilable opcodes
// This program exercises all implemented opcodes for comprehensive testing

fn main() -> felt {
    // ╔══════════════════════════════════════════════════════════════════════════╗
    // ║                              Regular Opcode Tests                        ║
    // ╚══════════════════════════════════════════════════════════════════════════╝

    // Initialize some values for arithmetic operations
    let a = 10;
    let b = 5;
    let c = 2;
    let d = 20;

    // StoreAddFpFp: [fp + off2] = [fp + off0] + [fp + off1]
    let sum1 = a + b;
    let sum1 = a + a;
    a = a + a;

    // StoreAddFpImm: [fp + off2] = [fp + off0] + imm
    let sum2 = a + 3;
    a = a + 3;

    // StoreSubFpFp: [fp + off2] = [fp + off0] - [fp + off1]
    let diff1 = a - b;
    let diff1 = a - a;
    a = a - a;

    // StoreSubFpImm: [fp + off2] = [fp + off0] - imm
    let diff2 = a - 2;
    b = b - 2;

    // StoreMulFpFp: [fp + off2] = [fp + off0] * [fp + off1]
    let prod1 = a * b;
    let prod1 = b * b;
    b = b * b;

    // StoreMulFpImm: [fp + off2] = [fp + off0] * imm
    let prod2 = a * 4;
    a = a * 4;

    // StoreDivFpFp: [fp + off2] = [fp + off0] / [fp + off1]
    let div1 = d / b;
    let div1 = d / d;
    c = c / c;

    // StoreDivFpImm: [fp + off2] = [fp + off0] / imm
    let div2 = d / 4;
    d = d / 4;


    // StoreImm: [fp + off2] = imm (immediate store)
    let immediate = 42;

    // ╔══════════════════════════════════════════════════════════════════════════╗
    // ║                              U32 Arithmetics Tests                       ║
    // ╚══════════════════════════════════════════════════════════════════════════╝

    let MAX_u16: u32 = 65535; // 2**16 - 1
    let MAX_u32: u32 = 4294967295; // 2**32 - 1
    let two_pow_16: u32 = 65536;
    let zero_u32: u32 = 0;

    // U32StoreAddFpImm
    // u16_carry = 0 and u32_carry = 0
    let u32_sum1: u32 = MAX_u16 + 0u32;
    // u16_carry = 1 and u32_carry = 0
    let u32_sum2: u32 = MAX_u16 + 1u32;
    // u16_carry = 1 and u32_carry = 1
    let u32_sum3: u32 = MAX_u32 + 1u32;

    // U32StoreSubFpImm
    // borrow_lo = 0 and borrow_hi = 0
    let u32_diff1: u32 = MAX_u16 - 42u32;
    // borrow_lo = 1 and borrow_hi = 0
    let u32_diff2: u32 = two_pow_16 - 1u32;
    // borrow_lo = 1 and borrow_hi = 1
    let u32_diff3: u32 = zero_u32 - 1u32;

    // JnzFpImm
    if (a != 5) {
        a = a + 1;
    }

    // JmpAbsImma
    let counter = 0;
    loop {
        counter = counter + 1;
        if (counter == 2) {
            break;
        }
    }

    // CallAbsImm
    let result = helper();

    return result;
}

fn helper() -> felt {
    return 5;
}

// Cairo-M combination test file demonstrating all compilable opcodes
// This program exercises all implemented opcodes for comprehensive testing

fn main() -> felt {
    // Initialize some values for arithmetic operations
    let a = 10;
    let b = 5;
    let c = 2;
    let d = 20;

    // StoreAddFpFp: [fp + off2] = [fp + off0] + [fp + off1]
    let sum1 = a + b;
    let sum1 = a + a;
    a = a + a;

    // StoreAddFpImm: [fp + off2] = [fp + off0] + imm
    let sum2 = a + 3;
    a = a + 3;

    // StoreSubFpFp: [fp + off2] = [fp + off0] - [fp + off1]
    let diff1 = a - b;
    let diff1 = a - a;
    a = a - a;

    // StoreSubFpImm: [fp + off2] = [fp + off0] - imm
    let diff2 = a - 2;
    b = b - 2;

    // StoreMulFpFp: [fp + off2] = [fp + off0] * [fp + off1]
    let prod1 = a * b;
    let prod1 = b * b;
    b = b * b;

    // StoreMulFpImm: [fp + off2] = [fp + off0] * imm
    let prod2 = a * 4;
    a = a * 4;

    // StoreDivFpFp: [fp + off2] = [fp + off0] / [fp + off1]
    let div1 = d / b;
    let div1 = d / d;
    c = c / c;

    // StoreDivFpImm: [fp + off2] = [fp + off0] / imm
    let div2 = d / 4;
    d = d / 4;

    // StoreImm: [fp + off2] = imm (immediate store)
    let immediate = 42;

    // U32StoreImm
    let x_u32: u32 = 42u32;

    // U32StoreMulFpImm: [fp + off2] = [fp + off0] * imm
    let mul3 = x_u32 * 4;
    // U32StoreAddFpImm: [fp + off2] = [fp + off0] + imm
    let add3 = x_u32 + 4;

    // U32StoreLtFpImm
    let is_lt1 = x_u32 < 1u32;
    let is_lt2 = x_u32 < 0u32;
    let is_lt1 = x_u32 < 42u32;
    let is_lt1 = x_u32 < 43u32;

    // U32StoreLtFpFp
    let zero = 0u32;
    let one = 1u32;
    let forty_two = 42u32;
    let forty_three = 43u32;
    let is_lt1 = x_u32 < one;
    let is_lt2 = x_u32 < zero;
    let is_lt1 = x_u32 < forty_two;
    let is_lt1 = x_u32 < forty_three;

    // JnzFpImm
    if (a != 5) {
        a = a + 1;
    }

    // JmpAbsImma
    let counter = 0;
    loop {
        counter = counter + 1;
        if (counter == 2) {
            break;
        }
    }

    // CallAbsImm
    let result = helper();

    return result;
}

fn helper() -> felt {
    return 5;
}
